namespace Terraria
{
    using Microsoft.Xna.Framework;
    using Microsoft.Xna.Framework.Audio;
    using Microsoft.Xna.Framework.Graphics;
    using Microsoft.Xna.Framework.Input;
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Threading;
    using System.Collections.Generic;

    public class Main : Game
    {
        //BlueFly - Start
        public static int chathistnum = 0;
        public static bool togglechatmove = true;
        public static bool togglepaste = true;
        //BlueFly - End

        private static int accSlotCount = 0;
        public static Texture2D antLionTexture;
        public static float armorAlpha = 1f;
        public static Texture2D[] armorArmTexture = new Texture2D[0x19];
        public static Texture2D[] armorBodyTexture = new Texture2D[0x19];
        public static Texture2D[] armorHeadTexture = new Texture2D[0x2c];
        public static bool armorHide = false;
        public static Texture2D[] armorLegTexture = new Texture2D[0x18];
        public static bool autoGen = false;
        public static bool autoJoin = false;
        public static bool autoPass = false;
        public static bool autoPause = false;
        public static bool autoSave = true;
        public static bool autoShutdown = false;
        public static int[] availableRecipe = new int[Recipe.maxRecipes];
        public static float[] availableRecipeY = new float[Recipe.maxRecipes];
        public static int background = 0;
        public static int[] backgroundHeight = new int[0x20];
        private RenderTarget2D backgroundTarget;
        public static Texture2D[] backgroundTexture = new Texture2D[0x20];
        public static int[] backgroundWidth = new int[0x20];
        private static int backSpaceCount = 0;
        private RenderTarget2D backWaterTarget;
        public static Texture2D[] bannerTexture = new Texture2D[3];
        public static float[] bgAlpha = new float[10];
        public static float[] bgAlpha2 = new float[10];
        public static Color bgColor;
        public static int bgDelay = 0;
        private int bgLoops;
        private int bgLoopsY;
        private double bgParrallax;
        private int bgScroll;
        private int bgStart;
        private int bgStartY;
        public static int bgStyle = 0;
        private int bgTop;
        private RenderTarget2D blackTarget;
        public static Texture2D blackTileTexture;
        public static bool bloodMoon = false;
        public static Texture2D boneArm2Texture;
        public static Texture2D boneArmTexture;
        public static Texture2D BoneEyesTexture;
        public static Texture2D BoneLaserTexture;
        public static float rightWorld = 134400f;
        public static float bottomWorld = 38400f;
        public static Texture2D bubbleTexture;
        public static float[] buffAlpha = new float[40];
        public static string[] buffName = new string[40];
        public static string buffString = "";
        public static Texture2D[] buffTexture = new Texture2D[40];
        public static string[] buffTip = new string[40];
        public static float caveParrallax = 1f;
        public static string cBuff = "B";
        public static string cDown = "S";
        public static Texture2D cdTexture;
        public static Texture2D chain10Texture;
        public static Texture2D chain11Texture;
        public static Texture2D chain12Texture;
        public static Texture2D chain2Texture;
        public static Texture2D chain3Texture;
        public static Texture2D chain4Texture;
        public static Texture2D chain5Texture;
        public static Texture2D chain6Texture;
        public static Texture2D chain7Texture;
        public static Texture2D chain8Texture;
        public static Texture2D chain9Texture;
        public static Texture2D chainTexture;
        public static Texture2D chaosTexture;
        public static Texture2D chat2Texture;
        public static Texture2D chatBackTexture;
        public static int chatLength = 900;
        public static int numChatLines = 16;
        public static ChatLine[] chatLine = new ChatLine[numChatLines];
        public static bool chatMode = false;
        public static bool chatRelease = false;
        public static string chatText = "";
        public static Texture2D chatTexture;
        public static string cHeal = "H";
        public static int checkForSpawns = 0;
        public static Chest[] chest = new Chest[0x3e8];
        public bool chestDepositHover;
        public float chestDepositScale = 1f;
        public bool chestLootHover;
        public float chestLootScale = 1f;
        public bool chestStackHover;
        public float chestStackScale = 1f;
        public static string chestText = "Chest";
        public static string cHook = "E";
        public static string[] chrName = new string[0x8e];
        public static string cInv = "Escape";
        public static string cJump = "Space";
        public static string cLeft = "A";
        public static Player clientPlayer = new Player();
        public static Cloud[] cloud = new Cloud[100];
        public static int cloudLimit = 100;
        public static Texture2D[] cloudTexture = new Texture2D[4];
        public static string cMana = "M";
        private int colorDelay;
        public static CombatText[] combatText = new CombatText[100];
        public static Texture2D confuseTexture;
        private static Item cpItem = new Item();
        public static bool craftGuide = false;
        public static float craftingAlpha = 1f;
        public static bool craftingHide = false;
        public static string cRight = "D";
        public static string cThrowItem = "T";
        public static string cTorch = "LeftShift";
        public static string cUp = "W";
        public static int curMusic = 0;
        public static int curRelease = 0x24;
        public static float cursorAlpha = 0f;
        public static Color cursorColor = Color.White;
        public static int cursorColorDirection = 1;
        public static float cursorScale = 0f;
        public static Texture2D cursorTexture;
        public const double dayLength = 54000.0;
        public static int dayRate = 1;
        public static bool dayTime = true;
        public static bool[] debuff = new bool[40];
        public static string debugWords = "";
        public static bool dedServ = false;
        public static string defaultIP = "";
        public static float demonTorch = 1f;
        public static int demonTorchDir = 1;
        public static Texture2D[] destTexture = new Texture2D[3];
        public static int DiscoB = 0;
        public static int DiscoG = 0;
        public static int DiscoR = 0xff;
        public int DiscoStyle;
        private int[] displayHeight = new int[0x63];
        private int[] displayWidth = new int[0x63];
        public static bool drawDiag = false;
        public static bool drawRelease = false;
        public static bool drawScene = false;
        public static bool drawSkip = false;
        public static int drawTime = 0;
        public static float[] drawTimer = new float[10];
        public static float[] drawTimerMax = new float[10];
        public static float[] drawTimerMaxDelay = new float[10];
        public static bool drawToScreen = false;
        public static int dungeonTiles;
        public static int dungeonX;
        public static int dungeonY;
        public static Dust[] dust = new Dust[0x7d1];
        public static Texture2D dustTexture;
        public static bool editSign = false;
        public static AudioEngine engine;
        public static int essDir = -1;
        public static float essScale = 1f;
        public static Texture2D evilCactusTexture;
        public static int evilTiles;
        private static float exitScale = 0.8f;
        public static Texture2D EyeLaserTexture;
        public static int fadeCounter = 0;
        public static Texture2D fadeTexture;
        public static Texture2D[] femaleBodyTexture = new Texture2D[0x19];
        public static Texture2D femalePantsTexture;
        public static Texture2D femaleShirt2Texture;
        public static Texture2D femaleShirtTexture;
        public static Texture2D femaleShoesTexture;
        public static Texture2D femaleUnderShirt2Texture;
        public static Texture2D femaleUnderShirtTexture;
        private int firstTileX;
        private int firstTileY;
        public static bool fixedTiming = false;
        private int focusColor;
        private int focusMenu = -1;
        public static int focusRecipe;
        public static SpriteFont[] fontCombatText = new SpriteFont[2];
        public static SpriteFont fontDeathText;
        public static SpriteFont fontItemStack;
        public static SpriteFont fontMouseText;
        public static int fpsCount = 0;
        public static Stopwatch fpsTimer = new Stopwatch();
        public static int frameRate = 0;
        public static bool frameRelease = false;
        public static bool gameMenu = true;
        public static bool gamePad = false;
        public static bool gamePaused = false;
        public bool gammaTest;
        public static string getIP = defaultIP;
        public static string getPort = Convert.ToString(Netplay.serverPort);
        public static float gfxQuality = 1f;
        public static float gfxRate = 0.01f;
        public static Texture2D ghostTexture;
        public static Texture2D goodCactusTexture;
        public static Gore[] gore = new Gore[0xc9];
        public static Texture2D[] goreTexture = new Texture2D[0x9d];
        public static bool grabSky = false;
        private GraphicsDeviceManager graphics;
        public static Texture2D gridTexture;
        public static Item guideItem = new Item();
        public static bool hardMode = false;
        public static float harpNote = 0f;
        public static bool hasFocus = true;
        public static Texture2D[] HBLockTexture = new Texture2D[2];
        public static Color hcColor = new Color(200, 0x7d, 0xff);
        public static Texture2D heartTexture;
        public static int helpText = 0;
        public static bool hideUI = false;
        public static int holyTiles;
        public static float[] hotbarScale = new float[] { 1f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f };
        public static bool ignoreErrors = true;
        private static KeyboardState inputText;
        public static bool inputTextEnter = false;
        public static float invAlpha = 1f;
        public static bool invasionDefeat = false;
        public static int invasionDelay = 0;
        public static int invasionSize = 0;
        public static int invasionType = 0;
        public static int invasionWarn = 0;
        public static double invasionX = 0.0;
        public static float invDir = 1f;
        public static Texture2D inventoryBack10Texture;
        public static Texture2D inventoryBack11Texture;
        public static Texture2D inventoryBack2Texture;
        public static Texture2D inventoryBack3Texture;
        public static Texture2D inventoryBack4Texture;
        public static Texture2D inventoryBack5Texture;
        public static Texture2D inventoryBack6Texture;
        public static Texture2D inventoryBack7Texture;
        public static Texture2D inventoryBack8Texture;
        public static Texture2D inventoryBack9Texture;
        public static Texture2D inventoryBackTexture;
        private static float inventoryScale = 0.75f;
        public static float iS = 1f;
        public static Item[] item = new Item[0xc9];
        public static string[] itemName = new string[0x24a];
        public static ItemText[] itemText = new ItemText[20];
        public static Texture2D[] itemTexture = new Texture2D[0x24a];
        public static int jungleTiles;
        public static KeyboardState keyState = Keyboard.GetState();
        public static int lastItemUpdate;
        public static int lastNPCUpdate;
        private int lastTileX;
        private int lastTileY;
        public static float leftWorld = 0f;
        public static string libPath = "";
        public static Texture2D lightDiscTexture;
        public static float[] lightTimer = new float[10];
        public static Liquid[] liquid = new Liquid[Liquid.resLiquid];
        public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[0x2710];
        public static Texture2D[] liquidTexture = new Texture2D[2];
        public static int lo = 0;
        public static Player[] loadPlayer = new Player[5];
        public static string[] loadPlayerPath = new string[5];
        public static string[] loadWorld = new string[0x3e7];
        public static string[] loadWorldPath = new string[0x3e7];
        public static Texture2D logo2Texture;
        public static Texture2D logo3Texture;
        public static int LogoA = 0xff;
        public static int LogoB = 0;
        private float logoRotation;
        private float logoRotationDirection = 1f;
        private float logoRotationSpeed = 1f;
        private float logoScale = 1f;
        private float logoScaleDirection = 1f;
        private float logoScaleSpeed = 1f;
        public static bool LogoT = false;
        public static Texture2D logoTexture;
        public static Texture2D[] loTexture = new Texture2D[6];
        public static int magmaBGFrame = 0;
        public static int magmaBGFrameCounter = 0;
        public static Texture2D manaTexture;
        public const int maxBackgrounds = 0x20;
        public const int maxBuffs = 40;
        public const int maxChests = 0x3e8;
        public const int maxClouds = 100;
        public const int maxCloudTypes = 4;
        public const int maxCombatText = 100;
        public const int maxDust = 0x7d0;
        public const int maxGore = 200;
        public const int maxGoreTypes = 0x9d;
        public const int maxHair = 0x24;
        public const int maxInventory = 0x30;
        public const int maxItems = 200;
        public const int maxItemSounds = 0x25;
        public const int maxItemText = 20;
        public const int maxItemTypes = 0x24a;
        public static int maxItemUpdates = 5;
        public const int maxLiquidTypes = 2;
        private static int maxMenuItems = 14;
        public static int maxMP = 10;
        public static int maxMsg = 0x3d;
        public const int maxMusic = 14;
        public static int maxNetPlayers = 0xff;
        public const int maxNPCHitSounds = 10;
        public const int maxNPCKilledSounds = 14;
        public const int maxNPCs = 200;
        public const int maxNPCTypes = 0x8e;
        public static int maxNPCUpdates = 5;
        public const int maxPlayers = 0xff;
        public const int maxProjectiles = 0x3e8;
        public const int maxProjectileTypes = 0x6d;
        public static bool maxQ = true;
        public static int maxScreenH = 0x4b0;
        public static int maxScreenW = 0x780;
        public static int maxSectionsX = (maxTilesX / 200);
        public static int maxSectionsY = (maxTilesY / 150);
        public const int maxStars = 130;
        public const int maxStarTypes = 5;
        public const int maxTileSets = 0x91;
        public static int maxTilesX = ((((int) rightWorld) / 0x10) + 1);
        public static int maxTilesY = ((((int) bottomWorld) / 0x10) + 1);
        public const int maxWallTypes = 0x1d;
        public static Color mcColor = new Color(0x7d, 0x7d, 0xff);
        public static int menuFocus = 0;
        private float[] menuItemScale = new float[maxMenuItems];
        public static int menuMode = 0;
        public static bool menuMultiplayer = false;
        public static bool menuServer = false;
        public static int meteorTiles;
        private const int MF_BYPOSITION = 0x400;
        public static int minScreenH = 600;
        public static int minScreenW = 800;
        public static short moonModY = 0;
        public static int moonPhase = 0;
        public static Texture2D moonTexture;
        public static string motd = "";
        public static Color mouseColor = new Color(0xff, 50, 0x5f);
        private static bool mouseExit = false;
        public static bool mouseHC = false;
        public static Item mouseItem = new Item();
        public static bool mouseLeft;
        public static bool mouseLeftRelease = false;
        public int mouseNPC = -1;
        private static bool mouseReforge = false;
        public static bool mouseRight;
        public static bool mouseRightRelease = false;
        public static MouseState mouseState = Mouse.GetState();
        public static byte mouseTextColor = 0;
        public static int mouseTextColorChange = 1;
        public static int mouseX;
        public static int mouseY;
        public static Microsoft.Xna.Framework.Audio.Cue[] music = new Microsoft.Xna.Framework.Audio.Cue[14];
        public static int musicBox = -1;
        public static int musicBox2 = -1;
        public static Texture2D MusicBoxTexture;
        public static float[] musicFade = new float[14];
        public static float musicVolume = 0.75f;
        public static int myPlayer = 0;
        public static bool netDiag = false;
        public static int netMode = 0;
        public static int netPlayCounter;
        public static bool netRelease = false;
        public int newMusic;
        public static string newWorldName = "";
        public const double nightLength = 32400.0;
        public static Texture2D ninjaTexture;
        public static NPC[] npc = new NPC[0xc9];
        public static bool npcChatFocus1 = false;
        public static bool npcChatFocus2 = false;
        public static bool npcChatFocus3 = false;
        public static bool npcChatRelease = false;
        public static string npcChatText = "";
        public static int[] npcFrameCount = new int[] { 
            1, 2, 2, 3, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            2, 0x10, 14, 0x10, 14, 15, 0x10, 2, 10, 1, 0x10, 0x10, 0x10, 3, 1, 15, 
            3, 1, 3, 1, 1, 0x10, 0x10, 1, 1, 1, 3, 3, 15, 3, 7, 7, 
            4, 5, 5, 5, 3, 3, 0x10, 6, 3, 6, 6, 2, 5, 3, 2, 7, 
            7, 4, 2, 8, 1, 5, 1, 2, 4, 0x10, 5, 4, 4, 15, 15, 15, 
            15, 2, 4, 6, 6, 0x12, 0x10, 1, 1, 1, 1, 1, 1, 4, 3, 1, 
            1, 1, 1, 1, 1, 5, 6, 7, 0x10, 1, 1, 0x10, 0x10, 12, 20, 0x15, 
            1, 2, 2, 3, 6, 1, 1, 1, 15, 4, 11, 1, 14, 6, 6, 3, 
            1, 2, 2, 1, 3, 4, 1, 2, 1, 4, 2, 1, 15, 3
         };
        public static Texture2D[] npcHeadTexture = new Texture2D[11];
        public static string[] npcName = new string[0x8e];
        public static int npcShop = 0;
        public static Texture2D[] npcTexture = new Texture2D[0x8e];
        public static Texture2D[] npcToggleTexture = new Texture2D[2];
        public const int numArmorBody = 0x19;
        public const int numArmorHead = 0x2c;
        public const int numArmorLegs = 0x18;
        public static int numAvailableRecipes;
        public static int numClouds = cloudLimit;
        private int numDisplayModes;
        public static int numDust = 0x7d0;
        private static int numLoadPlayers = 0;
        private static int numLoadWorlds = 0;
        public static int numStars;
        private static int offScreenRange = 200;
        private static KeyboardState oldInputText;
        public static MouseState oldMouseState = Mouse.GetState();
        public static string oldStatusText = "";
        public static int oldTempLightCount = 0;
        public static Player[] player = new Player[0x100];
        public static Texture2D playerEyesTexture;
        public static Texture2D playerEyeWhitesTexture;
        public static Texture2D[] playerHairTexture = new Texture2D[0x24];
        public static Texture2D playerHands2Texture;
        public static Texture2D playerHandsTexture;
        public static Texture2D playerHeadTexture;
        public static bool playerInventory = false;
        public static Texture2D playerPantsTexture;
        public static string SavePath = (Environment.GetFolderPath(Environment.SpecialFolder.Personal) + @"\My Games\Terraria");
        public static string PlayerPath = (SavePath + @"\Players");
        public static string playerPathName;
        public static Texture2D playerShirtTexture;
        public static Texture2D playerShoesTexture;
        public static Texture2D playerUnderShirt2Texture;
        public static Texture2D playerUnderShirtTexture;
        public static Texture2D probeTexture;
        public static Projectile[] projectile = new Projectile[0x3e9];
        public static Texture2D[] projectileTexture = new Texture2D[0x6d];
        public static int[] projFrames = new int[0x6d];
        public static int qaStyle = 0;
        public static bool qRelease = false;
        public static int quickBG = 2;
        [ThreadStatic]
        public static Random rand;
        public static Texture2D raTexture;
        public static string[] recentIP = new string[maxMP];
        public static int[] recentPort = new int[maxMP];
        public static string[] recentWorld = new string[maxMP];
        public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
        public static bool reforge = false;
        public static Item reforgeItem = new Item();
        private static float reforgeScale = 0.8f;
        public static Texture2D reforgeTexture;
        public static bool releaseUI = false;
        public static bool render = false;
        public static int renderCount = 0x63;
        public static bool renderNow = false;
        public static float[] renderTimer = new float[10];
        public static bool resetClouds = true;
        public static Texture2D reTexture;
        public static bool RGBRelease = false;
        public static double rockLayer;
        public static int rxData = 0;
        public static int[] rxDataType = new int[maxMsg];
        public static int rxMsg = 0;
        public static int[] rxMsgType = new int[maxMsg];
        public static int sandTiles;
        private static Stopwatch saveTime = new Stopwatch();
        public static int saveTimer = 0;
        public static Vector2 sceneBackgroundPos = new Vector2();
        public static Vector2 sceneTile2Pos = new Vector2();
        public static Vector2 sceneTilePos = new Vector2();
        public static Vector2 sceneWallPos = new Vector2();
        public static Vector2 sceneWaterPos = new Vector2();
        public static int screenHeight = 600;
        public static Vector2 screenLastPosition;
        public static Vector2 screenPosition;
        public static int screenWidth = 800;
        public const int sectionHeight = 150;
        public const int sectionWidth = 200;
        private Color selColor = Color.White;
        private int selectedMenu = -1;
        private int selectedMenu2 = -1;
        private int selectedPlayer;
        private int selectedWorld;
        public static bool serverStarting = false;
        private int setKey = -1;
        public Chest[] shop = new Chest[9];
        public static bool shortRender = true;
        public static bool showFrameRate = false;
        public static bool showItemOwner = false;
        public static bool showItemText = true;
        public bool showNPCs;
        public static bool showSpam = false;
        public static bool showSplash = true;
        public static Texture2D shroomCapTexture;
        public static Sign[] sign = new Sign[0x3e8];
        public static bool signBubble = false;
        public static string signText = "";
        public static int signX = 0;
        public static int signY = 0;
        public static Texture2D skinBodyTexture;
        public static Texture2D skinLegsTexture;
        public static bool skipMenu = false;
        public static Microsoft.Xna.Framework.Audio.SoundBank soundBank;
        public static SoundEffect soundChat;
        public static SoundEffect soundCoins;
        public static SoundEffect[] soundDig = new SoundEffect[3];
        public static SoundEffect soundDoorClosed;
        public static SoundEffect soundDoorOpen;
        public static SoundEffect soundDoubleJump;
        public static SoundEffect soundDrown;
        public static SoundEffect[] soundFemaleHit = new SoundEffect[3];
        public static SoundEffect soundGrab;
        public static SoundEffect soundGrass;
        public static SoundEffectInstance soundInstanceChat;
        public static SoundEffectInstance soundInstanceCoins;
        public static SoundEffectInstance[] soundInstanceDig = new SoundEffectInstance[3];
        public static SoundEffectInstance soundInstanceDoorClosed;
        public static SoundEffectInstance soundInstanceDoorOpen;
        public static SoundEffectInstance soundInstanceDoubleJump;
        public static SoundEffectInstance soundInstanceDrown;
        public static SoundEffectInstance[] soundInstanceFemaleHit = new SoundEffectInstance[3];
        public static SoundEffectInstance soundInstanceGrab;
        public static SoundEffectInstance soundInstanceGrass;
        public static SoundEffectInstance[] soundInstanceItem = new SoundEffectInstance[0x26];
        public static SoundEffectInstance soundInstanceMaxMana;
        public static SoundEffectInstance[] soundInstanceMech = new SoundEffectInstance[1];
        public static SoundEffectInstance soundInstanceMenuClose;
        public static SoundEffectInstance soundInstanceMenuOpen;
        public static SoundEffectInstance soundInstanceMenuTick;
        public static SoundEffectInstance[] soundInstanceNPCHit = new SoundEffectInstance[11];
        public static SoundEffectInstance[] soundInstanceNPCKilled = new SoundEffectInstance[15];
        public static SoundEffectInstance soundInstancePixie;
        public static SoundEffectInstance[] soundInstancePlayerHit = new SoundEffectInstance[3];
        public static SoundEffectInstance soundInstancePlayerKilled;
        public static SoundEffectInstance[] soundInstanceRoar = new SoundEffectInstance[2];
        public static SoundEffectInstance soundInstanceRun;
        public static SoundEffectInstance soundInstanceShatter;
        public static SoundEffectInstance[] soundInstanceSplash = new SoundEffectInstance[2];
        public static SoundEffectInstance[] soundInstanceTink = new SoundEffectInstance[3];
        public static SoundEffectInstance soundInstanceUnlock;
        public static SoundEffectInstance[] soundInstanceZombie = new SoundEffectInstance[5];
        public static SoundEffect[] soundItem = new SoundEffect[0x26];
        public static SoundEffect soundMaxMana;
        public static SoundEffect[] soundMech = new SoundEffect[1];
        public static SoundEffect soundMenuClose;
        public static SoundEffect soundMenuOpen;
        public static SoundEffect soundMenuTick;
        public static SoundEffect[] soundNPCHit = new SoundEffect[11];
        public static SoundEffect[] soundNPCKilled = new SoundEffect[15];
        public static SoundEffect soundPixie;
        public static SoundEffect[] soundPlayerHit = new SoundEffect[3];
        public static SoundEffect soundPlayerKilled;
        public static SoundEffect[] soundRoar = new SoundEffect[2];
        public static SoundEffect soundRun;
        public static SoundEffect soundShatter;
        public static SoundEffect[] soundSplash = new SoundEffect[2];
        public static SoundEffect[] soundTink = new SoundEffect[3];
        public static SoundEffect soundUnlock;
        public static float soundVolume = 1f;
        public static SoundEffect[] soundZombie = new SoundEffect[5];
        public static int spamCount = 0;
        public static int spawnTileX;
        public static int spawnTileY;
        public static Texture2D spikeBaseTexture;
        private int splashCounter;
        public static Texture2D splashTexture;
        private SpriteBatch spriteBatch;
        public static int stackCounter = 0;
        public static int stackDelay = 7;
        public static int stackSplit;
        public static Star[] star = new Star[130];
        public static Texture2D[] starTexture = new Texture2D[5];
        public static string statusText = "";
        public static bool stopTimeOuts = false;
        public static Texture2D sun2Texture;
        public static short sunModY = 0;
        public static Texture2D sunTexture;
        public static bool targetSet = false;
        public static Color[] teamColor = new Color[5];
        public static int teamCooldown = 0;
        public static int teamCooldownLen = 300;
        public static Texture2D teamTexture;
        public static Texture2D textBackTexture;
        private int textBlinkerCount;
        private int textBlinkerState;
        public static Tile[,] tile = new Tile[maxTilesX, maxTilesY];
        private RenderTarget2D tile2Target;
        public static bool[] tileAlch = new bool[0x91];
        public static bool[] tileAxe = new bool[0x91];
        public static bool[] tileBlockLight = new bool[0x91];
        public static Color tileColor;
        public static bool[] tileCut = new bool[0x91];
        public static bool[] tileDungeon = new bool[0x91];
        public static bool[] tileFrameImportant = new bool[0x91];
        public static bool[] tileHammer = new bool[0x91];
        public static bool[] tileLavaDeath = new bool[0x91];
        public static bool[] tileLighted = new bool[0x91];
        public static bool[] tileMergeDirt = new bool[0x91];
        public static string[] tileName = new string[0x91];
        public static bool[] tileNoAttach = new bool[0x91];
        public static bool[] tileNoFail = new bool[0x91];
        public static bool[] tileNoSunLight = new bool[0x91];
        public static bool[] tilePick = new bool[0x91];
        public static int[] tileShine = new int[0x91];
        public static bool[] tileShine2 = new bool[0x91];
        public static bool tilesLoaded = false;
        public static bool[] tileSolid = new bool[0x91];
        public static bool[] tileSolidTop = new bool[0x91];
        public static bool[] tileStone = new bool[0x91];
        public static bool[] tileTable = new bool[0x91];
        private RenderTarget2D tileTarget;
        public static Texture2D[] tileTexture = new Texture2D[0x91];
        public static bool[] tileWaterDeath = new bool[0x91];
        public static double time = 13500.0;
        public static int timeOut = 120;
        public static Texture2D timerTexture;
        public bool toggleFullscreen;
        private static Item toolTip = new Item();
        public static float topWorld = 0f;
        public static Item trashItem = new Item();
        public static Texture2D trashTexture;
        public static Texture2D[] treeBranchTexture = new Texture2D[4];
        public static Texture2D[] treeTopTexture = new Texture2D[4];
        private Process tServer = new Process();
        public static int txData = 0;
        public static int[] txDataType = new int[maxMsg];
        public static int txMsg = 0;
        public static int[] txMsgType = new int[maxMsg];
        public static float uCarry = 0f;
        public static int uCount = 0;
        public static int updateRate = 0;
        public static int updateTime = 0;
        public static Stopwatch updateTimer = new Stopwatch();
        public static float upTimer;
        public static float upTimerMax;
        public static float upTimerMaxDelay;
        public static bool verboseNetplay = false;
        public static string versionNumber = "v1.1";
        public static string versionNumber2 = "v1.1";
        public static int[] wallBlend = new int[0x1d];
        public static bool[] wallHouse = new bool[0x1d];
        public static Texture2D wallOutlineTexture;
        private RenderTarget2D wallTarget;
        public static Texture2D[] wallTexture = new Texture2D[0x1d];
        private RenderTarget2D waterTarget;
        public static Microsoft.Xna.Framework.Audio.WaveBank waveBank;
        public static float windSpeed = 0f;
        public static float windSpeedSpeed = 0f;
        public static Texture2D[] wingsTexture = new Texture2D[3];
        public static Texture2D wireTexture;
        public static int wof = -1;
        public static int wofB;
        public static int wofF = 0;
        public static int wofT;
        public static Texture2D wofTexture;
        public static int worldID;
        public static string worldName = "";
        public static string WorldPath = (SavePath + @"\Worlds");
        public static string worldPathName;
        public static int worldRate = 1;
        public static double worldSurface;
        public static Texture2D wraithEyeTexture;
        public static int zoneX = 0x63;
        public static int zoneY = 0x57;

        public Main()
        {
            this.graphics = new GraphicsDeviceManager(this);
            base.Content.RootDirectory = "Content";
        }

        private static bool AccCheck(Item newItem, int slot)
        {
            if (!player[myPlayer].armor[slot].IsTheSameAs(newItem))
            {
                for (int i = 0; i < player[myPlayer].armor.Length; i++)
                {
                    if (newItem.IsTheSameAs(player[myPlayer].armor[i]))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public static Item armorSwap(Item newItem)
        {
            for (int i = 0; i < player[myPlayer].armor.Length; i++)
            {
                if (newItem.IsTheSameAs(player[myPlayer].armor[i]))
                {
                    accSlotCount = i;
                }
            }
            if (((newItem.headSlot == -1) && (newItem.bodySlot == -1)) && ((newItem.legSlot == -1) && !newItem.accessory))
            {
                return newItem;
            }
            Item item = newItem;
            if (newItem.headSlot != -1)
            {
                item = (Item) player[myPlayer].armor[0].Clone();
                player[myPlayer].armor[0] = (Item) newItem.Clone();
            }
            else if (newItem.bodySlot != -1)
            {
                item = (Item) player[myPlayer].armor[1].Clone();
                player[myPlayer].armor[1] = (Item) newItem.Clone();
            }
            else if (newItem.legSlot != -1)
            {
                item = (Item) player[myPlayer].armor[2].Clone();
                player[myPlayer].armor[2] = (Item) newItem.Clone();
            }
            else if (newItem.accessory)
            {
                for (int j = 3; j < 8; j++)
                {
                    if (player[myPlayer].armor[j].type == 0)
                    {
                        accSlotCount = j - 3;
                        break;
                    }
                }
                for (int k = 0; k < player[myPlayer].armor.Length; k++)
                {
                    if (newItem.IsTheSameAs(player[myPlayer].armor[k]))
                    {
                        accSlotCount = k - 3;
                    }
                }
                item = (Item) player[myPlayer].armor[3 + accSlotCount].Clone();
                player[myPlayer].armor[3 + accSlotCount] = (Item) newItem.Clone();
                accSlotCount++;
                if (accSlotCount >= 5)
                {
                    accSlotCount = 0;
                }
            }
            PlaySound(7, -1, -1, 1);
            Recipe.FindRecipes();
            return item;
        }

        public void autoCreate(string newOpt)
        {
            if (newOpt == "0")
            {
                autoGen = false;
            }
            else if (newOpt == "1")
            {
                maxTilesX = 0x1068;
                maxTilesY = 0x4b0;
                autoGen = true;
            }
            else if (newOpt == "2")
            {
                maxTilesX = 0x189c;
                maxTilesY = 0x708;
                autoGen = true;
            }
            else if (newOpt == "3")
            {
                maxTilesX = 0x20d0;
                maxTilesY = 0x960;
                autoGen = true;
            }
        }

        public void AutoHost()
        {
            menuMultiplayer = true;
            menuServer = true;
            menuMode = 1;
        }

        public void AutoJoin(string IP)
        {
            defaultIP = IP;
            getIP = IP;
            Netplay.SetIP(defaultIP);
            autoJoin = true;
        }

        public void AutoPass()
        {
            autoPass = true;
        }

        public void autoShut()
        {
            autoShutdown = true;
        }

        public static void BankCoins()
        {
            for (int i = 0; i < 20; i++)
            {
                if (((player[myPlayer].bank[i].type >= 0x47) && (player[myPlayer].bank[i].type <= 0x49)) && (player[myPlayer].bank[i].stack == player[myPlayer].bank[i].maxStack))
                {
                    player[myPlayer].bank[i].SetDefaults(player[myPlayer].bank[i].type + 1, false);
                    for (int j = 0; j < 20; j++)
                    {
                        if (((j != i) && (player[myPlayer].bank[j].type == player[myPlayer].bank[i].type)) && (player[myPlayer].bank[j].stack < player[myPlayer].bank[j].maxStack))
                        {
                            Item item1 = player[myPlayer].bank[j];
                            item1.stack++;
                            player[myPlayer].bank[i].SetDefaults(0, false);
                            BankCoins();
                        }
                    }
                }
            }
        }

        private static Color buffColor(Color newColor, float R, float G, float B, float A)
        {
            newColor.R = (byte) (newColor.R * R);
            newColor.G = (byte) (newColor.G * G);
            newColor.B = (byte) (newColor.B * B);
            newColor.A = (byte) (newColor.A * A);
            return newColor;
        }

        public static double CalculateDamage(int Damage, int Defense)
        {
            double num = Damage - (Defense * 0.5);
            if (num < 1.0)
            {
                num = 1.0;
            }
            return num;
        }

        public static void ChestCoins()
        {
            for (int i = 0; i < 20; i++)
            {
                if (((chest[player[myPlayer].chest].item[i].type >= 0x47) && (chest[player[myPlayer].chest].item[i].type <= 0x49)) && (chest[player[myPlayer].chest].item[i].stack == chest[player[myPlayer].chest].item[i].maxStack))
                {
                    chest[player[myPlayer].chest].item[i].SetDefaults(chest[player[myPlayer].chest].item[i].type + 1, false);
                    for (int j = 0; j < 20; j++)
                    {
                        if (((j != i) && (chest[player[myPlayer].chest].item[j].type == chest[player[myPlayer].chest].item[i].type)) && (chest[player[myPlayer].chest].item[j].stack < chest[player[myPlayer].chest].item[j].maxStack))
                        {
                            Item item1 = chest[player[myPlayer].chest].item[j];
                            item1.stack++;
                            chest[player[myPlayer].chest].item[i].SetDefaults(0, false);
                            ChestCoins();
                        }
                    }
                }
            }
        }

        public static void CursorColor()
        {
            cursorAlpha += cursorColorDirection * 0.015f;
            if (cursorAlpha >= 1f)
            {
                cursorAlpha = 1f;
                cursorColorDirection = -1;
            }
            if (cursorAlpha <= 0.6)
            {
                cursorAlpha = 0.6f;
                cursorColorDirection = 1;
            }
            float num = (cursorAlpha * 0.3f) + 0.7f;
            byte r = (byte) (mouseColor.R * cursorAlpha);
            byte g = (byte) (mouseColor.G * cursorAlpha);
            byte b = (byte) (mouseColor.B * cursorAlpha);
            byte a = (byte) (255f * num);
            cursorColor = new Color(r, g, b, a);
            cursorScale = ((cursorAlpha * 0.3f) + 0.7f) + 0.1f;
        }

        public static int DamageVar(float dmg)
        {
            float num = dmg * (1f + (rand.Next(-15, 0x10) * 0.01f));
            return (int) Math.Round((double) num);
        }

        public void DedServ()
        {
            rand = new Random();
            if (autoShutdown)
            {
                string lpWindowName = "terraria" + rand.Next(0x7fffffff);
                Console.Title = lpWindowName;
                IntPtr hWnd = FindWindow(null, lpWindowName);
                if (hWnd != IntPtr.Zero)
                {
                    ShowWindow(hWnd, 0);
                }
            }
            else
            {
                Console.Title = "Terraria Server " + versionNumber2;
            }
            dedServ = true;
            showSplash = false;
            this.Initialize();
            for (int i = 0; i < 0x8e; i++)
            {
                NPC npc = new NPC();
                npc.SetDefaults(i, -1f);
                npcName[i] = npc.name;
            }
            while ((worldPathName == null) || (worldPathName == ""))
            {
                LoadWorlds();
                bool flag = true;
                while (flag)
                {
                    Console.WriteLine("Terraria Server " + versionNumber2);
                    Console.WriteLine("");
                    for (int j = 0; j < numLoadWorlds; j++)
                    {
                        Console.WriteLine(string.Concat(new object[] { j + 1, '\t', '\t', loadWorld[j] }));
                    }
                    Console.WriteLine(string.Concat(new object[] { "n", '\t', '\t', "New World" }));
                    Console.WriteLine("d <number>" + '\t' + "Delete World");
                    Console.WriteLine("");
                    Console.Write("Choose World: ");
                    string str2 = Console.ReadLine();
                    try
                    {
                        Console.Clear();
                    }
                    catch
                    {
                    }
                    if ((str2.Length >= 2) && (str2.Substring(0, 2).ToLower() == "d "))
                    {
                        try
                        {
                            int index = Convert.ToInt32(str2.Substring(2)) - 1;
                            if (index < numLoadWorlds)
                            {
                                Console.WriteLine("Terraria Server " + versionNumber2);
                                Console.WriteLine("");
                                Console.WriteLine("Really delete " + loadWorld[index] + "?");
                                Console.Write("(y/n): ");
                                if (Console.ReadLine().ToLower() == "y")
                                {
                                    EraseWorld(index);
                                }
                            }
                        }
                        catch
                        {
                        }
                        try
                        {
                            Console.Clear();
                            continue;
                        }
                        catch
                        {
                            continue;
                        }
                    }
                    if ((str2 == "n") || (str2 == "N"))
                    {
                        bool flag2 = true;
                        while (flag2)
                        {
                            Console.WriteLine("Terraria Server " + versionNumber2);
                            Console.WriteLine("");
                            Console.WriteLine("1" + '\t' + "Small");
                            Console.WriteLine("2" + '\t' + "Medium");
                            Console.WriteLine("3" + '\t' + "Large");
                            Console.WriteLine("");
                            Console.Write("Choose size: ");
                            string str4 = Console.ReadLine();
                            try
                            {
                                switch (Convert.ToInt32(str4))
                                {
                                    case 1:
                                        maxTilesX = 0x1068;
                                        maxTilesY = 0x4b0;
                                        flag2 = false;
                                        goto Label_0382;

                                    case 2:
                                        maxTilesX = 0x189c;
                                        maxTilesY = 0x708;
                                        flag2 = false;
                                        goto Label_0382;

                                    case 3:
                                        maxTilesX = 0x20d0;
                                        maxTilesY = 0x960;
                                        flag2 = false;
                                        goto Label_0382;
                                }
                            }
                            catch
                            {
                            }
                        Label_0382:
                            try
                            {
                                Console.Clear();
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                        flag2 = true;
                        while (flag2)
                        {
                            Console.WriteLine("Terraria Server " + versionNumber2);
                            Console.WriteLine("");
                            Console.Write("Enter world name: ");
                            newWorldName = Console.ReadLine();
                            if (((newWorldName != "") && (newWorldName != " ")) && (newWorldName != null))
                            {
                                flag2 = false;
                            }
                            try
                            {
                                Console.Clear();
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                        worldName = newWorldName;
                        worldPathName = nextLoadWorld();
                        menuMode = 10;
                        WorldGen.CreateNewWorld();
                        flag2 = false;
                        while (menuMode == 10)
                        {
                            if (oldStatusText != statusText)
                            {
                                oldStatusText = statusText;
                                Console.WriteLine(statusText);
                            }
                        }
                        try
                        {
                            Console.Clear();
                            continue;
                        }
                        catch
                        {
                            continue;
                        }
                    }
                    try
                    {
                        int num5 = Convert.ToInt32(str2) - 1;
                        if ((num5 < 0) || (num5 >= numLoadWorlds))
                        {
                            continue;
                        }
                        bool flag3 = true;
                        while (flag3)
                        {
                            Console.WriteLine("Terraria Server " + versionNumber2);
                            Console.WriteLine("");
                            Console.Write("Max players (press enter for 8): ");
                            string str5 = Console.ReadLine();
                            try
                            {
                                if (str5 == "")
                                {
                                    str5 = "8";
                                }
                                int num6 = Convert.ToInt32(str5);
                                if ((num6 <= 0xff) && (num6 >= 1))
                                {
                                    maxNetPlayers = num6;
                                    flag3 = false;
                                }
                                flag3 = false;
                            }
                            catch
                            {
                            }
                            try
                            {
                                Console.Clear();
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                        flag3 = true;
                        while (flag3)
                        {
                            Console.WriteLine("Terraria Server " + versionNumber2);
                            Console.WriteLine("");
                            Console.Write("Server port (press enter for 7777): ");
                            string str6 = Console.ReadLine();
                            try
                            {
                                if (str6 == "")
                                {
                                    str6 = "7777";
                                }
                                int num7 = Convert.ToInt32(str6);
                                if (num7 <= 0xffff)
                                {
                                    Netplay.serverPort = num7;
                                    flag3 = false;
                                }
                            }
                            catch
                            {
                            }
                            try
                            {
                                Console.Clear();
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                        Console.WriteLine("Terraria Server " + versionNumber2);
                        Console.WriteLine("");
                        Console.Write("Server password (press enter for none): ");
                        Netplay.password = Console.ReadLine();
                        worldPathName = loadWorldPath[num5];
                        flag = false;
                        try
                        {
                            Console.Clear();
                        }
                        catch
                        {
                        }
                        continue;
                    }
                    catch
                    {
                        continue;
                    }
                }
            }
            try
            {
                Console.Clear();
            }
            catch
            {
            }
            WorldGen.serverLoadWorld();
            Console.WriteLine("Terraria Server " + versionNumber);
            Console.WriteLine("");
            while (!Netplay.ServerUp)
            {
                if (oldStatusText != statusText)
                {
                    oldStatusText = statusText;
                    Console.WriteLine(statusText);
                }
            }
            try
            {
                Console.Clear();
            }
            catch
            {
            }
            Console.WriteLine("Terraria Server " + versionNumber);
            Console.WriteLine("");
            Console.WriteLine("Listening on port " + Netplay.serverPort);
            Console.WriteLine("Type 'help' for a list of commands.");
            Console.WriteLine("");
            Console.Title = "Terraria Server: " + worldName;
            Stopwatch stopwatch = new Stopwatch();
            if (!autoShutdown)
            {
                startDedInput();
            }
            stopwatch.Start();
            double num8 = 16.666666666666668;
            double num9 = 0.0;
            int num10 = 0;
            new Stopwatch().Start();
            while (!Netplay.disconnect)
            {
                double elapsedMilliseconds = stopwatch.ElapsedMilliseconds;
                if ((elapsedMilliseconds + num9) >= num8)
                {
                    num10++;
                    num9 += elapsedMilliseconds - num8;
                    stopwatch.Reset();
                    stopwatch.Start();
                    if (oldStatusText != statusText)
                    {
                        oldStatusText = statusText;
                        Console.WriteLine(statusText);
                    }
                    if (num9 > 1000.0)
                    {
                        num9 = 1000.0;
                    }
                    if (Netplay.anyClients)
                    {
                        this.Update(new GameTime());
                    }
                    double num12 = stopwatch.ElapsedMilliseconds + num9;
                    if (num12 < num8)
                    {
                        int millisecondsTimeout = ((int) (num8 - num12)) - 1;
                        if (millisecondsTimeout > 1)
                        {
                            Thread.Sleep(millisecondsTimeout);
                            if (!Netplay.anyClients)
                            {
                                num9 = 0.0;
                                Thread.Sleep(10);
                            }
                        }
                    }
                }
                Thread.Sleep(0);
            }
        }

        protected override void Draw(GameTime gameTime)
        {
            if (Lighting.lightMode >= 2)
            {
                drawToScreen = true;
            }
            else
            {
                drawToScreen = false;
            }
            if (drawToScreen)
            {
                bool targetSet = Main.targetSet;
            }
            if (!drawToScreen && !Main.targetSet)
            {
                this.InitTargets();
            }
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            fpsCount++;
            if (!base.IsActive)
            {
                maxQ = true;
            }
            if (!dedServ)
            {
                bool flag = false;
                if ((screenWidth != base.GraphicsDevice.Viewport.Width) || (screenHeight != base.GraphicsDevice.Viewport.Height))
                {
                    flag = true;
                    if (gamePaused)
                    {
                        renderNow = true;
                    }
                }
                screenWidth = base.GraphicsDevice.Viewport.Width;
                screenHeight = base.GraphicsDevice.Viewport.Height;
                if (screenWidth > maxScreenW)
                {
                    screenWidth = maxScreenW;
                    flag = true;
                }
                if (screenHeight > maxScreenH)
                {
                    screenHeight = maxScreenH;
                    flag = true;
                }
                if (screenWidth < minScreenW)
                {
                    screenWidth = minScreenW;
                    flag = true;
                }
                if (screenHeight < minScreenH)
                {
                    screenHeight = minScreenH;
                    flag = true;
                }
                if (flag)
                {
                    this.graphics.PreferredBackBufferWidth = screenWidth;
                    this.graphics.PreferredBackBufferHeight = screenHeight;
                    this.graphics.ApplyChanges();
                    if (!drawToScreen)
                    {
                        this.InitTargets();
                    }
                }
            }
            CursorColor();
            drawTime++;
            screenLastPosition = screenPosition;
            if (stackSplit == 0)
            {
                stackCounter = 0;
                stackDelay = 7;
            }
            else
            {
                stackCounter++;
                if (stackCounter >= 30)
                {
                    stackDelay--;
                    if (stackDelay < 2)
                    {
                        stackDelay = 2;
                    }
                    stackCounter = 0;
                }
            }
            mouseTextColor = (byte) (mouseTextColor + ((byte) mouseTextColorChange));
            if (mouseTextColor >= 250)
            {
                mouseTextColorChange = -4;
            }
            if (mouseTextColor <= 0xaf)
            {
                mouseTextColorChange = 4;
            }
            if (myPlayer >= 0)
            {
                player[myPlayer].mouseInterface = false;
            }
            toolTip = new Item();
            if ((!ZidoMod.freeCam && !gameMenu) && (netMode != 2))
            {
                screenPosition.X = (player[myPlayer].position.X + (player[myPlayer].width * 0.5f)) - (screenWidth * 0.5f);
                screenPosition.Y = (player[myPlayer].position.Y + (player[myPlayer].height * 0.5f)) - (screenHeight * 0.5f);
                screenPosition.X = (int) screenPosition.X;
                screenPosition.Y = (int) screenPosition.Y;
            }
            if (!gameMenu && (netMode != 2))
            {
                if (ZidoMod.followMode == 1)
                {
                    if (!Main.player[ZidoMod.followTarget].active)
                    {
                        ZidoMod.followMode = 0;
                        ZidoMod.followTarget = 0;
                    }
                    else
                    {
                        Main.screenPosition.X = (Main.player[ZidoMod.followTarget].position.X + (Main.player[ZidoMod.followTarget].width * 0.5f)) - (Main.screenWidth * 0.5f);
                        Main.screenPosition.Y = (Main.player[ZidoMod.followTarget].position.Y + (Main.player[ZidoMod.followTarget].height * 0.5f)) - (Main.screenHeight * 0.5f);
                        Main.screenPosition.X = (int)Main.screenPosition.X;
                        Main.screenPosition.Y = (int)Main.screenPosition.Y;
                    }
                }
                if (screenPosition.X < ((leftWorld + (Lighting.offScreenTiles * 0x10)) + 16f))
                {
                    screenPosition.X = (leftWorld + (Lighting.offScreenTiles * 0x10)) + 16f;
                }
                else if ((screenPosition.X + screenWidth) > ((rightWorld - (Lighting.offScreenTiles * 0x10)) - 32f))
                {
                    screenPosition.X = ((rightWorld - screenWidth) - (Lighting.offScreenTiles * 0x10)) - 32f;
                }
                if (screenPosition.Y < ((topWorld + (Lighting.offScreenTiles * 0x10)) + 16f))
                {
                    screenPosition.Y = (topWorld + (Lighting.offScreenTiles * 0x10)) + 16f;
                }
                else if ((screenPosition.Y + screenHeight) > ((bottomWorld - (Lighting.offScreenTiles * 0x10)) - 32f))
                {
                    screenPosition.Y = ((bottomWorld - screenHeight) - (Lighting.offScreenTiles * 0x10)) - 32f;
                }
            }
            if (showSplash)
            {
                this.DrawSplash(gameTime);
            }
            else
            {
                Rectangle rectangle;
                Vector2 vector10;
                if (!gameMenu)
                {
                    if (renderNow)
                    {
                        screenLastPosition = screenPosition;
                        renderNow = false;
                        renderCount = 0x63;
                        int tempLightCount = Lighting.tempLightCount;
                        this.Draw(gameTime);
                        Lighting.tempLightCount = tempLightCount;
                        Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
                        Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
                        this.RenderTiles();
                        sceneTilePos.X = screenPosition.X - offScreenRange;
                        sceneTilePos.Y = screenPosition.Y - offScreenRange;
                        this.RenderBackground();
                        sceneBackgroundPos.X = screenPosition.X - offScreenRange;
                        sceneBackgroundPos.Y = screenPosition.Y - offScreenRange;
                        this.RenderWalls();
                        sceneWallPos.X = screenPosition.X - offScreenRange;
                        sceneWallPos.Y = screenPosition.Y - offScreenRange;
                        this.RenderTiles2();
                        sceneTile2Pos.X = screenPosition.X - offScreenRange;
                        sceneTile2Pos.Y = screenPosition.Y - offScreenRange;
                        this.RenderWater();
                        sceneWaterPos.X = screenPosition.X - offScreenRange;
                        sceneWaterPos.Y = screenPosition.Y - offScreenRange;
                        renderCount = 0x63;
                    }
                    else
                    {
                        if (renderCount == 3)
                        {
                            this.RenderTiles();
                            sceneTilePos.X = screenPosition.X - offScreenRange;
                            sceneTilePos.Y = screenPosition.Y - offScreenRange;
                        }
                        if (renderCount == 2)
                        {
                            this.RenderBackground();
                            sceneBackgroundPos.X = screenPosition.X - offScreenRange;
                            sceneBackgroundPos.Y = screenPosition.Y - offScreenRange;
                        }
                        if (renderCount == 2)
                        {
                            this.RenderWalls();
                            sceneWallPos.X = screenPosition.X - offScreenRange;
                            sceneWallPos.Y = screenPosition.Y - offScreenRange;
                        }
                        if (renderCount == 3)
                        {
                            this.RenderTiles2();
                            sceneTile2Pos.X = screenPosition.X - offScreenRange;
                            sceneTile2Pos.Y = screenPosition.Y - offScreenRange;
                        }
                        if (renderCount == 1)
                        {
                            this.RenderWater();
                            sceneWaterPos.X = screenPosition.X - offScreenRange;
                            sceneWaterPos.Y = screenPosition.Y - offScreenRange;
                        }
                    }
                    if (render && !gameMenu)
                    {
                        if ((Math.Abs((float) (sceneTilePos.X - (screenPosition.X - offScreenRange))) > offScreenRange) || (Math.Abs((float) (sceneTilePos.Y - (screenPosition.Y - offScreenRange))) > offScreenRange))
                        {
                            this.RenderTiles();
                            sceneTilePos.X = screenPosition.X - offScreenRange;
                            sceneTilePos.Y = screenPosition.Y - offScreenRange;
                        }
                        if ((Math.Abs((float) (sceneTile2Pos.X - (screenPosition.X - offScreenRange))) > offScreenRange) || (Math.Abs((float) (sceneTile2Pos.Y - (screenPosition.Y - offScreenRange))) > offScreenRange))
                        {
                            this.RenderTiles2();
                            sceneTile2Pos.X = screenPosition.X - offScreenRange;
                            sceneTile2Pos.Y = screenPosition.Y - offScreenRange;
                        }
                        if ((Math.Abs((float) (sceneBackgroundPos.X - (screenPosition.X - offScreenRange))) > offScreenRange) || (Math.Abs((float) (sceneBackgroundPos.Y - (screenPosition.Y - offScreenRange))) > offScreenRange))
                        {
                            this.RenderBackground();
                            sceneBackgroundPos.X = screenPosition.X - offScreenRange;
                            sceneBackgroundPos.Y = screenPosition.Y - offScreenRange;
                        }
                        if ((Math.Abs((float) (sceneWallPos.X - (screenPosition.X - offScreenRange))) > offScreenRange) || (Math.Abs((float) (sceneWallPos.Y - (screenPosition.Y - offScreenRange))) > offScreenRange))
                        {
                            this.RenderWalls();
                            sceneWallPos.X = screenPosition.X - offScreenRange;
                            sceneWallPos.Y = screenPosition.Y - offScreenRange;
                        }
                        if ((Math.Abs((float) (sceneWaterPos.X - (screenPosition.X - offScreenRange))) > offScreenRange) || (Math.Abs((float) (sceneWaterPos.Y - (screenPosition.Y - offScreenRange))) > offScreenRange))
                        {
                            this.RenderWater();
                            sceneWaterPos.X = screenPosition.X - offScreenRange;
                            sceneWaterPos.Y = screenPosition.Y - offScreenRange;
                        }
                    }
                }
                this.bgParrallax = 0.1;
                this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) backgroundWidth[background])) - (backgroundWidth[background] / 2);
                this.bgLoops = (screenWidth / backgroundWidth[background]) + 2;
                this.bgStartY = 0;
                this.bgLoopsY = 0;
                this.bgTop = (int) ((((double) -screenPosition.Y) / ((worldSurface * 16.0) - 600.0)) * 200.0);
                Main.bgColor = Color.White;
                if (gameMenu || (netMode == 2))
                {
                    this.bgTop = -200;
                }
                int num2 = ((int) ((time / 54000.0) * (screenWidth + (sunTexture.Width * 2)))) - sunTexture.Width;
                int num3 = 0;
                Color white = Color.White;
                float scale = 1f;
                float rotation = (((float) (time / 54000.0)) * 2f) - 7.3f;
                int num7 = ((int) ((time / 32400.0) * (screenWidth + (moonTexture.Width * 2)))) - moonTexture.Width;
                int num8 = 0;
                Color color = Color.White;
                float num9 = 1f;
                float num10 = (((float) (time / 32400.0)) * 2f) - 7.3f;
                float num12 = 0f;
                if (dayTime)
                {
                    double num6;
                    if (time < 27000.0)
                    {
                        num6 = Math.Pow(1.0 - ((time / 54000.0) * 2.0), 2.0);
                        num3 = (int) ((this.bgTop + (num6 * 250.0)) + 180.0);
                    }
                    else
                    {
                        num6 = Math.Pow(((time / 54000.0) - 0.5) * 2.0, 2.0);
                        num3 = (int) ((this.bgTop + (num6 * 250.0)) + 180.0);
                    }
                    scale = (float) (1.2 - (num6 * 0.4));
                }
                else
                {
                    double num11;
                    if (time < 16200.0)
                    {
                        num11 = Math.Pow(1.0 - ((time / 32400.0) * 2.0), 2.0);
                        num8 = (int) ((this.bgTop + (num11 * 250.0)) + 180.0);
                    }
                    else
                    {
                        num11 = Math.Pow(((time / 32400.0) - 0.5) * 2.0, 2.0);
                        num8 = (int) ((this.bgTop + (num11 * 250.0)) + 180.0);
                    }
                    num9 = (float) (1.2 - (num11 * 0.4));
                }
                if (dayTime)
                {
                    if (time < 13500.0)
                    {
                        num12 = (float) (time / 13500.0);
                        white.R = (byte) ((num12 * 200f) + 55f);
                        white.G = (byte) ((num12 * 180f) + 75f);
                        white.B = (byte) ((num12 * 250f) + 5f);
                        Main.bgColor.R = (byte) ((num12 * 230f) + 25f);
                        Main.bgColor.G = (byte) ((num12 * 220f) + 35f);
                        Main.bgColor.B = (byte) ((num12 * 220f) + 35f);
                    }
                    if (time > 45900.0)
                    {
                        num12 = (float) (1.0 - (((time / 54000.0) - 0.85) * 6.666666666666667));
                        white.R = (byte) ((num12 * 120f) + 55f);
                        white.G = (byte) ((num12 * 100f) + 25f);
                        white.B = (byte) ((num12 * 120f) + 55f);
                        Main.bgColor.R = (byte) ((num12 * 200f) + 35f);
                        Main.bgColor.G = (byte) ((num12 * 85f) + 35f);
                        Main.bgColor.B = (byte) ((num12 * 135f) + 35f);
                    }
                    else if (time > 37800.0)
                    {
                        num12 = (float) (1.0 - (((time / 54000.0) - 0.7) * 6.666666666666667));
                        white.R = (byte) ((num12 * 80f) + 175f);
                        white.G = (byte) ((num12 * 130f) + 125f);
                        white.B = (byte) ((num12 * 100f) + 155f);
                        Main.bgColor.R = (byte) ((num12 * 20f) + 235f);
                        Main.bgColor.G = (byte) ((num12 * 135f) + 120f);
                        Main.bgColor.B = (byte) ((num12 * 85f) + 170f);
                    }
                }
                if (!dayTime)
                {
                    if (bloodMoon)
                    {
                        if (time < 16200.0)
                        {
                            num12 = (float) (1.0 - (time / 16200.0));
                            color.R = (byte) ((num12 * 10f) + 205f);
                            color.G = (byte) ((num12 * 170f) + 55f);
                            color.B = (byte) ((num12 * 200f) + 55f);
                            Main.bgColor.R = (byte) ((40f - (num12 * 40f)) + 35f);
                            Main.bgColor.G = (byte) ((num12 * 20f) + 15f);
                            Main.bgColor.B = (byte) ((num12 * 20f) + 15f);
                        }
                        else if (time >= 16200.0)
                        {
                            num12 = (float) (((time / 32400.0) - 0.5) * 2.0);
                            color.R = (byte) ((num12 * 50f) + 205f);
                            color.G = (byte) ((num12 * 100f) + 155f);
                            color.B = (byte) ((num12 * 100f) + 155f);
                            color.R = (byte) ((num12 * 10f) + 205f);
                            color.G = (byte) ((num12 * 170f) + 55f);
                            color.B = (byte) ((num12 * 200f) + 55f);
                            Main.bgColor.R = (byte) ((40f - (num12 * 40f)) + 35f);
                            Main.bgColor.G = (byte) ((num12 * 20f) + 15f);
                            Main.bgColor.B = (byte) ((num12 * 20f) + 15f);
                        }
                    }
                    else if (time < 16200.0)
                    {
                        num12 = (float) (1.0 - (time / 16200.0));
                        color.R = (byte) ((num12 * 10f) + 205f);
                        color.G = (byte) ((num12 * 70f) + 155f);
                        color.B = (byte) ((num12 * 100f) + 155f);
                        Main.bgColor.R = (byte) ((num12 * 20f) + 15f);
                        Main.bgColor.G = (byte) ((num12 * 20f) + 15f);
                        Main.bgColor.B = (byte) ((num12 * 20f) + 15f);
                    }
                    else if (time >= 16200.0)
                    {
                        num12 = (float) (((time / 32400.0) - 0.5) * 2.0);
                        color.R = (byte) ((num12 * 50f) + 205f);
                        color.G = (byte) ((num12 * 100f) + 155f);
                        color.B = (byte) ((num12 * 100f) + 155f);
                        Main.bgColor.R = (byte) ((num12 * 10f) + 15f);
                        Main.bgColor.G = (byte) ((num12 * 20f) + 15f);
                        Main.bgColor.B = (byte) ((num12 * 20f) + 15f);
                    }
                }
                if (gameMenu || (netMode == 2))
                {
                    this.bgTop = 0;
                    if (!dayTime)
                    {
                        Main.bgColor.R = 0x23;
                        Main.bgColor.G = 0x23;
                        Main.bgColor.B = 0x23;
                    }
                }
                if (gameMenu)
                {
                    bgDelay = 0x3e8;
                    evilTiles = (int) (bgAlpha[1] * 500f);
                }
                if (evilTiles > 0)
                {
                    float num13 = ((float) evilTiles) / 500f;
                    if (num13 > 1f)
                    {
                        num13 = 1f;
                    }
                    int r = Main.bgColor.R;
                    int g = Main.bgColor.G;
                    int b = Main.bgColor.B;
                    r -= (int) ((100f * num13) * (((float) Main.bgColor.R) / 255f));
                    g -= (int) ((140f * num13) * (((float) Main.bgColor.G) / 255f));
                    b -= (int) ((80f * num13) * (((float) Main.bgColor.B) / 255f));
                    if (r < 15)
                    {
                        r = 15;
                    }
                    if (g < 15)
                    {
                        g = 15;
                    }
                    if (b < 15)
                    {
                        b = 15;
                    }
                    Main.bgColor.R = (byte) r;
                    Main.bgColor.G = (byte) g;
                    Main.bgColor.B = (byte) b;
                    r = white.R;
                    g = white.G;
                    b = white.B;
                    r -= (int) ((100f * num13) * (((float) white.R) / 255f));
                    g -= (int) ((100f * num13) * (((float) white.G) / 255f));
                    b -= (int) ((0f * num13) * (((float) white.B) / 255f));
                    if (r < 15)
                    {
                        r = 15;
                    }
                    if (g < 15)
                    {
                        g = 15;
                    }
                    if (b < 15)
                    {
                        b = 15;
                    }
                    white.R = (byte) r;
                    white.G = (byte) g;
                    white.B = (byte) b;
                    r = color.R;
                    g = color.G;
                    b = color.B;
                    r -= (int) ((140f * num13) * (((float) color.R) / 255f));
                    g -= (int) ((190f * num13) * (((float) color.G) / 255f));
                    b -= (int) ((170f * num13) * (((float) color.B) / 255f));
                    if (r < 15)
                    {
                        r = 15;
                    }
                    if (g < 15)
                    {
                        g = 15;
                    }
                    if (b < 15)
                    {
                        b = 15;
                    }
                    color.R = (byte) r;
                    color.G = (byte) g;
                    color.B = (byte) b;
                }
                if (jungleTiles > 0)
                {
                    float num17 = ((float) jungleTiles) / 200f;
                    if (num17 > 1f)
                    {
                        num17 = 1f;
                    }
                    int num18 = Main.bgColor.R;
                    int num19 = Main.bgColor.G;
                    int num20 = Main.bgColor.B;
                    num18 -= (int) ((20f * num17) * (((float) Main.bgColor.R) / 255f));
                    num20 -= (int) ((90f * num17) * (((float) Main.bgColor.B) / 255f));
                    if (num19 > 0xff)
                    {
                        num19 = 0xff;
                    }
                    if (num19 < 15)
                    {
                        num19 = 15;
                    }
                    if (num18 > 0xff)
                    {
                        num18 = 0xff;
                    }
                    if (num18 < 15)
                    {
                        num18 = 15;
                    }
                    if (num20 < 15)
                    {
                        num20 = 15;
                    }
                    Main.bgColor.R = (byte) num18;
                    Main.bgColor.G = (byte) num19;
                    Main.bgColor.B = (byte) num20;
                    num18 = white.R;
                    num19 = white.G;
                    num20 = white.B;
                    num18 -= (int) ((30f * num17) * (((float) white.R) / 255f));
                    num20 -= (int) ((10f * num17) * (((float) white.B) / 255f));
                    if (num18 < 15)
                    {
                        num18 = 15;
                    }
                    if (num19 < 15)
                    {
                        num19 = 15;
                    }
                    if (num20 < 15)
                    {
                        num20 = 15;
                    }
                    white.R = (byte) num18;
                    white.G = (byte) num19;
                    white.B = (byte) num20;
                    num18 = color.R;
                    num19 = color.G;
                    num20 = color.B;
                    num19 -= (int) ((140f * num17) * (((float) color.R) / 255f));
                    num18 -= (int) ((170f * num17) * (((float) color.G) / 255f));
                    num20 -= (int) ((190f * num17) * (((float) color.B) / 255f));
                    if (num18 < 15)
                    {
                        num18 = 15;
                    }
                    if (num19 < 15)
                    {
                        num19 = 15;
                    }
                    if (num20 < 15)
                    {
                        num20 = 15;
                    }
                    color.R = (byte) num18;
                    color.G = (byte) num19;
                    color.B = (byte) num20;
                }
                if (Main.bgColor.R < 15)
                {
                    Main.bgColor.R = 15;
                }
                if (Main.bgColor.G < 15)
                {
                    Main.bgColor.G = 15;
                }
                if (Main.bgColor.B < 15)
                {
                    Main.bgColor.B = 15;
                }
                if (bloodMoon)
                {
                    if (Main.bgColor.R < 0x19)
                    {
                        Main.bgColor.R = 0x19;
                    }
                    if (Main.bgColor.G < 0x19)
                    {
                        Main.bgColor.G = 0x19;
                    }
                    if (Main.bgColor.B < 0x19)
                    {
                        Main.bgColor.B = 0x19;
                    }
                }
                tileColor.A = 0xff;
                tileColor.R = (byte) (((Main.bgColor.R + Main.bgColor.B) + Main.bgColor.G) / 3);
                tileColor.G = (byte) (((Main.bgColor.R + Main.bgColor.B) + Main.bgColor.G) / 3);
                tileColor.B = (byte) (((Main.bgColor.R + Main.bgColor.B) + Main.bgColor.G) / 3);
                tileColor.R = (byte) ((((Main.bgColor.R + Main.bgColor.G) + Main.bgColor.B) + (Main.bgColor.R * 7)) / 10);
                tileColor.G = (byte) ((((Main.bgColor.R + Main.bgColor.G) + Main.bgColor.B) + (Main.bgColor.G * 7)) / 10);
                tileColor.B = (byte) ((((Main.bgColor.R + Main.bgColor.G) + Main.bgColor.B) + (Main.bgColor.B * 7)) / 10);
                if ((tileColor.R >= 0xff) && (tileColor.G >= 0xff))
                {
                    byte num1 = tileColor.B;
                }
                float num21 = maxTilesX / 0x1068;
                num21 *= num21;
                float num22 = (float) (((double) (((screenPosition.Y + (screenHeight / 2)) / 16f) - (65f + (10f * num21)))) / (worldSurface / 5.0));
                if (num22 < 0f)
                {
                    num22 = 0f;
                }
                if (num22 > 1f)
                {
                    num22 = 1f;
                }
                if (gameMenu)
                {
                    num22 = 1f;
                }
                Main.bgColor.R = (byte) (Main.bgColor.R * num22);
                Main.bgColor.G = (byte) (Main.bgColor.G * num22);
                Main.bgColor.B = (byte) (Main.bgColor.B * num22);
                base.GraphicsDevice.Clear(Color.Black);
                base.Draw(gameTime);
                this.spriteBatch.Begin();
                if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                {
                    for (int j = 0; j < this.bgLoops; j++)
                    {
                        this.spriteBatch.Draw(backgroundTexture[background], new Rectangle(this.bgStart + (backgroundWidth[background] * j), this.bgTop, backgroundWidth[background], backgroundHeight[background]), Main.bgColor);
                    }
                }
                if (((screenPosition.Y < ((worldSurface * 16.0) + 16.0)) && (((0xff - Main.bgColor.R) - 100) > 0)) && (netMode != 2))
                {
                    for (int k = 0; k < numStars; k++)
                    {
                        Color color3 = new Color();
                        float num25 = ((float) evilTiles) / 500f;
                        if (num25 > 1f)
                        {
                            num25 = 1f;
                        }
                        num25 = 1f - (num25 * 0.5f);
                        if (evilTiles <= 0)
                        {
                            num25 = 1f;
                        }
                        int num26 = (int) ((((0xff - Main.bgColor.R) - 100) * star[k].twinkle) * num25);
                        int num27 = (int) ((((0xff - Main.bgColor.G) - 100) * star[k].twinkle) * num25);
                        int num28 = (int) ((((0xff - Main.bgColor.B) - 100) * star[k].twinkle) * num25);
                        if (num26 < 0)
                        {
                            num26 = 0;
                        }
                        if (num27 < 0)
                        {
                            num27 = 0;
                        }
                        if (num28 < 0)
                        {
                            num28 = 0;
                        }
                        color3.R = (byte) num26;
                        color3.G = (byte) (num27 * num25);
                        color3.B = (byte) (num28 * num25);
                        float num29 = star[k].position.X * (((float) screenWidth) / 800f);
                        float num30 = star[k].position.Y * (((float) screenHeight) / 600f);
                        this.spriteBatch.Draw(starTexture[star[k].type], new Vector2(num29 + (starTexture[star[k].type].Width * 0.5f), (num30 + (starTexture[star[k].type].Height * 0.5f)) + this.bgTop), new Rectangle(0, 0, starTexture[star[k].type].Width, starTexture[star[k].type].Height), color3, star[k].rotation, new Vector2(starTexture[star[k].type].Width * 0.5f, starTexture[star[k].type].Height * 0.5f), (float) (star[k].scale * star[k].twinkle), SpriteEffects.None, 0f);
                    }
                }
                if ((screenPosition.Y / 16f) < (worldSurface + 2.0))
                {
                    if (dayTime)
                    {
                        scale *= 1.1f;
                        if (!gameMenu && (player[myPlayer].head == 12))
                        {
                            this.spriteBatch.Draw(sun2Texture, new Vector2((float) num2, (float) (num3 + sunModY)), new Rectangle(0, 0, sunTexture.Width, sunTexture.Height), white, rotation, new Vector2((float) (sunTexture.Width / 2), (float) (sunTexture.Height / 2)), scale, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            this.spriteBatch.Draw(sunTexture, new Vector2((float) num2, (float) (num3 + sunModY)), new Rectangle(0, 0, sunTexture.Width, sunTexture.Height), white, rotation, new Vector2((float) (sunTexture.Width / 2), (float) (sunTexture.Height / 2)), scale, SpriteEffects.None, 0f);
                        }
                    }
                    if (!dayTime)
                    {
                        this.spriteBatch.Draw(moonTexture, new Vector2((float) num7, (float) (num8 + moonModY)), new Rectangle(0, moonTexture.Width * moonPhase, moonTexture.Width, moonTexture.Width), color, num10, new Vector2((float) (moonTexture.Width / 2), (float) (moonTexture.Width / 2)), num9, SpriteEffects.None, 0f);
                    }
                }
                if (dayTime)
                {
                    rectangle = new Rectangle(num2 - ((int) ((sunTexture.Width * 0.5) * scale)), (int) ((num3 - ((sunTexture.Height * 0.5) * scale)) + sunModY), (int) (sunTexture.Width * scale), (int) (sunTexture.Width * scale));
                }
                else
                {
                    rectangle = new Rectangle(num7 - ((int) ((moonTexture.Width * 0.5) * num9)), (int) ((num8 - ((moonTexture.Width * 0.5) * num9)) + moonModY), (int) (moonTexture.Width * num9), (int) (moonTexture.Width * num9));
                }
                Rectangle rectangle2 = new Rectangle(mouseX, mouseY, 1, 1);
                sunModY = (short) (sunModY * 0.999);
                moonModY = (short) (moonModY * 0.999);
                if (gameMenu && (netMode != 1))
                {
                    if (mouseLeft && hasFocus)
                    {
                        if (rectangle2.Intersects(rectangle) || grabSky)
                        {
                            if (dayTime)
                            {
                                time = 54000.0 * (((float) (mouseX + sunTexture.Width)) / (screenWidth + (sunTexture.Width * 2)));
                                sunModY = (short) (mouseY - num3);
                                if (time > 53990.0)
                                {
                                    time = 53990.0;
                                }
                            }
                            else
                            {
                                time = 32400.0 * (((float) (mouseX + moonTexture.Width)) / (screenWidth + (moonTexture.Width * 2)));
                                moonModY = (short) (mouseY - num8);
                                if (time > 32390.0)
                                {
                                    time = 32390.0;
                                }
                            }
                            if (time < 10.0)
                            {
                                time = 10.0;
                            }
                            if (netMode != 0)
                            {
                                NetMessage.SendData(0x12, -1, -1, "", 0, 0f, 0f, 0f, 0);
                            }
                            grabSky = true;
                        }
                    }
                    else
                    {
                        grabSky = false;
                    }
                }
                float num31 = screenHeight - 600;
                this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1200.0) + 1190.0);
                float num32 = this.bgTop - 50;
                if (resetClouds)
                {
                    Cloud.resetClouds();
                    resetClouds = false;
                }
                if (base.IsActive || (netMode != 0))
                {
                    windSpeedSpeed += rand.Next(-10, 11) * 0.0001f;
                    if (!dayTime)
                    {
                        windSpeedSpeed += rand.Next(-10, 11) * 0.0002f;
                    }
                    if (windSpeedSpeed < -0.002)
                    {
                        windSpeedSpeed = -0.002f;
                    }
                    if (windSpeedSpeed > 0.002)
                    {
                        windSpeedSpeed = 0.002f;
                    }
                    windSpeed += windSpeedSpeed;
                    if (windSpeed < -0.3)
                    {
                        windSpeed = -0.3f;
                    }
                    if (windSpeed > 0.3)
                    {
                        windSpeed = 0.3f;
                    }
                    numClouds += rand.Next(-1, 2);
                    if (numClouds < 0)
                    {
                        numClouds = 0;
                    }
                    if (numClouds > cloudLimit)
                    {
                        numClouds = cloudLimit;
                    }
                }
                if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                {
                    for (int m = 0; m < 100; m++)
                    {
                        if (cloud[m].active && (cloud[m].scale < 1f))
                        {
                            Color color4 = cloud[m].cloudColor(Main.bgColor);
                            if (num22 < 1f)
                            {
                                color4.R = (byte) (color4.R * num22);
                                color4.G = (byte) (color4.G * num22);
                                color4.B = (byte) (color4.B * num22);
                                color4.A = (byte) (color4.A * num22);
                            }
                            float num34 = cloud[m].position.Y * (((float) screenHeight) / 600f);
                            float num35 = (float) (((double) ((screenPosition.Y / 16f) - 24f)) / worldSurface);
                            if (num35 < 0f)
                            {
                                num35 = 0f;
                            }
                            if (num35 > 1f)
                            {
                                num35 = 1f;
                            }
                            if (gameMenu)
                            {
                                num35 = 1f;
                            }
                            this.spriteBatch.Draw(cloudTexture[cloud[m].type], new Vector2(cloud[m].position.X + (cloudTexture[cloud[m].type].Width * 0.5f), (num34 + (cloudTexture[cloud[m].type].Height * 0.5f)) + num32), new Rectangle(0, 0, cloudTexture[cloud[m].type].Width, cloudTexture[cloud[m].type].Height), color4, cloud[m].rotation, new Vector2(cloudTexture[cloud[m].type].Width * 0.5f, cloudTexture[cloud[m].type].Height * 0.5f), cloud[m].scale, SpriteEffects.None, 0f);
                        }
                    }
                }
                num22 = 1f;
                float num36 = 1f;
                this.bgParrallax = 0.15;
                int num37 = (int) (backgroundWidth[7] * num36);
                Color bgColor = Main.bgColor;
                Color color6 = bgColor;
                if (num22 < 1f)
                {
                    bgColor.R = (byte) (bgColor.R * num22);
                    bgColor.G = (byte) (bgColor.G * num22);
                    bgColor.B = (byte) (bgColor.B * num22);
                    bgColor.A = (byte) (bgColor.A * num22);
                }
                this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                this.bgLoops = (screenWidth / num37) + 2;
                this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1300.0) + 1090.0);
                if (gameMenu)
                {
                    this.bgTop = 100;
                }
                if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                {
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha2[0]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha2[0]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha2[0]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha2[0]);
                    if (bgAlpha2[0] > 0f)
                    {
                        for (int n = 0; n < this.bgLoops; n++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[7], new Vector2((float) (this.bgStart + (num37 * n)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[7], backgroundHeight[7]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                        }
                    }
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha2[1]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha2[1]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha2[1]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha2[1]);
                    if (bgAlpha2[1] > 0f)
                    {
                        for (int num39 = 0; num39 < this.bgLoops; num39++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[0x17], new Vector2((float) (this.bgStart + (num37 * num39)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[7], backgroundHeight[7]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                        }
                    }
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha2[2]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha2[2]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha2[2]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha2[2]);
                    if (bgAlpha2[2] > 0f)
                    {
                        for (int num40 = 0; num40 < this.bgLoops; num40++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[0x18], new Vector2((float) (this.bgStart + (num37 * num40)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[7], backgroundHeight[7]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                        }
                    }
                }
                num32 = this.bgTop - 50;
                if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                {
                    for (int num41 = 0; num41 < 100; num41++)
                    {
                        if ((cloud[num41].active && (cloud[num41].scale < 1.15)) && (cloud[num41].scale >= 1f))
                        {
                            Color color7 = cloud[num41].cloudColor(Main.bgColor);
                            if (num22 < 1f)
                            {
                                color7.R = (byte) (color7.R * num22);
                                color7.G = (byte) (color7.G * num22);
                                color7.B = (byte) (color7.B * num22);
                                color7.A = (byte) (color7.A * num22);
                            }
                            float num42 = cloud[num41].position.Y * (((float) screenHeight) / 600f);
                            float num43 = (float) (((double) ((screenPosition.Y / 16f) - 24f)) / worldSurface);
                            if (num43 < 0f)
                            {
                                num43 = 0f;
                            }
                            if (num43 > 1f)
                            {
                                num43 = 1f;
                            }
                            if (gameMenu)
                            {
                                num43 = 1f;
                            }
                            this.spriteBatch.Draw(cloudTexture[cloud[num41].type], new Vector2(cloud[num41].position.X + (cloudTexture[cloud[num41].type].Width * 0.5f), (num42 + (cloudTexture[cloud[num41].type].Height * 0.5f)) + num32), new Rectangle(0, 0, cloudTexture[cloud[num41].type].Width, cloudTexture[cloud[num41].type].Height), color7, cloud[num41].rotation, new Vector2(cloudTexture[cloud[num41].type].Width * 0.5f, cloudTexture[cloud[num41].type].Height * 0.5f), cloud[num41].scale, SpriteEffects.None, 0f);
                        }
                    }
                }
                if (holyTiles > 0)
                {
                    this.bgParrallax = 0.17;
                    num36 = 1.1f;
                    num37 = (int) ((3500f * num36) * 1.05);
                    this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                    this.bgLoops = (screenWidth / num37) + 2;
                    this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1400.0) + 900.0);
                    if (gameMenu)
                    {
                        this.bgTop = 230;
                        this.bgStart -= 500;
                    }
                    Color color8 = color6;
                    float num44 = ((float) holyTiles) / 400f;
                    if (num44 > 0.5f)
                    {
                        num44 = 0.5f;
                    }
                    color8.R = (byte) (color8.R * num44);
                    color8.G = (byte) (color8.G * num44);
                    color8.B = (byte) (color8.B * num44);
                    color8.A = (byte) ((color8.A * num44) * 0.8f);
                    if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                    {
                        for (int num45 = 0; num45 < this.bgLoops; num45++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[0x12], new Vector2((float) (this.bgStart + (num37 * num45)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[0x12], backgroundHeight[0x12]), color8, 0f, vector10, num36, SpriteEffects.None, 0f);
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[0x13], new Vector2((float) ((this.bgStart + (num37 * num45)) + 0x6a4), (float) (this.bgTop + 100)), new Rectangle(0, 0, backgroundWidth[0x13], backgroundHeight[0x13]), color8, 0f, vector10, (float) (num36 * 0.9f), SpriteEffects.None, 0f);
                        }
                    }
                }
                this.bgParrallax = 0.2;
                num36 = 1.15f;
                num37 = (int) (backgroundWidth[7] * num36);
                this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                this.bgLoops = (screenWidth / num37) + 2;
                this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1400.0) + 1260.0);
                if (gameMenu)
                {
                    this.bgTop = 230;
                    this.bgStart -= 500;
                }
                if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                {
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha2[0]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha2[0]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha2[0]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha2[0]);
                    if (bgAlpha2[0] > 0f)
                    {
                        for (int num46 = 0; num46 < this.bgLoops; num46++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[8], new Vector2((float) (this.bgStart + (num37 * num46)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[7], backgroundHeight[7]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                        }
                    }
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha2[1]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha2[1]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha2[1]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha2[1]);
                    if (bgAlpha2[1] > 0f)
                    {
                        for (int num47 = 0; num47 < this.bgLoops; num47++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[0x16], new Vector2((float) (this.bgStart + (num37 * num47)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[7], backgroundHeight[7]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                        }
                    }
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha2[2]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha2[2]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha2[2]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha2[2]);
                    if (bgAlpha2[2] > 0f)
                    {
                        for (int num48 = 0; num48 < this.bgLoops; num48++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[0x19], new Vector2((float) (this.bgStart + (num37 * num48)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[7], backgroundHeight[7]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                        }
                    }
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha2[3]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha2[3]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha2[3]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha2[3]);
                    if (bgAlpha2[3] > 0f)
                    {
                        for (int num49 = 0; num49 < this.bgLoops; num49++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(backgroundTexture[0x1c], new Vector2((float) (this.bgStart + (num37 * num49)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[7], backgroundHeight[7]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                        }
                    }
                }
                num32 = (this.bgTop * 1.01f) - 150f;
                if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                {
                    for (int num50 = 0; num50 < 100; num50++)
                    {
                        if (cloud[num50].active && (cloud[num50].scale > num36))
                        {
                            Color color9 = cloud[num50].cloudColor(Main.bgColor);
                            if (num22 < 1f)
                            {
                                color9.R = (byte) (color9.R * num22);
                                color9.G = (byte) (color9.G * num22);
                                color9.B = (byte) (color9.B * num22);
                                color9.A = (byte) (color9.A * num22);
                            }
                            float num51 = cloud[num50].position.Y * (((float) screenHeight) / 600f);
                            float num52 = (float) (((double) ((screenPosition.Y / 16f) - 24f)) / worldSurface);
                            if (num52 < 0f)
                            {
                                num52 = 0f;
                            }
                            if (num52 > 1f)
                            {
                                num52 = 1f;
                            }
                            if (gameMenu)
                            {
                                num52 = 1f;
                            }
                            this.spriteBatch.Draw(cloudTexture[cloud[num50].type], new Vector2(cloud[num50].position.X + (cloudTexture[cloud[num50].type].Width * 0.5f), (num51 + (cloudTexture[cloud[num50].type].Height * 0.5f)) + num32), new Rectangle(0, 0, cloudTexture[cloud[num50].type].Width, cloudTexture[cloud[num50].type].Height), color9, cloud[num50].rotation, new Vector2(cloudTexture[cloud[num50].type].Width * 0.5f, cloudTexture[cloud[num50].type].Height * 0.5f), cloud[num50].scale, SpriteEffects.None, 0f);
                        }
                    }
                }
                int bgStyle = Main.bgStyle;
                int num54 = (int) ((screenPosition.X + (screenWidth / 2)) / 16f);
                if ((num54 < 380) || (num54 > (maxTilesX - 380)))
                {
                    bgStyle = 4;
                }
                else if (sandTiles > 0x3e8)
                {
                    if (player[myPlayer].zoneEvil)
                    {
                        bgStyle = 5;
                    }
                    else if (player[myPlayer].zoneHoly)
                    {
                        bgStyle = 5;
                    }
                    else
                    {
                        bgStyle = 2;
                    }
                }
                else if (player[myPlayer].zoneHoly)
                {
                    bgStyle = 6;
                }
                else if (player[myPlayer].zoneEvil)
                {
                    bgStyle = 1;
                }
                else if (player[myPlayer].zoneJungle)
                {
                    bgStyle = 3;
                }
                else
                {
                    bgStyle = 0;
                }
                float num55 = 0.05f;
                int num56 = 30;
                if (bgStyle == 0)
                {
                    num56 = 120;
                }
                if (bgDelay < 0)
                {
                    bgDelay++;
                }
                else if (bgStyle != Main.bgStyle)
                {
                    bgDelay++;
                    if (bgDelay > num56)
                    {
                        bgDelay = -60;
                        Main.bgStyle = bgStyle;
                        if (bgStyle == 0)
                        {
                            bgDelay = 0;
                        }
                    }
                }
                else if (bgDelay > 0)
                {
                    bgDelay--;
                }
                if (gameMenu)
                {
                    num55 = 0.02f;
                    if (!dayTime)
                    {
                        Main.bgStyle = 1;
                    }
                    else
                    {
                        Main.bgStyle = 0;
                    }
                    bgStyle = Main.bgStyle;
                }
                if (quickBG > 0)
                {
                    quickBG--;
                    Main.bgStyle = bgStyle;
                    num55 = 1f;
                }
                if (Main.bgStyle == 2)
                {
                    bgAlpha2[0] -= num55;
                    if (bgAlpha2[0] < 0f)
                    {
                        bgAlpha2[0] = 0f;
                    }
                    bgAlpha2[1] += num55;
                    if (bgAlpha2[1] > 1f)
                    {
                        bgAlpha2[1] = 1f;
                    }
                    bgAlpha2[2] -= num55;
                    if (bgAlpha2[2] < 0f)
                    {
                        bgAlpha2[2] = 0f;
                    }
                    bgAlpha2[3] -= num55;
                    if (bgAlpha2[3] < 0f)
                    {
                        bgAlpha2[3] = 0f;
                    }
                }
                else if (((Main.bgStyle == 5) || (Main.bgStyle == 1)) || (Main.bgStyle == 6))
                {
                    bgAlpha2[0] -= num55;
                    if (bgAlpha2[0] < 0f)
                    {
                        bgAlpha2[0] = 0f;
                    }
                    bgAlpha2[1] -= num55;
                    if (bgAlpha2[1] < 0f)
                    {
                        bgAlpha2[1] = 0f;
                    }
                    bgAlpha2[2] += num55;
                    if (bgAlpha2[2] > 1f)
                    {
                        bgAlpha2[2] = 1f;
                    }
                    bgAlpha2[3] -= num55;
                    if (bgAlpha2[3] < 0f)
                    {
                        bgAlpha2[3] = 0f;
                    }
                }
                else if (Main.bgStyle == 4)
                {
                    bgAlpha2[0] -= num55;
                    if (bgAlpha2[0] < 0f)
                    {
                        bgAlpha2[0] = 0f;
                    }
                    bgAlpha2[1] -= num55;
                    if (bgAlpha2[1] < 0f)
                    {
                        bgAlpha2[1] = 0f;
                    }
                    bgAlpha2[2] -= num55;
                    if (bgAlpha2[2] < 0f)
                    {
                        bgAlpha2[2] = 0f;
                    }
                    bgAlpha2[3] += num55;
                    if (bgAlpha2[3] > 1f)
                    {
                        bgAlpha2[3] = 1f;
                    }
                }
                else
                {
                    bgAlpha2[0] += num55;
                    if (bgAlpha2[0] > 1f)
                    {
                        bgAlpha2[0] = 1f;
                    }
                    bgAlpha2[1] -= num55;
                    if (bgAlpha2[1] < 0f)
                    {
                        bgAlpha2[1] = 0f;
                    }
                    bgAlpha2[2] -= num55;
                    if (bgAlpha2[2] < 0f)
                    {
                        bgAlpha2[2] = 0f;
                    }
                    bgAlpha2[3] -= num55;
                    if (bgAlpha2[3] < 0f)
                    {
                        bgAlpha2[3] = 0f;
                    }
                }
                for (int i = 0; i < 7; i++)
                {
                    if (Main.bgStyle == i)
                    {
                        bgAlpha[i] += num55;
                        if (bgAlpha[i] > 1f)
                        {
                            bgAlpha[i] = 1f;
                        }
                    }
                    else
                    {
                        bgAlpha[i] -= num55;
                        if (bgAlpha[i] < 0f)
                        {
                            bgAlpha[i] = 0f;
                        }
                    }
                    bgColor = color6;
                    bgColor.R = (byte) (bgColor.R * bgAlpha[i]);
                    bgColor.G = (byte) (bgColor.G * bgAlpha[i]);
                    bgColor.B = (byte) (bgColor.B * bgAlpha[i]);
                    bgColor.A = (byte) (bgColor.A * bgAlpha[i]);
                    if ((bgAlpha[i] > 0f) && (i == 3))
                    {
                        num36 = 1.25f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.4;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1800.0) + 1660.0);
                        if (gameMenu)
                        {
                            this.bgTop = 320;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num58 = 0; num58 < this.bgLoops; num58++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[15], new Vector2((float) (this.bgStart + (num37 * num58)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.31f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.43;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1950.0) + 1840.0);
                        if (gameMenu)
                        {
                            this.bgTop = 400;
                            this.bgStart -= 80;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num59 = 0; num59 < this.bgLoops; num59++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[0x10], new Vector2((float) (this.bgStart + (num37 * num59)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.34f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.49;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 2100.0) + 2060.0);
                        if (gameMenu)
                        {
                            this.bgTop = 480;
                            this.bgStart -= 120;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num60 = 0; num60 < this.bgLoops; num60++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[0x11], new Vector2((float) (this.bgStart + (num37 * num60)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if ((bgAlpha[i] > 0f) && (i == 2))
                    {
                        num36 = 1.25f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.37;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1800.0) + 1750.0);
                        if (gameMenu)
                        {
                            this.bgTop = 320;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num61 = 0; num61 < this.bgLoops; num61++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[0x15], new Vector2((float) (this.bgStart + (num37 * num61)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[20]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.34f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.49;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 2100.0) + 2150.0);
                        if (gameMenu)
                        {
                            this.bgTop = 480;
                            this.bgStart -= 120;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num62 = 0; num62 < this.bgLoops; num62++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[20], new Vector2((float) (this.bgStart + (num37 * num62)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[20]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if ((bgAlpha[i] > 0f) && (i == 5))
                    {
                        num36 = 1.25f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.37;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1800.0) + 1750.0);
                        if (gameMenu)
                        {
                            this.bgTop = 320;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num63 = 0; num63 < this.bgLoops; num63++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[0x1a], new Vector2((float) (this.bgStart + (num37 * num63)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[20]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.34f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.49;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 2100.0) + 2150.0);
                        if (gameMenu)
                        {
                            this.bgTop = 480;
                            this.bgStart -= 120;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num64 = 0; num64 < this.bgLoops; num64++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[0x1b], new Vector2((float) (this.bgStart + (num37 * num64)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[20]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if ((bgAlpha[i] > 0f) && (i == 1))
                    {
                        num36 = 1.25f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.4;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1800.0) + 1500.0);
                        if (gameMenu)
                        {
                            this.bgTop = 320;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num65 = 0; num65 < this.bgLoops; num65++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[12], new Vector2((float) (this.bgStart + (num37 * num65)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.31f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.43;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1950.0) + 1750.0);
                        if (gameMenu)
                        {
                            this.bgTop = 400;
                            this.bgStart -= 80;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num66 = 0; num66 < this.bgLoops; num66++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[13], new Vector2((float) (this.bgStart + (num37 * num66)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.34f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.49;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 2100.0) + 2000.0);
                        if (gameMenu)
                        {
                            this.bgTop = 480;
                            this.bgStart -= 120;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num67 = 0; num67 < this.bgLoops; num67++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[14], new Vector2((float) (this.bgStart + (num37 * num67)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if ((bgAlpha[i] > 0f) && (i == 6))
                    {
                        num36 = 1.25f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.4;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1800.0) + 1500.0);
                        if (gameMenu)
                        {
                            this.bgTop = 320;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num68 = 0; num68 < this.bgLoops; num68++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[0x1d], new Vector2((float) (this.bgStart + (num37 * num68)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.31f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.43;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1950.0) + 1750.0);
                        if (gameMenu)
                        {
                            this.bgTop = 400;
                            this.bgStart -= 80;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num69 = 0; num69 < this.bgLoops; num69++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[30], new Vector2((float) (this.bgStart + (num37 * num69)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.34f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.49;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 2100.0) + 2000.0);
                        if (gameMenu)
                        {
                            this.bgTop = 480;
                            this.bgStart -= 120;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num70 = 0; num70 < this.bgLoops; num70++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[0x1f], new Vector2((float) (this.bgStart + (num37 * num70)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if ((bgAlpha[i] > 0f) && (i == 0))
                    {
                        num36 = 1.25f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.4;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1800.0) + 1500.0);
                        if (gameMenu)
                        {
                            this.bgTop = 320;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num71 = 0; num71 < this.bgLoops; num71++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[9], new Vector2((float) (this.bgStart + (num37 * num71)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.31f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.43;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 1950.0) + 1750.0);
                        if (gameMenu)
                        {
                            this.bgTop = 400;
                            this.bgStart -= 80;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num72 = 0; num72 < this.bgLoops; num72++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[10], new Vector2((float) (this.bgStart + (num37 * num72)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                        num36 = 1.34f;
                        num37 = (int) (backgroundWidth[8] * num36);
                        this.bgParrallax = 0.49;
                        this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num37)) - (num37 / 2);
                        this.bgTop = (int) (((((double) (-screenPosition.Y + (num31 / 2f))) / (worldSurface * 16.0)) * 2100.0) + 2000.0);
                        if (gameMenu)
                        {
                            this.bgTop = 480;
                            this.bgStart -= 120;
                        }
                        this.bgLoops = (screenWidth / num37) + 2;
                        if (screenPosition.Y < ((worldSurface * 16.0) + 16.0))
                        {
                            for (int num73 = 0; num73 < this.bgLoops; num73++)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(backgroundTexture[11], new Vector2((float) (this.bgStart + (num37 * num73)), (float) this.bgTop), new Rectangle(0, 0, backgroundWidth[8], backgroundHeight[8]), bgColor, 0f, vector10, num36, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
                if (gameMenu || (netMode == 2))
                {
                    this.DrawMenu();
                }
                else
                {
                    Color color16;
                    this.firstTileX = (int) ((screenPosition.X / 16f) - 1f);
                    this.lastTileX = ((int) ((screenPosition.X + screenWidth) / 16f)) + 2;
                    this.firstTileY = (int) ((screenPosition.Y / 16f) - 1f);
                    this.lastTileY = ((int) ((screenPosition.Y + screenHeight) / 16f)) + 2;
                    if (this.firstTileX < 0)
                    {
                        this.firstTileX = 0;
                    }
                    if (this.lastTileX > maxTilesX)
                    {
                        this.lastTileX = maxTilesX;
                    }
                    if (this.firstTileY < 0)
                    {
                        this.firstTileY = 0;
                    }
                    if (this.lastTileY > maxTilesY)
                    {
                        this.lastTileY = maxTilesY;
                    }
                    if (!drawSkip)
                    {
                        Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
                    }
                    Color color1 = Color.White;
                    if (drawToScreen)
                    {
                        this.DrawWater(true);
                    }
                    else
                    {
                        this.spriteBatch.Draw(this.backWaterTarget, sceneBackgroundPos - screenPosition, Color.White);
                    }
                    float x = (((sceneBackgroundPos.X - screenPosition.X) + offScreenRange) * caveParrallax) - offScreenRange;
                    if (drawToScreen)
                    {
                        this.DrawBackground();
                    }
                    else
                    {
                        this.spriteBatch.Draw(this.backgroundTarget, new Vector2(x, sceneBackgroundPos.Y - screenPosition.Y), Color.White);
                    }
                    magmaBGFrameCounter++;
                    if (magmaBGFrameCounter >= 8)
                    {
                        magmaBGFrameCounter = 0;
                        magmaBGFrame++;
                        if (magmaBGFrame >= 3)
                        {
                            magmaBGFrame = 0;
                        }
                    }
                    try
                    {
                        if (drawToScreen)
                        {
                            this.DrawBlack();
                            this.DrawWalls();
                        }
                        else
                        {
                            this.spriteBatch.Draw(this.blackTarget, sceneTilePos - screenPosition, Color.White);
                            this.spriteBatch.Draw(this.wallTarget, sceneWallPos - screenPosition, Color.White);
                        }
                        this.DrawWoF();
                        if (player[myPlayer].detectCreature)
                        {
                            if (drawToScreen)
                            {
                                this.DrawTiles(false);
                                this.DrawTiles(true);
                            }
                            else
                            {
                                this.spriteBatch.Draw(this.tile2Target, sceneTile2Pos - screenPosition, Color.White);
                                this.spriteBatch.Draw(this.tileTarget, sceneTilePos - screenPosition, Color.White);
                            }
                            this.DrawGore();
                            this.DrawNPCs(true);
                            this.DrawNPCs(false);
                        }
                        else
                        {
                            if (drawToScreen)
                            {
                                this.DrawTiles(false);
                                this.DrawNPCs(true);
                                this.DrawTiles(true);
                            }
                            else
                            {
                                this.spriteBatch.Draw(this.tile2Target, sceneTile2Pos - screenPosition, Color.White);
                                this.DrawNPCs(true);
                                this.spriteBatch.Draw(this.tileTarget, sceneTilePos - screenPosition, Color.White);
                            }
                            this.DrawGore();
                            this.DrawNPCs(false);
                        }
                    }
                    catch
                    {
                    }
                    for (int num75 = 0; num75 < 0x3e8; num75++)
                    {
                        if ((projectile[num75].active && (projectile[num75].type > 0)) && !projectile[num75].hide)
                        {
                            this.DrawProj(num75);
                        }
                    }
                    for (int num76 = 0; num76 < 0xff; num76++)
                    {
                        if (player[num76].active)
                        {
                            if (player[num76].ghost)
                            {
                                Vector2 position = player[num76].position;
                                player[num76].position = player[num76].shadowPos[0];
                                player[num76].shadow = 0.5f;
                                this.DrawGhost(player[num76]);
                                player[num76].position = player[num76].shadowPos[1];
                                player[num76].shadow = 0.7f;
                                this.DrawGhost(player[num76]);
                                player[num76].position = player[num76].shadowPos[2];
                                player[num76].shadow = 0.9f;
                                this.DrawGhost(player[num76]);
                                player[num76].position = position;
                                player[num76].shadow = 0f;
                                this.DrawGhost(player[num76]);
                            }
                            else
                            {
                                bool flag2 = false;
                                bool flag3 = false;
                                if (((player[num76].head == 5) && (player[num76].body == 5)) && (player[num76].legs == 5))
                                {
                                    flag2 = true;
                                }
                                if (((player[num76].head == 7) && (player[num76].body == 7)) && (player[num76].legs == 7))
                                {
                                    flag2 = true;
                                }
                                if (((player[num76].head == 0x16) && (player[num76].body == 14)) && (player[num76].legs == 14))
                                {
                                    flag2 = true;
                                }
                                if (((player[num76].body == 0x11) && (player[num76].legs == 0x10)) && (((player[num76].head == 0x1d) || (player[num76].head == 30)) || (player[num76].head == 0x1f)))
                                {
                                    flag2 = true;
                                }
                                if (((player[num76].body == 0x13) && (player[num76].legs == 0x12)) && (((player[num76].head == 0x23) || (player[num76].head == 0x24)) || (player[num76].head == 0x25)))
                                {
                                    flag3 = true;
                                }
                                if ((player[num76].body == 0x18) && (player[num76].legs == 0x17))
                                {
                                    flag3 = true;
                                    flag2 = true;
                                }
                                if (flag3)
                                {
                                    Vector2 vector2 = player[num76].position;
                                    if (!gamePaused)
                                    {
                                        Player player1 = player[num76];
                                        player1.ghostFade += player[num76].ghostDir * 0.075f;
                                    }
                                    if (player[num76].ghostFade < 0.1)
                                    {
                                        player[num76].ghostDir = 1f;
                                        player[num76].ghostFade = 0.1f;
                                    }
                                    if (player[num76].ghostFade > 0.9)
                                    {
                                        player[num76].ghostDir = -1f;
                                        player[num76].ghostFade = 0.9f;
                                    }
                                    player[num76].position.X = vector2.X - (player[num76].ghostFade * 5f);
                                    player[num76].shadow = player[num76].ghostFade;
                                    this.DrawPlayer(player[num76]);
                                    player[num76].position.X = vector2.X + (player[num76].ghostFade * 5f);
                                    player[num76].shadow = player[num76].ghostFade;
                                    this.DrawPlayer(player[num76]);
                                    player[num76].position = vector2;
                                    player[num76].position.Y = vector2.Y - (player[num76].ghostFade * 5f);
                                    player[num76].shadow = player[num76].ghostFade;
                                    this.DrawPlayer(player[num76]);
                                    player[num76].position.Y = vector2.Y + (player[num76].ghostFade * 5f);
                                    player[num76].shadow = player[num76].ghostFade;
                                    this.DrawPlayer(player[num76]);
                                    player[num76].position = vector2;
                                    player[num76].shadow = 0f;
                                }
                                if (flag2)
                                {
                                    Vector2 vector3 = player[num76].position;
                                    player[num76].position = player[num76].shadowPos[0];
                                    player[num76].shadow = 0.5f;
                                    this.DrawPlayer(player[num76]);
                                    player[num76].position = player[num76].shadowPos[1];
                                    player[num76].shadow = 0.7f;
                                    this.DrawPlayer(player[num76]);
                                    player[num76].position = player[num76].shadowPos[2];
                                    player[num76].shadow = 0.9f;
                                    this.DrawPlayer(player[num76]);
                                    player[num76].position = vector3;
                                    player[num76].shadow = 0f;
                                }
                                this.DrawPlayer(player[num76]);
                            }
                        }
                    }
                    if (!gamePaused)
                    {
                        Main.essScale += essDir * 0.01f;
                        if (Main.essScale > 1f)
                        {
                            essDir = -1;
                            Main.essScale = 1f;
                        }
                        if (Main.essScale < 0.7)
                        {
                            essDir = 1;
                            Main.essScale = 0.7f;
                        }
                    }
                    for (int num77 = 0; num77 < 200; num77++)
                    {
                        if (item[num77].active && (item[num77].type > 0))
                        {
                            int num106 = ((int) (item[num77].position.X + (item[num77].width * 0.5))) / 0x10;
                            int offScreenTiles = Lighting.offScreenTiles;
                            int num108 = ((int) (item[num77].position.Y + (item[num77].height * 0.5))) / 0x10;
                            int num109 = Lighting.offScreenTiles;
                            Color newColor = Lighting.GetColor(((int) (item[num77].position.X + (item[num77].width * 0.5))) / 0x10, ((int) (item[num77].position.Y + (item[num77].height * 0.5))) / 0x10);
                            if (((!gamePaused && base.IsActive) && (((item[num77].type >= 0x47) && (item[num77].type <= 0x4a)) || ((item[num77].type == 0x3a) || (item[num77].type == 0x6d)))) && (newColor.R > 60))
                            {
                                float num78 = rand.Next(500) - ((Math.Abs(item[num77].velocity.X) + Math.Abs(item[num77].velocity.Y)) * 10f);
                                if (num78 < (newColor.R / 50))
                                {
                                    color16 = new Color();
                                    int index = Dust.NewDust(item[num77].position, item[num77].width, item[num77].height, 0x2b, 0f, 0f, 0xfe, color16, 0.5f);
                                    Dust dust1 = dust[index];
                                    dust1.velocity = (Vector2) (dust1.velocity * 0f);
                                }
                            }
                            float num80 = item[num77].velocity.X * 0.2f;
                            float essScale = 1f;
                            Color alpha = item[num77].GetAlpha(newColor);
                            if (((item[num77].type == 520) || (item[num77].type == 0x209)) || (((item[num77].type == 0x223) || (item[num77].type == 0x224)) || (item[num77].type == 0x225)))
                            {
                                essScale = Main.essScale;
                                alpha.R = (byte) (alpha.R * essScale);
                                alpha.G = (byte) (alpha.G * essScale);
                                alpha.B = (byte) (alpha.B * essScale);
                                alpha.A = (byte) (alpha.A * essScale);
                            }
                            else if ((item[num77].type == 0x3a) || (item[num77].type == 0xb8))
                            {
                                essScale = (Main.essScale * 0.25f) + 0.75f;
                                alpha.R = (byte) (alpha.R * essScale);
                                alpha.G = (byte) (alpha.G * essScale);
                                alpha.B = (byte) (alpha.B * essScale);
                                alpha.A = (byte) (alpha.A * essScale);
                            }
                            float num82 = item[num77].height - itemTexture[item[num77].type].Height;
                            float num83 = (item[num77].width / 2) - (itemTexture[item[num77].type].Width / 2);
                            this.spriteBatch.Draw(itemTexture[item[num77].type], new Vector2(((item[num77].position.X - screenPosition.X) + (itemTexture[item[num77].type].Width / 2)) + num83, (((item[num77].position.Y - screenPosition.Y) + (itemTexture[item[num77].type].Height / 2)) + num82) + 2f), new Rectangle(0, 0, itemTexture[item[num77].type].Width, itemTexture[item[num77].type].Height), alpha, num80, new Vector2((float) (itemTexture[item[num77].type].Width / 2), (float) (itemTexture[item[num77].type].Height / 2)), essScale, SpriteEffects.None, 0f);
                            color16 = new Color();
                            if (item[num77].color != color16)
                            {
                                this.spriteBatch.Draw(itemTexture[item[num77].type], new Vector2(((item[num77].position.X - screenPosition.X) + (itemTexture[item[num77].type].Width / 2)) + num83, (((item[num77].position.Y - screenPosition.Y) + (itemTexture[item[num77].type].Height / 2)) + num82) + 2f), new Rectangle(0, 0, itemTexture[item[num77].type].Width, itemTexture[item[num77].type].Height), item[num77].GetColor(newColor), num80, new Vector2((float) (itemTexture[item[num77].type].Width / 2), (float) (itemTexture[item[num77].type].Height / 2)), essScale, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    Rectangle rectangle3 = new Rectangle(((int) screenPosition.X) - 50, ((int) screenPosition.Y) - 50, screenWidth + 100, screenHeight + 100);
                    for (int num84 = 0; num84 < numDust; num84++)
                    {
                        if (dust[num84].active)
                        {
                            Rectangle rectangle4 = new Rectangle((int) dust[num84].position.X, (int) dust[num84].position.Y, 4, 4);
                            if (rectangle4.Intersects(rectangle3))
                            {
                                Color color12 = Lighting.GetColor(((int) (dust[num84].position.X + 4.0)) / 0x10, ((int) (dust[num84].position.Y + 4.0)) / 0x10);
                                if (((dust[num84].type == 6) || (dust[num84].type == 15)) || (dust[num84].noLight || ((dust[num84].type >= 0x3b) && (dust[num84].type <= 0x40))))
                                {
                                    color12 = Color.White;
                                }
                                color12 = dust[num84].GetAlpha(color12);
                                this.spriteBatch.Draw(dustTexture, dust[num84].position - screenPosition, new Rectangle?(dust[num84].frame), color12, dust[num84].rotation, new Vector2(4f, 4f), dust[num84].scale, SpriteEffects.None, 0f);
                                color16 = new Color();
                                if (dust[num84].color != color16)
                                {
                                    this.spriteBatch.Draw(dustTexture, dust[num84].position - screenPosition, new Rectangle?(dust[num84].frame), dust[num84].GetColor(color12), dust[num84].rotation, new Vector2(4f, 4f), dust[num84].scale, SpriteEffects.None, 0f);
                                }
                                if (color12 == Color.Black)
                                {
                                    dust[num84].active = false;
                                }
                            }
                            else
                            {
                                dust[num84].active = false;
                            }
                        }
                    }
                    if (drawToScreen)
                    {
                        this.DrawWater(false);
                        if (player[myPlayer].inventory[player[myPlayer].selectedItem].mech)
                        {
                            this.DrawWires();
                        }
                    }
                    else
                    {
                        this.spriteBatch.Draw(this.waterTarget, sceneWaterPos - screenPosition, Color.White);
                    }
                    if (!hideUI)
                    {
                        for (int num85 = 0; num85 < 0xff; num85++)
                        {
                            if ((player[num85].active && (player[num85].chatShowTime > 0)) && ((num85 != myPlayer) && !player[num85].dead))
                            {
                                Vector2 vector4;
                                Vector2 vector5 = fontMouseText.MeasureString(player[num85].chatText);
                                vector4.X = (player[num85].position.X + (player[num85].width / 2)) - (vector5.X / 2f);
                                vector4.Y = (player[num85].position.Y - vector5.Y) - 2f;
                                for (int num86 = 0; num86 < 5; num86++)
                                {
                                    int num87 = 0;
                                    int num88 = 0;
                                    Color black = Color.Black;
                                    switch (num86)
                                    {
                                        case 0:
                                            num87 = -2;
                                            break;

                                        case 1:
                                            num87 = 2;
                                            break;

                                        case 2:
                                            num88 = -2;
                                            break;

                                        case 3:
                                            num88 = 2;
                                            break;

                                        case 4:
                                            black = new Color((int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor);
                                            break;
                                    }
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontMouseText, player[num85].chatText, new Vector2((vector4.X + num87) - screenPosition.X, (vector4.Y + num88) - screenPosition.Y), black, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        for (int num89 = 0; num89 < 100; num89++)
                        {
                            if (combatText[num89].active)
                            {
                                int num90 = 0;
                                if (combatText[num89].crit)
                                {
                                    num90 = 1;
                                }
                                Vector2 vector6 = fontCombatText[num90].MeasureString(combatText[num89].text);
                                Vector2 origin = new Vector2(vector6.X * 0.5f, vector6.Y * 0.5f);
                                float single1 = combatText[num89].scale;
                                float num91 = combatText[num89].color.R;
                                float num92 = combatText[num89].color.G;
                                float num93 = combatText[num89].color.B;
                                float a = combatText[num89].color.A;
                                num91 *= (combatText[num89].scale * combatText[num89].alpha) * 0.3f;
                                num93 *= (combatText[num89].scale * combatText[num89].alpha) * 0.3f;
                                num92 *= (combatText[num89].scale * combatText[num89].alpha) * 0.3f;
                                a *= combatText[num89].scale * combatText[num89].alpha;
                                Color color14 = new Color((int) num91, (int) num92, (int) num93, (int) a);
                                for (int num95 = 0; num95 < 5; num95++)
                                {
                                    int num96 = 0;
                                    int num97 = 0;
                                    switch (num95)
                                    {
                                        case 0:
                                            num96--;
                                            break;

                                        case 1:
                                            num96++;
                                            break;

                                        case 2:
                                            num97--;
                                            break;

                                        case 3:
                                            num97++;
                                            break;

                                        default:
                                            num91 = (combatText[num89].color.R * combatText[num89].scale) * combatText[num89].alpha;
                                            num93 = (combatText[num89].color.B * combatText[num89].scale) * combatText[num89].alpha;
                                            num92 = (combatText[num89].color.G * combatText[num89].scale) * combatText[num89].alpha;
                                            a = (combatText[num89].color.A * combatText[num89].scale) * combatText[num89].alpha;
                                            color14 = new Color((int) num91, (int) num92, (int) num93, (int) a);
                                            break;
                                    }
                                    this.spriteBatch.DrawString(fontCombatText[num90], combatText[num89].text, new Vector2(((combatText[num89].position.X - screenPosition.X) + num96) + origin.X, ((combatText[num89].position.Y - screenPosition.Y) + num97) + origin.Y), color14, combatText[num89].rotation, origin, combatText[num89].scale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        for (int num98 = 0; num98 < 20; num98++)
                        {
                            if (itemText[num98].active)
                            {
                                string name = itemText[num98].name;
                                if (itemText[num98].stack > 1)
                                {
                                    name = string.Concat(new object[] { name, " (", itemText[num98].stack, ")" });
                                }
                                Vector2 vector8 = fontMouseText.MeasureString(name);
                                Vector2 vector9 = new Vector2(vector8.X * 0.5f, vector8.Y * 0.5f);
                                float single2 = itemText[num98].scale;
                                float num99 = itemText[num98].color.R;
                                float num100 = itemText[num98].color.G;
                                float num101 = itemText[num98].color.B;
                                float num102 = itemText[num98].color.A;
                                num99 *= (itemText[num98].scale * itemText[num98].alpha) * 0.3f;
                                num101 *= (itemText[num98].scale * itemText[num98].alpha) * 0.3f;
                                num100 *= (itemText[num98].scale * itemText[num98].alpha) * 0.3f;
                                num102 *= itemText[num98].scale * itemText[num98].alpha;
                                Color color15 = new Color((int) num99, (int) num100, (int) num101, (int) num102);
                                for (int num103 = 0; num103 < 5; num103++)
                                {
                                    int num104 = 0;
                                    int num105 = 0;
                                    switch (num103)
                                    {
                                        case 0:
                                            num104 -= 2;
                                            break;

                                        case 1:
                                            num104 += 2;
                                            break;

                                        case 2:
                                            num105 -= 2;
                                            break;

                                        case 3:
                                            num105 += 2;
                                            break;

                                        default:
                                            num99 = (itemText[num98].color.R * itemText[num98].scale) * itemText[num98].alpha;
                                            num101 = (itemText[num98].color.B * itemText[num98].scale) * itemText[num98].alpha;
                                            num100 = (itemText[num98].color.G * itemText[num98].scale) * itemText[num98].alpha;
                                            num102 = (itemText[num98].color.A * itemText[num98].scale) * itemText[num98].alpha;
                                            color15 = new Color((int) num99, (int) num100, (int) num101, (int) num102);
                                            break;
                                    }
                                    if (num103 < 4)
                                    {
                                        num102 = (itemText[num98].color.A * itemText[num98].scale) * itemText[num98].alpha;
                                        color15 = new Color(0, 0, 0, (int) num102);
                                    }
                                    this.spriteBatch.DrawString(fontMouseText, name, new Vector2(((itemText[num98].position.X - screenPosition.X) + num104) + vector9.X, ((itemText[num98].position.Y - screenPosition.Y) + num105) + vector9.Y), color15, itemText[num98].rotation, vector9, itemText[num98].scale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (((netMode == 1) && (Netplay.clientSock.statusText != "")) && (Netplay.clientSock.statusText != null))
                        {
                            string text = string.Concat(new object[] { Netplay.clientSock.statusText, ": ", (int) ((((float) Netplay.clientSock.statusCount) / ((float) Netplay.clientSock.statusMax)) * 100f), "%" });
                            this.spriteBatch.DrawString(fontMouseText, text, new Vector2((628f - (fontMouseText.MeasureString(text).X * 0.5f)) + (screenWidth - 800), 84f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, new Vector2(), (float) 1f, SpriteEffects.None, 0f);
                        }
                        this.DrawFPS();
                        this.DrawInterface();
                    }
                    else
                    {
                        maxQ = true;
                    }
                    this.spriteBatch.End();
                    if (mouseLeft)
                    {
                        mouseLeftRelease = false;
                    }
                    else
                    {
                        mouseLeftRelease = true;
                    }
                    if (mouseRight)
                    {
                        mouseRightRelease = false;
                    }
                    else
                    {
                        mouseRightRelease = true;
                    }
                    if (mouseState.RightButton != ButtonState.Pressed)
                    {
                        stackSplit = 0;
                    }
                    if (stackSplit > 0)
                    {
                        stackSplit--;
                    }
                    if (renderCount < 10)
                    {
                        drawTimer[renderCount] = stopwatch.ElapsedMilliseconds;
                        if (drawTimerMaxDelay[renderCount] > 0f)
                        {
                            drawTimerMaxDelay[renderCount]--;
                        }
                        else
                        {
                            drawTimerMax[renderCount] = 0f;
                        }
                        if (drawTimer[renderCount] > drawTimerMax[renderCount])
                        {
                            drawTimerMax[renderCount] = drawTimer[renderCount];
                            drawTimerMaxDelay[renderCount] = 100f;
                        }
                    }
                }
            }
        }

        protected void DrawBackground()
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            int num = (int) ((255f * (1f - gfxQuality)) + (140f * gfxQuality));
            int num2 = (int) ((200f * (1f - gfxQuality)) + (40f * gfxQuality));
            int num3 = 0x60;
            Vector2 vector = new Vector2((float) offScreenRange, (float) offScreenRange);
            if (drawToScreen)
            {
                vector = new Vector2();
            }
            float num4 = 0.9f;
            float num5 = num4;
            float num6 = num4;
            float num7 = num4;
            float num8 = 0f;
            if (holyTiles > evilTiles)
            {
                num8 = ((float) holyTiles) / 800f;
            }
            else if (evilTiles > holyTiles)
            {
                num8 = ((float) evilTiles) / 800f;
            }
            if (num8 > 1f)
            {
                num8 = 1f;
            }
            if (num8 < 0f)
            {
                num8 = 0f;
            }
            float num9 = (screenPosition.Y - ((float) (worldSurface * 16.0))) / 300f;
            if (num9 < 0f)
            {
                num9 = 0f;
            }
            else if (num9 > 1f)
            {
                num9 = 1f;
            }
            float num10 = (1f * (1f - num9)) + (num5 * num9);
            Lighting.brightness = (Lighting.defBrightness * (1f - num9)) + (1f * num9);
            float num11 = (((screenPosition.Y - (screenHeight / 2)) + 200f) - ((float) (rockLayer * 16.0))) / 300f;
            if (num11 < 0f)
            {
                num11 = 0f;
            }
            else if (num11 > 1f)
            {
                num11 = 1f;
            }
            if (evilTiles > 0)
            {
                num5 = (0.8f * num8) + (num5 * (1f - num8));
                num6 = (0.75f * num8) + (num6 * (1f - num8));
                num7 = (1.1f * num8) + (num7 * (1f - num8));
            }
            else if (holyTiles > 0)
            {
                num5 = (1f * num8) + (num5 * (1f - num8));
                num6 = (0.7f * num8) + (num6 * (1f - num8));
                num7 = (0.9f * num8) + (num7 * (1f - num8));
            }
            num5 = (1f * (num10 - num11)) + (num5 * num11);
            num6 = (1f * (num10 - num11)) + (num6 * num11);
            num7 = (1f * (num10 - num11)) + (num7 * num11);
            Lighting.defBrightness = (1.2f * (1f - num11)) + (1f * num11);
            this.bgParrallax = caveParrallax;
            this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num3)) - (num3 / 2);
            this.bgLoops = (screenWidth / num3) + 2;
            this.bgTop = (int) ((((((int) worldSurface) * 0x10) - backgroundHeight[1]) - screenPosition.Y) + 16f);
            for (int i = 0; i < this.bgLoops; i++)
            {
                for (int j = 0; j < 6; j++)
                {
                    float num14 = this.bgStart + screenPosition.X;
                    num14 = -((float) Math.IEEERemainder((double) num14, 16.0));
                    num14 = (float) Math.Round((double) num14);
                    int num15 = (int) num14;
                    if (num15 == -8)
                    {
                        num15 = 8;
                    }
                    float num16 = ((this.bgStart + (num3 * i)) + (j * 0x10)) + 8;
                    float bgTop = this.bgTop;
                    Color color = Lighting.GetColor((int) ((num16 + screenPosition.X) / 16f), (int) ((screenPosition.Y + bgTop) / 16f));
                    color.R = (byte) (color.R * num5);
                    color.G = (byte) (color.G * num6);
                    color.B = (byte) (color.B * num7);
                    this.spriteBatch.Draw(backgroundTexture[1], new Vector2((float) (((this.bgStart + (num3 * i)) + (0x10 * j)) + num15), (float) this.bgTop) + vector, new Rectangle(((0x10 * j) + num15) + 0x10, 0, 0x10, 0x10), color);
                }
            }
            double num18 = maxTilesY - 230;
            double num19 = ((int) ((num18 - worldSurface) / 6.0)) * 6;
            num18 = (worldSurface + num19) - 5.0;
            bool flag = false;
            bool flag2 = false;
            this.bgTop = (int) (((((int) worldSurface) * 0x10) - screenPosition.Y) + 16f);
            if ((worldSurface * 16.0) <= ((screenPosition.Y + screenHeight) + offScreenRange))
            {
                this.bgParrallax = caveParrallax;
                this.bgStart = (((int) -Math.IEEERemainder(96.0 + (screenPosition.X * this.bgParrallax), (double) num3)) - (num3 / 2)) - ((int) vector.X);
                this.bgLoops = ((screenWidth + (((int) vector.X) * 2)) / num3) + 2;
                if ((worldSurface * 16.0) < (screenPosition.Y - 16f))
                {
                    this.bgStartY = ((int) Math.IEEERemainder((double) this.bgTop, (double) backgroundHeight[2])) - backgroundHeight[2];
                    this.bgLoopsY = (((screenHeight - this.bgStartY) + (((int) vector.Y) * 2)) / backgroundHeight[2]) + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (((screenHeight - this.bgTop) + (((int) vector.Y) * 2)) / backgroundHeight[2]) + 1;
                }
                if ((rockLayer * 16.0) < (screenPosition.Y + 600f))
                {
                    this.bgLoopsY = (((int) (((rockLayer * 16.0) - screenPosition.Y) + 600.0)) - this.bgStartY) / backgroundHeight[2];
                    flag2 = true;
                }
                float num20 = this.bgStart + screenPosition.X;
                num20 = -((float) Math.IEEERemainder((double) num20, 16.0));
                num20 = (float) Math.Round((double) num20);
                int num21 = (int) num20;
                if (num21 == -8)
                {
                    num21 = 8;
                }
                for (int k = 0; k < this.bgLoops; k++)
                {
                    for (int m = 0; m < this.bgLoopsY; m++)
                    {
                        for (int n = 0; n < 6; n++)
                        {
                            for (int num25 = 0; num25 < 6; num25++)
                            {
                                float num26 = ((this.bgStartY + (m * 0x60)) + (num25 * 0x10)) + 8;
                                float num27 = ((this.bgStart + (num3 * k)) + (n * 0x10)) + 8;
                                int x = (int) ((num27 + screenPosition.X) / 16f);
                                int y = (int) ((num26 + screenPosition.Y) / 16f);
                                Color color2 = Lighting.GetColor(x, y);
                                if (tile[x, y] == null)
                                {
                                    tile[x, y] = new Tile();
                                }
                                if (((color2.R > 0) || (color2.G > 0)) || (color2.B > 0))
                                {
                                    if ((((color2.R > num) || (color2.G > (num * 1.1))) || (color2.B > (num * 1.2))) && (!tile[x, y].active && ((tile[x, y].wall == 0) || (tile[x, y].wall == 0x15))))
                                    {
                                        try
                                        {
                                            for (int num30 = 0; num30 < 9; num30++)
                                            {
                                                int num31 = 0;
                                                int num32 = 0;
                                                int width = 4;
                                                int height = 4;
                                                Color color3 = color2;
                                                Color color4 = color2;
                                                if ((num30 == 0) && !tile[x - 1, y - 1].active)
                                                {
                                                    color4 = Lighting.GetColor(x - 1, y - 1);
                                                }
                                                if (num30 == 1)
                                                {
                                                    width = 8;
                                                    num31 = 4;
                                                    if (!tile[x, y - 1].active)
                                                    {
                                                        color4 = Lighting.GetColor(x, y - 1);
                                                    }
                                                }
                                                if (num30 == 2)
                                                {
                                                    if (!tile[x + 1, y - 1].active)
                                                    {
                                                        color4 = Lighting.GetColor(x + 1, y - 1);
                                                    }
                                                    if (tile[x + 1, y - 1] == null)
                                                    {
                                                        tile[x + 1, y - 1] = new Tile();
                                                    }
                                                    num31 = 12;
                                                }
                                                if (num30 == 3)
                                                {
                                                    if (!tile[x - 1, y].active)
                                                    {
                                                        color4 = Lighting.GetColor(x - 1, y);
                                                    }
                                                    height = 8;
                                                    num32 = 4;
                                                }
                                                switch (num30)
                                                {
                                                    case 4:
                                                        width = 8;
                                                        height = 8;
                                                        num31 = 4;
                                                        num32 = 4;
                                                        break;

                                                    case 5:
                                                        num31 = 12;
                                                        num32 = 4;
                                                        height = 8;
                                                        if (!tile[x + 1, y].active)
                                                        {
                                                            color4 = Lighting.GetColor(x + 1, y);
                                                        }
                                                        break;
                                                }
                                                if (num30 == 6)
                                                {
                                                    if (!tile[x - 1, y + 1].active)
                                                    {
                                                        color4 = Lighting.GetColor(x - 1, y + 1);
                                                    }
                                                    num32 = 12;
                                                }
                                                if (num30 == 7)
                                                {
                                                    width = 8;
                                                    height = 4;
                                                    num31 = 4;
                                                    num32 = 12;
                                                    if (!tile[x, y + 1].active)
                                                    {
                                                        color4 = Lighting.GetColor(x, y + 1);
                                                    }
                                                }
                                                if (num30 == 8)
                                                {
                                                    if (!tile[x + 1, y + 1].active)
                                                    {
                                                        color4 = Lighting.GetColor(x + 1, y + 1);
                                                    }
                                                    num31 = 12;
                                                    num32 = 12;
                                                }
                                                color3.R = (byte) ((color2.R + color4.R) / 2);
                                                color3.G = (byte) ((color2.G + color4.G) / 2);
                                                color3.B = (byte) ((color2.B + color4.B) / 2);
                                                color3.R = (byte) (color3.R * num5);
                                                color3.G = (byte) (color3.G * num6);
                                                color3.B = (byte) (color3.B * num7);
                                                this.spriteBatch.Draw(backgroundTexture[2], new Vector2((float) ((((this.bgStart + (num3 * k)) + (0x10 * n)) + num31) + num21), (float) (((this.bgStartY + (backgroundHeight[2] * m)) + (0x10 * num25)) + num32)) + vector, new Rectangle((((0x10 * n) + num31) + num21) + 0x10, (0x10 * num25) + num32, width, height), color3);
                                            }
                                        }
                                        catch
                                        {
                                            color2.R = (byte) (color2.R * num5);
                                            color2.G = (byte) (color2.G * num6);
                                            color2.B = (byte) (color2.B * num7);
                                            this.spriteBatch.Draw(backgroundTexture[2], new Vector2((float) (((this.bgStart + (num3 * k)) + (0x10 * n)) + num21), (float) ((this.bgStartY + (backgroundHeight[2] * m)) + (0x10 * num25))) + vector, new Rectangle(((0x10 * n) + num21) + 0x10, 0x10 * num25, 0x10, 0x10), color2);
                                        }
                                    }
                                    else if (((color2.R > num2) || (color2.G > (num2 * 1.1))) || (color2.B > (num2 * 1.2)))
                                    {
                                        for (int num35 = 0; num35 < 4; num35++)
                                        {
                                            int num36 = 0;
                                            int num37 = 0;
                                            Color color5 = color2;
                                            Color color6 = color2;
                                            switch (num35)
                                            {
                                                case 0:
                                                    if (Lighting.Brighter(x, y - 1, x - 1, y))
                                                    {
                                                        color6 = Lighting.GetColor(x - 1, y);
                                                    }
                                                    else
                                                    {
                                                        color6 = Lighting.GetColor(x, y - 1);
                                                    }
                                                    break;

                                                case 1:
                                                    if (Lighting.Brighter(x, y - 1, x + 1, y))
                                                    {
                                                        color6 = Lighting.GetColor(x + 1, y);
                                                    }
                                                    else
                                                    {
                                                        color6 = Lighting.GetColor(x, y - 1);
                                                    }
                                                    num36 = 8;
                                                    break;

                                                case 2:
                                                    if (Lighting.Brighter(x, y + 1, x - 1, y))
                                                    {
                                                        color6 = Lighting.GetColor(x - 1, y);
                                                    }
                                                    else
                                                    {
                                                        color6 = Lighting.GetColor(x, y + 1);
                                                    }
                                                    num37 = 8;
                                                    break;

                                                case 3:
                                                    if (Lighting.Brighter(x, y + 1, x + 1, y))
                                                    {
                                                        color6 = Lighting.GetColor(x + 1, y);
                                                    }
                                                    else
                                                    {
                                                        color6 = Lighting.GetColor(x, y + 1);
                                                    }
                                                    num36 = 8;
                                                    num37 = 8;
                                                    break;
                                            }
                                            color5.R = (byte) ((color2.R + color6.R) / 2);
                                            color5.G = (byte) ((color2.G + color6.G) / 2);
                                            color5.B = (byte) ((color2.B + color6.B) / 2);
                                            color5.R = (byte) (color5.R * num5);
                                            color5.G = (byte) (color5.G * num6);
                                            color5.B = (byte) (color5.B * num7);
                                            this.spriteBatch.Draw(backgroundTexture[2], new Vector2((float) ((((this.bgStart + (num3 * k)) + (0x10 * n)) + num36) + num21), (float) (((this.bgStartY + (backgroundHeight[2] * m)) + (0x10 * num25)) + num37)) + vector, new Rectangle((((0x10 * n) + num36) + num21) + 0x10, (0x10 * num25) + num37, 8, 8), color5);
                                        }
                                    }
                                    else
                                    {
                                        color2.R = (byte) (color2.R * num5);
                                        color2.G = (byte) (color2.G * num6);
                                        color2.B = (byte) (color2.B * num7);
                                        this.spriteBatch.Draw(backgroundTexture[2], new Vector2((float) (((this.bgStart + (num3 * k)) + (0x10 * n)) + num21), (float) ((this.bgStartY + (backgroundHeight[2] * m)) + (0x10 * num25))) + vector, new Rectangle(((0x10 * n) + num21) + 0x10, 0x10 * num25, 0x10, 0x10), color2);
                                    }
                                }
                                else
                                {
                                    color2.R = (byte) (color2.R * num5);
                                    color2.G = (byte) (color2.G * num6);
                                    color2.B = (byte) (color2.B * num7);
                                    this.spriteBatch.Draw(backgroundTexture[2], new Vector2((float) (((this.bgStart + (num3 * k)) + (0x10 * n)) + num21), (float) ((this.bgStartY + (backgroundHeight[2] * m)) + (0x10 * num25))) + vector, new Rectangle(((0x10 * n) + num21) + 0x10, 0x10 * num25, 0x10, 0x10), color2);
                                }
                            }
                        }
                    }
                }
                if (flag2)
                {
                    this.bgParrallax = caveParrallax;
                    this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num3)) - (num3 / 2);
                    this.bgLoops = ((screenWidth + (((int) vector.X) * 2)) / num3) + 2;
                    this.bgTop = this.bgStartY + (this.bgLoopsY * backgroundHeight[2]);
                    if (this.bgTop > -32)
                    {
                        for (int num38 = 0; num38 < this.bgLoops; num38++)
                        {
                            for (int num39 = 0; num39 < 6; num39++)
                            {
                                float num40 = ((this.bgStart + (num3 * num38)) + (num39 * 0x10)) + 8;
                                float num41 = this.bgTop;
                                Color color7 = Lighting.GetColor((int) ((num40 + screenPosition.X) / 16f), (int) ((screenPosition.Y + num41) / 16f));
                                color7.R = (byte) (color7.R * num5);
                                color7.G = (byte) (color7.G * num6);
                                color7.B = (byte) (color7.B * num7);
                                this.spriteBatch.Draw(backgroundTexture[4], new Vector2((float) (((this.bgStart + (num3 * num38)) + (0x10 * num39)) + num21), (float) this.bgTop) + vector, new Rectangle(((0x10 * num39) + num21) + 0x10, 0, 0x10, 0x10), color7);
                            }
                        }
                    }
                }
            }
            this.bgTop = (int) (((((((int) rockLayer) * 0x10) - screenPosition.Y) + 16f) + 600f) - 8f);
            if ((rockLayer * 16.0) <= (screenPosition.Y + 600f))
            {
                this.bgParrallax = caveParrallax;
                this.bgStart = (((int) -Math.IEEERemainder(96.0 + (screenPosition.X * this.bgParrallax), (double) num3)) - (num3 / 2)) - ((int) vector.X);
                this.bgLoops = ((screenWidth + (((int) vector.X) * 2)) / num3) + 2;
                if (((rockLayer * 16.0) + screenHeight) < (screenPosition.Y - 16f))
                {
                    this.bgStartY = ((int) Math.IEEERemainder((double) this.bgTop, (double) backgroundHeight[3])) - backgroundHeight[3];
                    this.bgLoopsY = (((screenHeight - this.bgStartY) + (((int) vector.Y) * 2)) / backgroundHeight[2]) + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (((screenHeight - this.bgTop) + (((int) vector.Y) * 2)) / backgroundHeight[2]) + 1;
                }
                if ((num18 * 16.0) < (screenPosition.Y + 600f))
                {
                    this.bgLoopsY = (((int) (((num18 * 16.0) - screenPosition.Y) + 600.0)) - this.bgStartY) / backgroundHeight[2];
                    flag = true;
                }
                float num42 = this.bgStart + screenPosition.X;
                num42 = -((float) Math.IEEERemainder((double) num42, 16.0));
                num42 = (float) Math.Round((double) num42);
                int num43 = (int) num42;
                if (num43 == -8)
                {
                    num43 = 8;
                }
                for (int num44 = 0; num44 < this.bgLoops; num44++)
                {
                    for (int num45 = 0; num45 < this.bgLoopsY; num45++)
                    {
                        for (int num46 = 0; num46 < 6; num46++)
                        {
                            for (int num47 = 0; num47 < 6; num47++)
                            {
                                float num48 = ((this.bgStartY + (num45 * 0x60)) + (num47 * 0x10)) + 8;
                                float num49 = ((this.bgStart + (num3 * num44)) + (num46 * 0x10)) + 8;
                                int num50 = (int) ((num49 + screenPosition.X) / 16f);
                                int num51 = (int) ((num48 + screenPosition.Y) / 16f);
                                Color color8 = Lighting.GetColor(num50, num51);
                                if (tile[num50, num51] == null)
                                {
                                    tile[num50, num51] = new Tile();
                                }
                                bool flag3 = false;
                                if (caveParrallax != 0f)
                                {
                                    if (tile[num50 - 1, num51] == null)
                                    {
                                        tile[num50 - 1, num51] = new Tile();
                                    }
                                    if (tile[num50 + 1, num51] == null)
                                    {
                                        tile[num50 + 1, num51] = new Tile();
                                    }
                                    if ((((tile[num50, num51].wall == 0) || (tile[num50, num51].wall == 0x15)) || ((tile[num50 - 1, num51].wall == 0) || (tile[num50 - 1, num51].wall == 0x15))) || ((tile[num50 + 1, num51].wall == 0) || (tile[num50 + 1, num51].wall == 0x15)))
                                    {
                                        flag3 = true;
                                    }
                                }
                                else if ((tile[num50, num51].wall == 0) || (tile[num50, num51].wall == 0x15))
                                {
                                    flag3 = true;
                                }
                                if ((((flag3 || (color8.R == 0)) || ((color8.G == 0) || (color8.B == 0))) && (((color8.R > 0) || (color8.G > 0)) || (color8.B > 0))) && (((tile[num50, num51].wall == 0) || (tile[num50, num51].wall == 0x15)) || (caveParrallax != 0f)))
                                {
                                    if (((Lighting.lightMode < 2) && (color8.R < 230)) && ((color8.G < 230) && (color8.B < 230)))
                                    {
                                        if ((((color8.R > num) || (color8.G > (num * 1.1))) || (color8.B > (num * 1.2))) && !tile[num50, num51].active)
                                        {
                                            for (int num52 = 0; num52 < 9; num52++)
                                            {
                                                int num53 = 0;
                                                int num54 = 0;
                                                int num55 = 4;
                                                int num56 = 4;
                                                Color color9 = color8;
                                                Color color10 = color8;
                                                if ((num52 == 0) && !tile[num50 - 1, num51 - 1].active)
                                                {
                                                    color10 = Lighting.GetColor(num50 - 1, num51 - 1);
                                                }
                                                if (num52 == 1)
                                                {
                                                    num55 = 8;
                                                    num53 = 4;
                                                    if (!tile[num50, num51 - 1].active)
                                                    {
                                                        color10 = Lighting.GetColor(num50, num51 - 1);
                                                    }
                                                }
                                                if (num52 == 2)
                                                {
                                                    if (!tile[num50 + 1, num51 - 1].active)
                                                    {
                                                        color10 = Lighting.GetColor(num50 + 1, num51 - 1);
                                                    }
                                                    num53 = 12;
                                                }
                                                if (num52 == 3)
                                                {
                                                    if (!tile[num50 - 1, num51].active)
                                                    {
                                                        color10 = Lighting.GetColor(num50 - 1, num51);
                                                    }
                                                    num56 = 8;
                                                    num54 = 4;
                                                }
                                                switch (num52)
                                                {
                                                    case 4:
                                                        num55 = 8;
                                                        num56 = 8;
                                                        num53 = 4;
                                                        num54 = 4;
                                                        break;

                                                    case 5:
                                                        num53 = 12;
                                                        num54 = 4;
                                                        num56 = 8;
                                                        if (!tile[num50 + 1, num51].active)
                                                        {
                                                            color10 = Lighting.GetColor(num50 + 1, num51);
                                                        }
                                                        break;
                                                }
                                                if (num52 == 6)
                                                {
                                                    if (!tile[num50 - 1, num51 + 1].active)
                                                    {
                                                        color10 = Lighting.GetColor(num50 - 1, num51 + 1);
                                                    }
                                                    num54 = 12;
                                                }
                                                if (num52 == 7)
                                                {
                                                    num55 = 8;
                                                    num56 = 4;
                                                    num53 = 4;
                                                    num54 = 12;
                                                    if (!tile[num50, num51 + 1].active)
                                                    {
                                                        color10 = Lighting.GetColor(num50, num51 + 1);
                                                    }
                                                }
                                                if (num52 == 8)
                                                {
                                                    if (!tile[num50 + 1, num51 + 1].active)
                                                    {
                                                        color10 = Lighting.GetColor(num50 + 1, num51 + 1);
                                                    }
                                                    num53 = 12;
                                                    num54 = 12;
                                                }
                                                color9.R = (byte) ((color8.R + color10.R) / 2);
                                                color9.G = (byte) ((color8.G + color10.G) / 2);
                                                color9.B = (byte) ((color8.B + color10.B) / 2);
                                                color9.R = (byte) (color9.R * num5);
                                                color9.G = (byte) (color9.G * num6);
                                                color9.B = (byte) (color9.B * num7);
                                                this.spriteBatch.Draw(backgroundTexture[3], new Vector2((float) ((((this.bgStart + (num3 * num44)) + (0x10 * num46)) + num53) + num43), (float) (((this.bgStartY + (backgroundHeight[2] * num45)) + (0x10 * num47)) + num54)) + vector, new Rectangle((((0x10 * num46) + num53) + num43) + 0x10, (0x10 * num47) + num54, num55, num56), color9);
                                            }
                                        }
                                        else if (((color8.R > num2) || (color8.G > (num2 * 1.1))) || (color8.B > (num2 * 1.2)))
                                        {
                                            for (int num57 = 0; num57 < 4; num57++)
                                            {
                                                int num58 = 0;
                                                int num59 = 0;
                                                Color color11 = color8;
                                                Color color12 = color8;
                                                switch (num57)
                                                {
                                                    case 0:
                                                        if (Lighting.Brighter(num50, num51 - 1, num50 - 1, num51))
                                                        {
                                                            color12 = Lighting.GetColor(num50 - 1, num51);
                                                        }
                                                        else
                                                        {
                                                            color12 = Lighting.GetColor(num50, num51 - 1);
                                                        }
                                                        break;

                                                    case 1:
                                                        if (Lighting.Brighter(num50, num51 - 1, num50 + 1, num51))
                                                        {
                                                            color12 = Lighting.GetColor(num50 + 1, num51);
                                                        }
                                                        else
                                                        {
                                                            color12 = Lighting.GetColor(num50, num51 - 1);
                                                        }
                                                        num58 = 8;
                                                        break;

                                                    case 2:
                                                        if (Lighting.Brighter(num50, num51 + 1, num50 - 1, num51))
                                                        {
                                                            color12 = Lighting.GetColor(num50 - 1, num51);
                                                        }
                                                        else
                                                        {
                                                            color12 = Lighting.GetColor(num50, num51 + 1);
                                                        }
                                                        num59 = 8;
                                                        break;

                                                    case 3:
                                                        if (Lighting.Brighter(num50, num51 + 1, num50 + 1, num51))
                                                        {
                                                            color12 = Lighting.GetColor(num50 + 1, num51);
                                                        }
                                                        else
                                                        {
                                                            color12 = Lighting.GetColor(num50, num51 + 1);
                                                        }
                                                        num58 = 8;
                                                        num59 = 8;
                                                        break;
                                                }
                                                color11.R = (byte) ((color8.R + color12.R) / 2);
                                                color11.G = (byte) ((color8.G + color12.G) / 2);
                                                color11.B = (byte) ((color8.B + color12.B) / 2);
                                                color11.R = (byte) (color11.R * num5);
                                                color11.G = (byte) (color11.G * num6);
                                                color11.B = (byte) (color11.B * num7);
                                                this.spriteBatch.Draw(backgroundTexture[3], new Vector2((float) ((((this.bgStart + (num3 * num44)) + (0x10 * num46)) + num58) + num43), (float) (((this.bgStartY + (backgroundHeight[2] * num45)) + (0x10 * num47)) + num59)) + vector, new Rectangle((((0x10 * num46) + num58) + num43) + 0x10, (0x10 * num47) + num59, 8, 8), color11);
                                            }
                                        }
                                        else
                                        {
                                            color8.R = (byte) (color8.R * num5);
                                            color8.G = (byte) (color8.G * num6);
                                            color8.B = (byte) (color8.B * num7);
                                            this.spriteBatch.Draw(backgroundTexture[3], new Vector2((float) (((this.bgStart + (num3 * num44)) + (0x10 * num46)) + num43), (float) ((this.bgStartY + (backgroundHeight[2] * num45)) + (0x10 * num47))) + vector, new Rectangle(((0x10 * num46) + num43) + 0x10, 0x10 * num47, 0x10, 0x10), color8);
                                        }
                                    }
                                    else
                                    {
                                        color8.R = (byte) (color8.R * num5);
                                        color8.G = (byte) (color8.G * num6);
                                        color8.B = (byte) (color8.B * num7);
                                        this.spriteBatch.Draw(backgroundTexture[3], new Vector2((float) (((this.bgStart + (num3 * num44)) + (0x10 * num46)) + num43), (float) ((this.bgStartY + (backgroundHeight[2] * num45)) + (0x10 * num47))) + vector, new Rectangle(((0x10 * num46) + num43) + 0x10, 0x10 * num47, 0x10, 0x10), color8);
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag)
                {
                    this.bgParrallax = caveParrallax;
                    this.bgStart = ((int) -Math.IEEERemainder(screenPosition.X * this.bgParrallax, (double) num3)) - (num3 / 2);
                    this.bgLoops = (screenWidth / num3) + 2;
                    this.bgTop = this.bgStartY + (this.bgLoopsY * backgroundHeight[2]);
                    for (int num60 = 0; num60 < this.bgLoops; num60++)
                    {
                        for (int num61 = 0; num61 < 6; num61++)
                        {
                            float num62 = ((this.bgStart + (num3 * num60)) + (num61 * 0x10)) + 8;
                            float num63 = this.bgTop;
                            Color color13 = Lighting.GetColor((int) ((num62 + screenPosition.X) / 16f), (int) ((screenPosition.Y + num63) / 16f));
                            color13.R = (byte) (color13.R * num5);
                            color13.G = (byte) (color13.G * num6);
                            color13.B = (byte) (color13.B * num7);
                            this.spriteBatch.Draw(backgroundTexture[6], new Vector2((float) (((this.bgStart + (num3 * num60)) + (0x10 * num61)) + num43), (float) this.bgTop) + vector, new Rectangle(((0x10 * num61) + num43) + 0x10, magmaBGFrame * 0x10, 0x10, 0x10), color13);
                        }
                    }
                }
            }
            this.bgTop = ((int) ((((((int) num18) * 0x10) - screenPosition.Y) + 16f) + 600f)) - 8;
            if ((num18 * 16.0) <= (screenPosition.Y + 600f))
            {
                this.bgStart = (((int) -Math.IEEERemainder(96.0 + (screenPosition.X * this.bgParrallax), (double) num3)) - (num3 / 2)) - ((int) vector.X);
                this.bgLoops = ((screenWidth + (((int) vector.X) * 2)) / num3) + 2;
                if (((num18 * 16.0) + screenHeight) < (screenPosition.Y - 16f))
                {
                    this.bgStartY = ((int) Math.IEEERemainder((double) this.bgTop, (double) backgroundHeight[2])) - backgroundHeight[2];
                    this.bgLoopsY = (((screenHeight - this.bgStartY) + (((int) vector.Y) * 2)) / backgroundHeight[2]) + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (((screenHeight - this.bgTop) + (((int) vector.Y) * 2)) / backgroundHeight[2]) + 1;
                }
                num = (int) (num * 1.5);
                num2 = (int) (num2 * 1.5);
                float num64 = this.bgStart + screenPosition.X;
                num64 = -((float) Math.IEEERemainder((double) num64, 16.0));
                num64 = (float) Math.Round((double) num64);
                int num65 = (int) num64;
                if (num65 == -8)
                {
                    num65 = 8;
                }
                for (int num66 = 0; num66 < this.bgLoops; num66++)
                {
                    for (int num67 = 0; num67 < this.bgLoopsY; num67++)
                    {
                        for (int num68 = 0; num68 < 6; num68++)
                        {
                            for (int num69 = 0; num69 < 6; num69++)
                            {
                                float num70 = ((this.bgStartY + (num67 * 0x60)) + (num69 * 0x10)) + 8;
                                float num71 = ((this.bgStart + (num3 * num66)) + (num68 * 0x10)) + 8;
                                int num72 = (int) ((num71 + screenPosition.X) / 16f);
                                int num73 = (int) ((num70 + screenPosition.Y) / 16f);
                                Color color14 = Lighting.GetColor(num72, num73);
                                if (tile[num72, num73] == null)
                                {
                                    tile[num72, num73] = new Tile();
                                }
                                bool flag4 = false;
                                if (caveParrallax != 0f)
                                {
                                    if (tile[num72 - 1, num73] == null)
                                    {
                                        tile[num72 - 1, num73] = new Tile();
                                    }
                                    if (tile[num72 + 1, num73] == null)
                                    {
                                        tile[num72 + 1, num73] = new Tile();
                                    }
                                    if ((((tile[num72, num73].wall == 0) || (tile[num72, num73].wall == 0x15)) || ((tile[num72 - 1, num73].wall == 0) || (tile[num72 - 1, num73].wall == 0x15))) || ((tile[num72 + 1, num73].wall == 0) || (tile[num72 + 1, num73].wall == 0x15)))
                                    {
                                        flag4 = true;
                                    }
                                }
                                else if ((tile[num72, num73].wall == 0) || (tile[num72, num73].wall == 0x15))
                                {
                                    flag4 = true;
                                }
                                if ((((flag4 || (color14.R == 0)) || ((color14.G == 0) || (color14.B == 0))) && (((color14.R > 0) || (color14.G > 0)) || (color14.B > 0))) && (((tile[num72, num73].wall == 0) || (tile[num72, num73].wall == 0x15)) || (caveParrallax != 0f)))
                                {
                                    Vector2 vector2;
                                    if (((Lighting.lightMode < 2) && (color14.R < 230)) && ((color14.G < 230) && (color14.B < 230)))
                                    {
                                        if ((((color14.R > num) || (color14.G > (num * 1.1))) || (color14.B > (num * 1.2))) && !tile[num72, num73].active)
                                        {
                                            for (int num74 = 0; num74 < 9; num74++)
                                            {
                                                int num75 = 0;
                                                int num76 = 0;
                                                int num77 = 4;
                                                int num78 = 4;
                                                Color color15 = color14;
                                                Color color16 = color14;
                                                if ((num74 == 0) && !tile[num72 - 1, num73 - 1].active)
                                                {
                                                    color16 = Lighting.GetColor(num72 - 1, num73 - 1);
                                                }
                                                if (num74 == 1)
                                                {
                                                    num77 = 8;
                                                    num75 = 4;
                                                    if (!tile[num72, num73 - 1].active)
                                                    {
                                                        color16 = Lighting.GetColor(num72, num73 - 1);
                                                    }
                                                }
                                                if (num74 == 2)
                                                {
                                                    if (!tile[num72 + 1, num73 - 1].active)
                                                    {
                                                        color16 = Lighting.GetColor(num72 + 1, num73 - 1);
                                                    }
                                                    num75 = 12;
                                                }
                                                if (num74 == 3)
                                                {
                                                    if (!tile[num72 - 1, num73].active)
                                                    {
                                                        color16 = Lighting.GetColor(num72 - 1, num73);
                                                    }
                                                    num78 = 8;
                                                    num76 = 4;
                                                }
                                                switch (num74)
                                                {
                                                    case 4:
                                                        num77 = 8;
                                                        num78 = 8;
                                                        num75 = 4;
                                                        num76 = 4;
                                                        break;

                                                    case 5:
                                                        num75 = 12;
                                                        num76 = 4;
                                                        num78 = 8;
                                                        if (!tile[num72 + 1, num73].active)
                                                        {
                                                            color16 = Lighting.GetColor(num72 + 1, num73);
                                                        }
                                                        break;
                                                }
                                                if (num74 == 6)
                                                {
                                                    if (!tile[num72 - 1, num73 + 1].active)
                                                    {
                                                        color16 = Lighting.GetColor(num72 - 1, num73 + 1);
                                                    }
                                                    num76 = 12;
                                                }
                                                if (num74 == 7)
                                                {
                                                    num77 = 8;
                                                    num78 = 4;
                                                    num75 = 4;
                                                    num76 = 12;
                                                    if (!tile[num72, num73 + 1].active)
                                                    {
                                                        color16 = Lighting.GetColor(num72, num73 + 1);
                                                    }
                                                }
                                                if (num74 == 8)
                                                {
                                                    if (!tile[num72 + 1, num73 + 1].active)
                                                    {
                                                        color16 = Lighting.GetColor(num72 + 1, num73 + 1);
                                                    }
                                                    num75 = 12;
                                                    num76 = 12;
                                                }
                                                color15.R = (byte) ((color14.R + color16.R) / 2);
                                                color15.G = (byte) ((color14.G + color16.G) / 2);
                                                color15.B = (byte) ((color14.B + color16.B) / 2);
                                                color15.R = (byte) (color15.R * num5);
                                                color15.G = (byte) (color15.G * num6);
                                                color15.B = (byte) (color15.B * num7);
                                                vector2 = new Vector2();
                                                this.spriteBatch.Draw(backgroundTexture[5], new Vector2((float) ((((this.bgStart + (num3 * num66)) + (0x10 * num68)) + num75) + num65), (float) (((this.bgStartY + (backgroundHeight[2] * num67)) + (0x10 * num69)) + num76)) + vector, new Rectangle((((0x10 * num68) + num75) + num65) + 0x10, ((0x10 * num69) + (backgroundHeight[2] * magmaBGFrame)) + num76, num77, num78), color15, 0f, vector2, (float) 1f, SpriteEffects.None, 0f);
                                            }
                                        }
                                        else if (((color14.R > num2) || (color14.G > (num2 * 1.1))) || (color14.B > (num2 * 1.2)))
                                        {
                                            for (int num79 = 0; num79 < 4; num79++)
                                            {
                                                int num80 = 0;
                                                int num81 = 0;
                                                Color color17 = color14;
                                                Color color18 = color14;
                                                switch (num79)
                                                {
                                                    case 0:
                                                        if (Lighting.Brighter(num72, num73 - 1, num72 - 1, num73))
                                                        {
                                                            color18 = Lighting.GetColor(num72 - 1, num73);
                                                        }
                                                        else
                                                        {
                                                            color18 = Lighting.GetColor(num72, num73 - 1);
                                                        }
                                                        break;

                                                    case 1:
                                                        if (Lighting.Brighter(num72, num73 - 1, num72 + 1, num73))
                                                        {
                                                            color18 = Lighting.GetColor(num72 + 1, num73);
                                                        }
                                                        else
                                                        {
                                                            color18 = Lighting.GetColor(num72, num73 - 1);
                                                        }
                                                        num80 = 8;
                                                        break;

                                                    case 2:
                                                        if (Lighting.Brighter(num72, num73 + 1, num72 - 1, num73))
                                                        {
                                                            color18 = Lighting.GetColor(num72 - 1, num73);
                                                        }
                                                        else
                                                        {
                                                            color18 = Lighting.GetColor(num72, num73 + 1);
                                                        }
                                                        num81 = 8;
                                                        break;

                                                    case 3:
                                                        if (Lighting.Brighter(num72, num73 + 1, num72 + 1, num73))
                                                        {
                                                            color18 = Lighting.GetColor(num72 + 1, num73);
                                                        }
                                                        else
                                                        {
                                                            color18 = Lighting.GetColor(num72, num73 + 1);
                                                        }
                                                        num80 = 8;
                                                        num81 = 8;
                                                        break;
                                                }
                                                color17.R = (byte) ((color14.R + color18.R) / 2);
                                                color17.G = (byte) ((color14.G + color18.G) / 2);
                                                color17.B = (byte) ((color14.B + color18.B) / 2);
                                                color17.R = (byte) (color17.R * num5);
                                                color17.G = (byte) (color17.G * num6);
                                                color17.B = (byte) (color17.B * num7);
                                                vector2 = new Vector2();
                                                this.spriteBatch.Draw(backgroundTexture[5], new Vector2((float) ((((this.bgStart + (num3 * num66)) + (0x10 * num68)) + num80) + num65), (float) (((this.bgStartY + (backgroundHeight[2] * num67)) + (0x10 * num69)) + num81)) + vector, new Rectangle((((0x10 * num68) + num80) + num65) + 0x10, ((0x10 * num69) + (backgroundHeight[2] * magmaBGFrame)) + num81, 8, 8), color17, 0f, vector2, (float) 1f, SpriteEffects.None, 0f);
                                            }
                                        }
                                        else
                                        {
                                            color14.R = (byte) (color14.R * num5);
                                            color14.G = (byte) (color14.G * num6);
                                            color14.B = (byte) (color14.B * num7);
                                            vector2 = new Vector2();
                                            this.spriteBatch.Draw(backgroundTexture[5], new Vector2((float) (((this.bgStart + (num3 * num66)) + (0x10 * num68)) + num65), (float) ((this.bgStartY + (backgroundHeight[2] * num67)) + (0x10 * num69))) + vector, new Rectangle(((0x10 * num68) + num65) + 0x10, (0x10 * num69) + (backgroundHeight[2] * magmaBGFrame), 0x10, 0x10), color14, 0f, vector2, (float) 1f, SpriteEffects.None, 0f);
                                        }
                                    }
                                    else
                                    {
                                        color14.R = (byte) (color14.R * num5);
                                        color14.G = (byte) (color14.G * num6);
                                        color14.B = (byte) (color14.B * num7);
                                        vector2 = new Vector2();
                                        this.spriteBatch.Draw(backgroundTexture[5], new Vector2((float) (((this.bgStart + (num3 * num66)) + (0x10 * num68)) + num65), (float) ((this.bgStartY + (backgroundHeight[2] * num67)) + (0x10 * num69))) + vector, new Rectangle(((0x10 * num68) + num65) + 0x10, (0x10 * num69) + (backgroundHeight[2] * magmaBGFrame), 0x10, 0x10), color14, 0f, vector2, (float) 1f, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Lighting.brightness = Lighting.defBrightness;
            renderTimer[3] = stopwatch.ElapsedMilliseconds;
        }

        protected void DrawBlack()
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            Vector2 vector = new Vector2((float) offScreenRange, (float) offScreenRange);
            if (drawToScreen)
            {
                vector = new Vector2();
            }
            int num = ((tileColor.R + tileColor.G) + tileColor.B) / 3;
            float num2 = ((float) (num * 0.4)) / 255f;
            if (Lighting.lightMode >= 2)
            {
                num2 = ((float) (tileColor.R - 0x37)) / 255f;
            }
            int num3 = (int) (((screenPosition.X - vector.X) / 16f) - 1f);
            int num4 = ((int) (((screenPosition.X + screenWidth) + vector.X) / 16f)) + 2;
            int num5 = (int) (((screenPosition.Y - vector.Y) / 16f) - 1f);
            int num6 = ((int) (((screenPosition.Y + screenHeight) + vector.Y) / 16f)) + 5;
            int num7 = offScreenRange / 0x10;
            int num8 = offScreenRange / 0x10;
            if ((num3 - num7) < 0)
            {
                num3 = num7;
            }
            if ((num4 + num7) > maxTilesX)
            {
                num4 = maxTilesX - num7;
            }
            if ((num5 - num8) < 0)
            {
                num5 = num8;
            }
            if ((num6 + num8) > maxTilesY)
            {
                num6 = maxTilesY - num8;
            }
            for (int i = num5 - num8; i < (num6 + num8); i++)
            {
                if (i <= worldSurface)
                {
                    for (int j = num3 - num7; j < (num4 + num7); j++)
                    {
                        if (tile[j, i] == null)
                        {
                            tile[j, i] = new Tile();
                        }
                        if ((Lighting.Brightness(j, i) < num2) && (((tile[j, i].liquid < 250) || WorldGen.SolidTile(j, i)) || ((tile[j, i].liquid > 250) && (Lighting.Brightness(j, i) == 0f))))
                        {
                            int num11 = j;
                            j++;
                            while (((tile[j, i] != null) && (Lighting.Brightness(j, i) < num2)) && (((tile[j, i].liquid < 250) || WorldGen.SolidTile(j, i)) || ((tile[j, i].liquid > 250) && (Lighting.Brightness(j, i) == 0f))))
                            {
                                j++;
                                if (j >= (num4 + num7))
                                {
                                    break;
                                }
                            }
                            j--;
                            int width = ((j - num11) + 1) * 0x10;
                            Vector2 origin = new Vector2();
                            this.spriteBatch.Draw(blackTileTexture, new Vector2((float) ((num11 * 0x10) - ((int) screenPosition.X)), (float) ((i * 0x10) - ((int) screenPosition.Y))) + vector, new Rectangle(0, 0, width, 0x10), Color.Black, 0f, origin, (float) 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
            }
            renderTimer[5] = stopwatch.ElapsedMilliseconds;
        }

        protected void DrawChat()
        {
            if ((player[myPlayer].talkNPC < 0) && (player[myPlayer].sign == -1))
            {
                npcChatText = "";
            }
            else
            {
                Color color = new Color(200, 200, 200, 200);
                int r = ((mouseTextColor * 2) + 0xff) / 3;
                Color color2 = new Color(r, r, r, r);
                int num2 = 10;
                int index = 0;
                string[] strArray = new string[num2];
                int startIndex = 0;
                int num5 = 0;
                if (npcChatText == null)
                {
                    npcChatText = "";
                }
                for (int i = 0; i < npcChatText.Length; i++)
                {
                    if (Encoding.ASCII.GetBytes(npcChatText.Substring(i, 1))[0] == 10)
                    {
                        strArray[index] = npcChatText.Substring(startIndex, i - startIndex);
                        index++;
                        startIndex = i + 1;
                        num5 = i + 1;
                    }
                    else if ((npcChatText.Substring(i, 1) == " ") || (i == (npcChatText.Length - 1)))
                    {
                        if (fontMouseText.MeasureString(npcChatText.Substring(startIndex, i - startIndex)).X > 470f)
                        {
                            strArray[index] = npcChatText.Substring(startIndex, num5 - startIndex);
                            index++;
                            startIndex = num5 + 1;
                        }
                        num5 = i;
                    }
                    if (index == 10)
                    {
                        npcChatText = npcChatText.Substring(0, i - 1);
                        startIndex = i - 1;
                        index = 9;
                        break;
                    }
                }
                if (index < 10)
                {
                    strArray[index] = npcChatText.Substring(startIndex, npcChatText.Length - startIndex);
                }
                if (editSign)
                {
                    this.textBlinkerCount++;
                    if (this.textBlinkerCount >= 20)
                    {
                        if (this.textBlinkerState == 0)
                        {
                            this.textBlinkerState = 1;
                        }
                        else
                        {
                            this.textBlinkerState = 0;
                        }
                        this.textBlinkerCount = 0;
                    }
                    if (this.textBlinkerState == 1)
                    {
                        string[] strArray2;
                        IntPtr ptr;
                        (strArray2 = strArray)[(int) (ptr = (IntPtr) index)] = strArray2[(int) ptr] + "|";
                    }
                }
                index++;
                this.spriteBatch.Draw(chatBackTexture, new Vector2((float) ((screenWidth / 2) - (chatBackTexture.Width / 2)), 100f), new Rectangle(0, 0, chatBackTexture.Width, (index + 1) * 30), color, 0f, new Vector2(), (float) 1f, SpriteEffects.None, 0f);
                this.spriteBatch.Draw(chatBackTexture, new Vector2((float) ((screenWidth / 2) - (chatBackTexture.Width / 2)), (float) (100 + ((index + 1) * 30))), new Rectangle(0, chatBackTexture.Height - 30, chatBackTexture.Width, 30), color, 0f, new Vector2(), (float) 1f, SpriteEffects.None, 0f);
                for (int j = 0; j < index; j++)
                {
                    for (int num8 = 0; num8 < 5; num8++)
                    {
                        Color black = Color.Black;
                        int num9 = 170 + ((screenWidth - 800) / 2);
                        int num10 = 120 + (j * 30);
                        switch (num8)
                        {
                            case 0:
                                num9 -= 2;
                                break;

                            case 1:
                                num9 += 2;
                                break;

                            case 2:
                                num10 -= 2;
                                break;

                            case 3:
                                num10 += 2;
                                break;

                            case 4:
                                black = color2;
                                break;
                        }
                        Vector2 origin = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, strArray[j], new Vector2((float) num9, (float) num10), black, 0f, origin, (float) 1f, SpriteEffects.None, 0f);
                    }
                }
                r = mouseTextColor;
                color2 = new Color(r, (int) (((double) r) / 1.1), r / 2, r);
                string text = "";
                string str2 = "";
                int price = player[myPlayer].statLifeMax - player[myPlayer].statLife;
                for (int k = 0; k < 10; k++)
                {
                    int num13 = player[myPlayer].buffType[k];
                    if ((debuff[num13] && (player[myPlayer].buffTime[k] > 0)) && ((num13 != 0x1c) && (num13 != 0x22)))
                    {
                        price += 0x3e8;
                    }
                }
                if (player[myPlayer].sign > -1)
                {
                    if (editSign)
                    {
                        text = "Save";
                    }
                    else
                    {
                        text = "Edit";
                    }
                }
                else if (npc[player[myPlayer].talkNPC].type == 20)
                {
                    text = "Shop";
                    str2 = "Status";
                }
                else if ((((npc[player[myPlayer].talkNPC].type == 0x11) || (npc[player[myPlayer].talkNPC].type == 0x13)) || ((npc[player[myPlayer].talkNPC].type == 0x26) || (npc[player[myPlayer].talkNPC].type == 0x36))) || (((npc[player[myPlayer].talkNPC].type == 0x6b) || (npc[player[myPlayer].talkNPC].type == 0x6c)) || (npc[player[myPlayer].talkNPC].type == 0x7c)))
                {
                    text = "Shop";
                    if (npc[player[myPlayer].talkNPC].type == 0x6b)
                    {
                        str2 = "Reforge";
                    }
                }
                else if (npc[player[myPlayer].talkNPC].type == 0x25)
                {
                    if (!dayTime)
                    {
                        text = "Curse";
                    }
                }
                else if (npc[player[myPlayer].talkNPC].type == 0x16)
                {
                    text = "Help";
                    str2 = "Crafting";
                }
                else if (npc[player[myPlayer].talkNPC].type == 0x12)
                {
                    string str3 = "";
                    int num14 = 0;
                    int num15 = 0;
                    int num16 = 0;
                    int num17 = 0;
                    int num18 = price;
                    if (num18 > 0)
                    {
                        num18 = (int) (num18 * 0.75);
                        if (num18 < 1)
                        {
                            num18 = 1;
                        }
                    }
                    if (num18 < 0)
                    {
                        num18 = 0;
                    }
                    price = num18;
                    if (num18 >= 0xf4240)
                    {
                        num14 = num18 / 0xf4240;
                        num18 -= num14 * 0xf4240;
                    }
                    if (num18 >= 0x2710)
                    {
                        num15 = num18 / 0x2710;
                        num18 -= num15 * 0x2710;
                    }
                    if (num18 >= 100)
                    {
                        num16 = num18 / 100;
                        num18 -= num16 * 100;
                    }
                    if (num18 >= 1)
                    {
                        num17 = num18;
                    }
                    if (num14 > 0)
                    {
                        str3 = str3 + num14 + " platinum ";
                    }
                    if (num15 > 0)
                    {
                        str3 = str3 + num15 + " gold ";
                    }
                    if (num16 > 0)
                    {
                        str3 = str3 + num16 + " silver ";
                    }
                    if (num17 > 0)
                    {
                        str3 = str3 + num17 + " copper ";
                    }
                    float num19 = ((float) mouseTextColor) / 255f;
                    if (num14 > 0)
                    {
                        color2 = new Color((int) ((byte) (220f * num19)), (int) ((byte) (220f * num19)), (int) ((byte) (198f * num19)), (int) mouseTextColor);
                    }
                    else if (num15 > 0)
                    {
                        color2 = new Color((int) ((byte) (224f * num19)), (int) ((byte) (201f * num19)), (int) ((byte) (92f * num19)), (int) mouseTextColor);
                    }
                    else if (num16 > 0)
                    {
                        color2 = new Color((int) ((byte) (181f * num19)), (int) ((byte) (192f * num19)), (int) ((byte) (193f * num19)), (int) mouseTextColor);
                    }
                    else if (num17 > 0)
                    {
                        color2 = new Color((int) ((byte) (246f * num19)), (int) ((byte) (138f * num19)), (int) ((byte) (96f * num19)), (int) mouseTextColor);
                    }
                    text = "Heal (" + str3 + ")";
                    if (num18 == 0)
                    {
                        text = "Heal";
                    }
                }
                int num20 = 180 + ((screenWidth - 800) / 2);
                int num21 = 130 + (index * 30);
                float scale = 0.9f;
                if (((mouseX > num20) && (mouseX < (num20 + fontMouseText.MeasureString(text).X))) && ((mouseY > num21) && (mouseY < (num21 + fontMouseText.MeasureString(text).Y))))
                {
                    player[myPlayer].mouseInterface = true;
                    scale = 1.1f;
                    if (!npcChatFocus2)
                    {
                        PlaySound(12, -1, -1, 1);
                    }
                    npcChatFocus2 = true;
                    player[myPlayer].releaseUseItem = false;
                }
                else
                {
                    if (npcChatFocus2)
                    {
                        PlaySound(12, -1, -1, 1);
                    }
                    npcChatFocus2 = false;
                }
                for (int m = 0; m < 5; m++)
                {
                    int num24 = num20;
                    int num25 = num21;
                    Color color4 = Color.Black;
                    switch (m)
                    {
                        case 0:
                            num24 -= 2;
                            break;

                        case 1:
                            num24 += 2;
                            break;

                        case 2:
                            num25 -= 2;
                            break;

                        case 3:
                            num25 += 2;
                            break;

                        case 4:
                            color4 = color2;
                            break;
                    }
                    Vector2 vector = (Vector2) (fontMouseText.MeasureString(text) * 0.5f);
                    this.spriteBatch.DrawString(fontMouseText, text, new Vector2(num24 + vector.X, num25 + vector.Y), color4, 0f, vector, scale, SpriteEffects.None, 0f);
                }
                color2 = new Color(r, (int) (((double) r) / 1.1), r / 2, r);
                num20 = (num20 + ((int) fontMouseText.MeasureString(text).X)) + 20;
                num21 = 130 + (index * 30);
                scale = 0.9f;
                if (((mouseX > num20) && (mouseX < (num20 + fontMouseText.MeasureString("Close").X))) && ((mouseY > num21) && (mouseY < (num21 + fontMouseText.MeasureString("Close").Y))))
                {
                    scale = 1.1f;
                    if (!npcChatFocus1)
                    {
                        PlaySound(12, -1, -1, 1);
                    }
                    npcChatFocus1 = true;
                    player[myPlayer].releaseUseItem = false;
                    player[myPlayer].controlUseItem = false;
                }
                else
                {
                    if (npcChatFocus1)
                    {
                        PlaySound(12, -1, -1, 1);
                    }
                    npcChatFocus1 = false;
                }
                for (int n = 0; n < 5; n++)
                {
                    int num27 = num20;
                    int num28 = num21;
                    Color color5 = Color.Black;
                    switch (n)
                    {
                        case 0:
                            num27 -= 2;
                            break;

                        case 1:
                            num27 += 2;
                            break;

                        case 2:
                            num28 -= 2;
                            break;

                        case 3:
                            num28 += 2;
                            break;

                        case 4:
                            color5 = color2;
                            break;
                    }
                    Vector2 vector2 = (Vector2) (fontMouseText.MeasureString("Close") * 0.5f);
                    this.spriteBatch.DrawString(fontMouseText, "Close", new Vector2(num27 + vector2.X, num28 + vector2.Y), color5, 0f, vector2, scale, SpriteEffects.None, 0f);
                }
                if (str2 != "")
                {
                    num20 = 0x128 + ((screenWidth - 800) / 2);
                    num21 = 130 + (index * 30);
                    scale = 0.9f;
                    if (((mouseX > num20) && (mouseX < (num20 + fontMouseText.MeasureString(str2).X))) && ((mouseY > num21) && (mouseY < (num21 + fontMouseText.MeasureString(str2).Y))))
                    {
                        player[myPlayer].mouseInterface = true;
                        scale = 1.1f;
                        if (!npcChatFocus3)
                        {
                            PlaySound(12, -1, -1, 1);
                        }
                        npcChatFocus3 = true;
                        player[myPlayer].releaseUseItem = false;
                    }
                    else
                    {
                        if (npcChatFocus3)
                        {
                            PlaySound(12, -1, -1, 1);
                        }
                        npcChatFocus3 = false;
                    }
                    for (int num29 = 0; num29 < 5; num29++)
                    {
                        int num30 = num20;
                        int num31 = num21;
                        Color color6 = Color.Black;
                        switch (num29)
                        {
                            case 0:
                                num30 -= 2;
                                break;

                            case 1:
                                num30 += 2;
                                break;

                            case 2:
                                num31 -= 2;
                                break;

                            case 3:
                                num31 += 2;
                                break;

                            case 4:
                                color6 = color2;
                                break;
                        }
                        Vector2 vector3 = (Vector2) (fontMouseText.MeasureString(text) * 0.5f);
                        this.spriteBatch.DrawString(fontMouseText, str2, new Vector2(num30 + vector3.X, num31 + vector3.Y), color6, 0f, vector3, scale, SpriteEffects.None, 0f);
                    }
                }
                if (mouseLeft && mouseLeftRelease)
                {
                    mouseLeftRelease = false;
                    player[myPlayer].releaseUseItem = false;
                    player[myPlayer].mouseInterface = true;
                    if (npcChatFocus1)
                    {
                        player[myPlayer].talkNPC = -1;
                        player[myPlayer].sign = -1;
                        editSign = false;
                        npcChatText = "";
                        PlaySound(11, -1, -1, 1);
                    }
                    else if (npcChatFocus2)
                    {
                        if (player[myPlayer].sign == -1)
                        {
                            if (npc[player[myPlayer].talkNPC].type == 0x11)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 1;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x13)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 2;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x7c)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 8;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x25)
                            {
                                if (netMode == 0)
                                {
                                    NPC.SpawnSkeletron();
                                }
                                else
                                {
                                    NetMessage.SendData(0x33, -1, -1, "", myPlayer, 1f, 0f, 0f, 0);
                                }
                                npcChatText = "";
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 20)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 3;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x26)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 4;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x36)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 5;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x6b)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 6;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x6c)
                            {
                                playerInventory = true;
                                npcChatText = "";
                                npcShop = 7;
                                this.shop[npcShop].SetupShop(npcShop);
                                PlaySound(12, -1, -1, 1);
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x16)
                            {
                                PlaySound(12, -1, -1, 1);
                                HelpText();
                            }
                            else if (npc[player[myPlayer].talkNPC].type == 0x12)
                            {
                                PlaySound(12, -1, -1, 1);
                                if (price <= 0)
                                {
                                    switch (rand.Next(3))
                                    {
                                        case 0:
                                            npcChatText = "I don't give happy endings.";
                                            break;

                                        case 1:
                                            npcChatText = "I can't do anymore for you without plastic surgery.";
                                            break;

                                        case 2:
                                            npcChatText = "Quit wasting my time.";
                                            return;
                                    }
                                }
                                else if (player[myPlayer].BuyItem(price))
                                {
                                    PlaySound(2, -1, -1, 4);
                                    player[myPlayer].HealEffect(player[myPlayer].statLifeMax - player[myPlayer].statLife);
                                    if (player[myPlayer].statLife < (player[myPlayer].statLifeMax * 0.25))
                                    {
                                        npcChatText = "I managed to sew your face back on. Be more careful next time.";
                                    }
                                    else if (player[myPlayer].statLife < (player[myPlayer].statLifeMax * 0.5))
                                    {
                                        npcChatText = "That's probably going to leave a scar.";
                                    }
                                    else if (player[myPlayer].statLife < (player[myPlayer].statLifeMax * 0.75))
                                    {
                                        npcChatText = "All better. I don't want to see you jumping off anymore cliffs.";
                                    }
                                    else
                                    {
                                        npcChatText = "That didn't hurt too bad, now did it?";
                                    }
                                    player[myPlayer].statLife = player[myPlayer].statLifeMax;
                                    for (int num33 = 0; num33 < 10; num33++)
                                    {
                                        int num34 = player[myPlayer].buffType[num33];
                                        if ((debuff[num34] && (player[myPlayer].buffTime[num33] > 0)) && ((num34 != 0x1c) && (num34 != 0x22)))
                                        {
                                            player[myPlayer].DelBuff(num33);
                                        }
                                    }
                                }
                                else
                                {
                                    switch (rand.Next(3))
                                    {
                                        case 0:
                                            npcChatText = "I'm sorry, but you can't afford me.";
                                            break;

                                        case 1:
                                            npcChatText = "I'm gonna need more gold than that.";
                                            break;

                                        case 2:
                                            npcChatText = "I don't work for free you know.";
                                            return;
                                    }
                                }
                            }
                        }
                        else if (!editSign)
                        {
                            PlaySound(12, -1, -1, 1);
                            editSign = true;
                        }
                        else
                        {
                            PlaySound(12, -1, -1, 1);
                            int sign = player[myPlayer].sign;
                            Sign.TextSign(sign, npcChatText);
                            editSign = false;
                            if (netMode == 1)
                            {
                                NetMessage.SendData(0x2f, -1, -1, "", sign, 0f, 0f, 0f, 0);
                            }
                        }
                    }
                    else if (npcChatFocus3 && (player[myPlayer].talkNPC >= 0))
                    {
                        if (npc[player[myPlayer].talkNPC].type == 20)
                        {
                            PlaySound(12, -1, -1, 1);
                            string str4 = "";
                            if (WorldGen.tGood == 0)
                            {
                                str4 = string.Concat(new object[] { worldName, " is ", WorldGen.tEvil, "% corrupt." });
                            }
                            else if (WorldGen.tEvil == 0)
                            {
                                str4 = string.Concat(new object[] { worldName, " is ", WorldGen.tGood, "% hallow." });
                            }
                            else
                            {
                                str4 = string.Concat(new object[] { worldName, " is ", WorldGen.tGood, "% hallow, and ", WorldGen.tEvil, "% corrupt." });
                            }
                            if (WorldGen.tGood > WorldGen.tEvil)
                            {
                                str4 = str4 + " Keep up the good work!";
                            }
                            else if ((WorldGen.tEvil > WorldGen.tGood) && (WorldGen.tEvil > 20))
                            {
                                str4 = str4 + " Things are grim indeed.";
                            }
                            else
                            {
                                str4 = str4 + " You should try harder.";
                            }
                            npcChatText = str4;
                        }
                        else if (npc[player[myPlayer].talkNPC].type == 0x16)
                        {
                            playerInventory = true;
                            npcChatText = "";
                            PlaySound(12, -1, -1, 1);
                            craftGuide = true;
                        }
                        else if (npc[player[myPlayer].talkNPC].type == 0x6b)
                        {
                            playerInventory = true;
                            npcChatText = "";
                            PlaySound(12, -1, -1, 1);
                            reforge = true;
                        }
                    }
                }
            }
        }

        protected void DrawFPS()
        {
            object obj2 = frameRate;
            string str = string.Concat(new object[] { obj2, " (", (int) (gfxQuality * 100f), "%)" });
            int num = 4;
            if (!gameMenu)
            {
                num = screenHeight - 0x18;
            }
            this.spriteBatch.DrawString(fontMouseText, "ZidoMod" + (!chatMode && ZidoMod.showFps ? " (By Zidonuke)  FPS: " + str + " " + debugWords : ""), new Vector2(4f, (float)num), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, new Vector2(), (float)0.9f, SpriteEffects.None, 0f);
        }

        protected void DrawGhost(Player drawPlayer)
        {
            SpriteEffects none = SpriteEffects.None;
            if (drawPlayer.direction == 1)
            {
                none = SpriteEffects.None;
            }
            else
            {
                none = SpriteEffects.FlipHorizontally;
            }
            Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, ((int) (drawPlayer.position.Y + (drawPlayer.height * 0.5))) / 0x10, new Color((mouseTextColor / 2) + 100, (mouseTextColor / 2) + 100, (mouseTextColor / 2) + 100, (mouseTextColor / 2) + 100)));
            Rectangle rectangle = new Rectangle(0, (ghostTexture.Height / 4) * drawPlayer.ghostFrame, ghostTexture.Width, ghostTexture.Height / 4);
            Vector2 origin = new Vector2(rectangle.Width * 0.5f, rectangle.Height * 0.5f);
            this.spriteBatch.Draw(ghostTexture, new Vector2((float) (((int) (drawPlayer.position.X - screenPosition.X)) + (rectangle.Width / 2)), (float) (((int) (drawPlayer.position.Y - screenPosition.Y)) + (rectangle.Height / 2))), new Rectangle?(rectangle), immuneAlpha, 0f, origin, (float) 1f, none, 0f);
        }

        protected void DrawGore()
        {
            for (int i = 0; i < 200; i++)
            {
                if (gore[i].active && (gore[i].type > 0))
                {
                    Color alpha = gore[i].GetAlpha(Lighting.GetColor(((int) (gore[i].position.X + (goreTexture[gore[i].type].Width * 0.5))) / 0x10, (int) ((gore[i].position.Y + (goreTexture[gore[i].type].Height * 0.5)) / 16.0)));
                    this.spriteBatch.Draw(goreTexture[gore[i].type], new Vector2((gore[i].position.X - screenPosition.X) + (goreTexture[gore[i].type].Width / 2), (gore[i].position.Y - screenPosition.Y) + (goreTexture[gore[i].type].Height / 2)), new Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height), alpha, gore[i].rotation, new Vector2((float) (goreTexture[gore[i].type].Width / 2), (float) (goreTexture[gore[i].type].Height / 2)), gore[i].scale, SpriteEffects.None, 0f);
                }
            }
        }

        protected void DrawInterface()
        {
            if (this.showNPCs)
            {
                this.DrawNPCHouse();
            }
            if ((player[myPlayer].selectedItem == 0x30) && (player[myPlayer].itemAnimation > 0))
            {
                mouseLeftRelease = false;
            }
            mouseHC = false;
            if (ZidoMod.flashlight)
            {
                Lighting.addLight((int)(((float)Main.mouseX + Main.screenPosition.X) / 16f), (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f), ZidoMod.flashlightcolor.R, ZidoMod.flashlightcolor.G, ZidoMod.flashlightcolor.B);//1f, 1f, 1f); BlueFly
            }
            if (hideUI)
            {
                maxQ = true;
            }
            else
            {
                Vector2 vector10;
                object obj2;
                Color color34;
                if (player[myPlayer].rulerAcc)
                {
                    int num = (((int) (screenPosition.X / 16f)) * 0x10) - ((int) screenPosition.X);
                    int num2 = (((int) (screenPosition.Y / 16f)) * 0x10) - ((int) screenPosition.Y);
                    int num3 = screenWidth / gridTexture.Width;
                    int num4 = Main.screenHeight / gridTexture.Height;
                    for (int n = 0; n <= (num3 + 1); n++)
                    {
                        for (int num6 = 0; num6 <= (num4 + 1); num6++)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(gridTexture, new Vector2((float) ((n * gridTexture.Width) + num), (float) ((num6 * gridTexture.Height) + num2)), new Rectangle(0, 0, gridTexture.Width, gridTexture.Height), new Color(100, 100, 100, 15), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
                if (netDiag)
                {
                    for (int num7 = 0; num7 < 4; num7++)
                    {
                        string str = "";
                        int num8 = 20;
                        int num9 = 220;
                        switch (num7)
                        {
                            case 0:
                                str = "RX Msgs: " + string.Format("{0:0,0}", rxMsg);
                                num9 += num7 * 20;
                                break;

                            case 1:
                                str = "RX Bytes: " + string.Format("{0:0,0}", rxData);
                                num9 += num7 * 20;
                                break;

                            case 2:
                                str = "TX Msgs: " + string.Format("{0:0,0}", txMsg);
                                num9 += num7 * 20;
                                break;

                            case 3:
                                str = "TX Bytes: " + string.Format("{0:0,0}", txData);
                                num9 += num7 * 20;
                                break;
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str, new Vector2((float) num8, (float) num9), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    for (int num10 = 0; num10 < maxMsg; num10++)
                    {
                        string str2 = "";
                        int num11 = 200;
                        int num12 = 120;
                        num12 += num10 * 15;
                        str2 = num10 + ": ";
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str2, new Vector2((float) num11, (float) num12), Color.White, 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        num11 += 30;
                        str2 = "rx:" + string.Format("{0:0,0}", rxMsgType[num10]);
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str2, new Vector2((float) num11, (float) num12), Color.White, 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        num11 += 70;
                        str2 = string.Format("{0:0,0}", rxDataType[num10]);
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str2, new Vector2((float) num11, (float) num12), Color.White, 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        num11 += 70;
                        str2 = num10 + ": ";
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str2, new Vector2((float) num11, (float) num12), Color.White, 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        num11 += 30;
                        str2 = "tx:" + string.Format("{0:0,0}", txMsgType[num10]);
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str2, new Vector2((float) num11, (float) num12), Color.White, 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        num11 += 70;
                        str2 = string.Format("{0:0,0}", txDataType[num10]);
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str2, new Vector2((float) num11, (float) num12), Color.White, 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                    }
                }
                if (drawDiag)
                {
                    for (int num13 = 0; num13 < 7; num13++)
                    {
                        string str3 = "";
                        int num14 = 20;
                        int num15 = 220;
                        num15 += num13 * 0x10;
                        switch (num13)
                        {
                            case 0:
                                str3 = "Solid Tiles:";
                                break;

                            case 1:
                                str3 = "Misc. Tiles:";
                                break;

                            case 2:
                                str3 = "Walls Tiles:";
                                break;

                            case 3:
                                str3 = "Background Tiles:";
                                break;

                            case 4:
                                str3 = "Water Tiles:";
                                break;

                            case 5:
                                str3 = "Black Tiles:";
                                break;

                            case 6:
                                str3 = "Total Render:";
                                break;
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str3, new Vector2((float) num14, (float) num15), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    for (int num16 = 0; num16 < 7; num16++)
                    {
                        string str4 = "";
                        int num17 = 180;
                        int num18 = 220;
                        num18 += num16 * 0x10;
                        switch (num16)
                        {
                            case 0:
                                str4 = renderTimer[num16] + "ms";
                                break;

                            case 1:
                                str4 = renderTimer[num16] + "ms";
                                break;

                            case 2:
                                str4 = renderTimer[num16] + "ms";
                                break;

                            case 3:
                                str4 = renderTimer[num16] + "ms";
                                break;

                            case 4:
                                str4 = renderTimer[num16] + "ms";
                                break;

                            case 5:
                                str4 = renderTimer[num16] + "ms";
                                break;

                            case 6:
                                str4 = (((((renderTimer[0] + renderTimer[1]) + renderTimer[2]) + renderTimer[3]) + renderTimer[4]) + renderTimer[5]) + "ms";
                                break;
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str4, new Vector2((float) num17, (float) num18), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    for (int num19 = 0; num19 < 6; num19++)
                    {
                        string str5 = "";
                        int num20 = 20;
                        int num21 = 0x15a;
                        num21 += num19 * 0x10;
                        switch (num19)
                        {
                            case 0:
                                str5 = "Lighting Init:";
                                break;

                            case 1:
                                str5 = "Lighting Phase #1:";
                                break;

                            case 2:
                                str5 = "Lighting Phase #2:";
                                break;

                            case 3:
                                str5 = "Lighting Phase #3";
                                break;

                            case 4:
                                str5 = "Lighting Phase #4";
                                break;

                            case 5:
                                str5 = "Total Lighting:";
                                break;
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str5, new Vector2((float) num20, (float) num21), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    for (int num22 = 0; num22 < 6; num22++)
                    {
                        string str6 = "";
                        int num23 = 180;
                        int num24 = 0x15a;
                        num24 += num22 * 0x10;
                        switch (num22)
                        {
                            case 0:
                                str6 = lightTimer[num22] + "ms";
                                break;

                            case 1:
                                str6 = lightTimer[num22] + "ms";
                                break;

                            case 2:
                                str6 = lightTimer[num22] + "ms";
                                break;

                            case 3:
                                str6 = lightTimer[num22] + "ms";
                                break;

                            case 4:
                                str6 = lightTimer[num22] + "ms";
                                break;

                            case 5:
                                str6 = ((((lightTimer[0] + lightTimer[1]) + lightTimer[2]) + lightTimer[3]) + lightTimer[4]) + "ms";
                                break;
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str6, new Vector2((float) num23, (float) num24), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    int num25 = 5;
                    for (int num26 = 0; num26 < num25; num26++)
                    {
                        string str7 = "";
                        int num27 = 20;
                        int num28 = 0x1c8;
                        num28 += num26 * 0x10;
                        str7 = "Render #" + num26 + ":";
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str7, new Vector2((float) num27, (float) num28), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    for (int num29 = 0; num29 < num25; num29++)
                    {
                        string str8 = "";
                        int num30 = 180;
                        int num31 = 0x1c8;
                        num31 += num29 * 0x10;
                        str8 = drawTimer[num29] + "ms";
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str8, new Vector2((float) num30, (float) num31), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    for (int num32 = 0; num32 < num25; num32++)
                    {
                        string str9 = "";
                        int num33 = 230;
                        int num34 = 0x1c8;
                        num34 += num32 * 0x10;
                        str9 = drawTimerMax[num32] + "ms";
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, str9, new Vector2((float) num33, (float) num34), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    string str10 = "";
                    int num35 = 20;
                    int num36 = (0x1c8 + (0x10 * num25)) + 0x10;
                    str10 = "Update:";
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, str10, new Vector2((float) num35, (float) num36), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    str10 = "";
                    num35 = 180;
                    str10 = upTimer + "ms";
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, str10, new Vector2((float) num35, (float) num36), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    str10 = "";
                    num35 = 230;
                    str10 = upTimerMax + "ms";
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, str10, new Vector2((float) num35, (float) num36), Color.White, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                }
                if (signBubble)
                {
                    int num37 = signX - ((int) screenPosition.X);
                    int num38 = signY - ((int) screenPosition.Y);
                    SpriteEffects none = SpriteEffects.None;
                    if (signX > (player[myPlayer].position.X + player[myPlayer].width))
                    {
                        none = SpriteEffects.FlipHorizontally;
                        num37 += -8 - chat2Texture.Width;
                    }
                    else
                    {
                        num37 += 8;
                    }
                    num38 -= 0x16;
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(chat2Texture, new Vector2((float) num37, (float) num38), new Rectangle(0, 0, chat2Texture.Width, chat2Texture.Height), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, none, 0f);
                    signBubble = false;
                }
                for (int i = 0; i < 0xff; i++)
                {
                    if ((player[i].active && (myPlayer != i)) && !player[i].dead)
                    {
                        new Rectangle((int) ((player[i].position.X + (player[i].width * 0.5)) - 16.0), (int) ((player[i].position.Y + player[i].height) - 48f), 0x20, 0x30);
                        if (((player[myPlayer].team > 0) && (player[myPlayer].team == player[i].team)) || ZidoMod.tracking)
                        {
                            new Rectangle((int) screenPosition.X, (int) screenPosition.Y, screenWidth, Main.screenHeight);
                            string name = player[i].name;
                            Vector2 position = fontMouseText.MeasureString(name);
                            float num40 = 0f;
                            if (player[i].chatShowTime > 0)
                            {
                                num40 = -position.Y;
                            }
                            float num41 = 0f;
                            float num42 = ((float) mouseTextColor) / 255f;
                            Color color;
                            if (Main.player[i].statLife >= 400)
                                color = Color.Green;
                            else if (Main.player[i].statLife >= 300)
                                color = Color.LightGreen;
                            else if (Main.player[i].statLife >= 200)
                                color = Color.Yellow;
                            else if (Main.player[i].statLife >= 100)
                                color = Color.Orange;
                            else if (Main.player[i].statLife >= 50)
                                color = Color.OrangeRed;
                            else if (Main.player[i].statLife >= 25)
                                color = Color.Red;
                            else
                                color = Color.DarkRed;
                            Vector2 vector2 = new Vector2((screenWidth / 2) + screenPosition.X, (Main.screenHeight / 2) + screenPosition.Y);
                            float num43 = (player[i].position.X + (player[i].width / 2)) - vector2.X;
                            float num44 = (((player[i].position.Y - position.Y) - 2f) + num40) - vector2.Y;
                            float num45 = (float) Math.Sqrt((double) ((num43 * num43) + (num44 * num44)));
                            int screenHeight = Main.screenHeight;
                            if (Main.screenHeight > screenWidth)
                            {
                                screenHeight = screenWidth;
                            }
                            screenHeight = (screenHeight / 2) - 30;
                            if (screenHeight < 100)
                            {
                                screenHeight = 100;
                            }
                            if (num45 < screenHeight)
                            {
                                position.X = ((player[i].position.X + (player[i].width / 2)) - (position.X / 2f)) - screenPosition.X;
                                position.Y = (((player[i].position.Y - position.Y) - 2f) + num40) - screenPosition.Y;
                            }
                            else
                            {
                                num41 = num45;
                                num45 = ((float) screenHeight) / num45;
                                position.X = ((screenWidth / 2) + (num43 * num45)) - (position.X / 2f);
                                position.Y = (Main.screenHeight / 2) + (num44 * num45);
                            }
                            if (num41 > 0f)
                            {
                                name = name + "[" + ((int) ((num41 / 16f) * 2f)) + "]";
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, name, new Vector2(position.X - 2f, position.Y), Color.Black, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, name, new Vector2(position.X + 2f, position.Y), Color.Black, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, name, new Vector2(position.X, position.Y - 2f), Color.Black, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, name, new Vector2(position.X, position.Y + 2f), Color.Black, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, name, position, color, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
                if (playerInventory)
                {
                    npcChatText = "";
                    player[myPlayer].sign = -1;
                }
                if (ignoreErrors)
                {
                    try
                    {
                        if ((npcChatText != "") || (player[myPlayer].sign != -1))
                        {
                            this.DrawChat();
                        }
                    }
                    catch
                    {
                    }
                }
                else if ((npcChatText != "") || (player[myPlayer].sign != -1))
                {
                    this.DrawChat();
                }
                Color color2 = new Color(220, 220, 220, 220);
                invAlpha += invDir * 0.2f;
                if (invAlpha > 240f)
                {
                    invAlpha = 240f;
                    invDir = -1f;
                }
                if (invAlpha < 180f)
                {
                    invAlpha = 180f;
                    invDir = 1f;
                }
                color2 = new Color((int) ((byte) invAlpha), (int) ((byte) invAlpha), (int) ((byte) invAlpha), (int) ((byte) invAlpha));
                bool flag = false;
                int rare = 0;
                int num48 = screenWidth - 800;
                int num49 = player[myPlayer].statLifeMax / 20;
                if (num49 >= 10)
                {
                    num49 = 10;
                }
                string text = string.Concat(new object[] { "Life: ", player[myPlayer].statLifeMax, "/", player[myPlayer].statLifeMax });
                Vector2 vector4 = fontMouseText.MeasureString(text);
                if (!player[myPlayer].ghost)
                {
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, "Life: ", new Vector2(((500 + (13 * num49)) - (vector4.X * 0.5f)) + num48, 6f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    this.spriteBatch.DrawString(fontMouseText, player[myPlayer].statLife + "/" + player[myPlayer].statLifeMax, new Vector2(((500 + (13 * num49)) + (vector4.X * 0.5f)) + num48, 6f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, new Vector2(fontMouseText.MeasureString(player[myPlayer].statLife + "/" + player[myPlayer].statLifeMax).X, 0f), (float) 1f, SpriteEffects.None, 0f);
                }
                int num50 = 20;
                for (int j = 1; j < ((player[myPlayer].statLifeMax / num50) + 1); j++)
                {
                    int r = 0xff;
                    float scale = 1f;
                    bool flag2 = false;
                    if (player[myPlayer].statLife >= (j * num50))
                    {
                        r = 0xff;
                        if (player[myPlayer].statLife == (j * num50))
                        {
                            flag2 = true;
                        }
                    }
                    else
                    {
                        float num54 = ((float) (player[myPlayer].statLife - ((j - 1) * num50))) / ((float) num50);
                        r = (int) (30f + (225f * num54));
                        if (r < 30)
                        {
                            r = 30;
                        }
                        scale = (num54 / 4f) + 0.75f;
                        if (scale < 0.75)
                        {
                            scale = 0.75f;
                        }
                        if (num54 > 0f)
                        {
                            flag2 = true;
                        }
                    }
                    if (flag2)
                    {
                        scale += Main.cursorScale - 1f;
                    }
                    int num55 = 0;
                    int num56 = 0;
                    if (j > 10)
                    {
                        num55 -= 260;
                        num56 += 0x1a;
                    }
                    int a = (int) (r * 0.9);
                    if (!player[myPlayer].ghost)
                    {
                        this.spriteBatch.Draw(heartTexture, new Vector2((float) ((((500 + (0x1a * (j - 1))) + num55) + num48) + (heartTexture.Width / 2)), ((32f + ((heartTexture.Height - (heartTexture.Height * scale)) / 2f)) + num56) + (heartTexture.Height / 2)), new Rectangle(0, 0, heartTexture.Width, heartTexture.Height), new Color(r, r, r, a), 0f, new Vector2((float) (heartTexture.Width / 2), (float) (heartTexture.Height / 2)), scale, SpriteEffects.None, 0f);
                    }
                }
                int num58 = 20;
                if (player[myPlayer].statManaMax2 > 0)
                {
                    int num1 = player[myPlayer].statManaMax2 / 20;
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, "Mana", new Vector2((float) (750 + num48), 6f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    for (int num59 = 1; num59 < ((player[myPlayer].statManaMax2 / num58) + 1); num59++)
                    {
                        int num60 = 0xff;
                        bool flag3 = false;
                        float num61 = 1f;
                        if (player[myPlayer].statMana >= (num59 * num58))
                        {
                            num60 = 0xff;
                            if (player[myPlayer].statMana == (num59 * num58))
                            {
                                flag3 = true;
                            }
                        }
                        else
                        {
                            float num62 = ((float) (player[myPlayer].statMana - ((num59 - 1) * num58))) / ((float) num58);
                            num60 = (int) (30f + (225f * num62));
                            if (num60 < 30)
                            {
                                num60 = 30;
                            }
                            num61 = (num62 / 4f) + 0.75f;
                            if (num61 < 0.75)
                            {
                                num61 = 0.75f;
                            }
                            if (num62 > 0f)
                            {
                                flag3 = true;
                            }
                        }
                        if (flag3)
                        {
                            num61 += Main.cursorScale - 1f;
                        }
                        int num63 = (int) (num60 * 0.9);
                        this.spriteBatch.Draw(manaTexture, new Vector2((float) (0x307 + num48), ((30 + (manaTexture.Height / 2)) + ((manaTexture.Height - (manaTexture.Height * num61)) / 2f)) + (0x1c * (num59 - 1))), new Rectangle(0, 0, manaTexture.Width, manaTexture.Height), new Color(num60, num60, num60, num63), 0f, new Vector2((float) (manaTexture.Width / 2), (float) (manaTexture.Height / 2)), num61, SpriteEffects.None, 0f);
                    }
                }
                if ((player[myPlayer].breath < player[myPlayer].breathMax) && !player[myPlayer].ghost)
                {
                    int num64 = 0x4c;
                    int num281 = player[myPlayer].breathMax / 20;
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, "Breath", new Vector2(((500 + (13 * num49)) - (fontMouseText.MeasureString("Breath").X * 0.5f)) + num48, (float) (6 + num64)), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    int num65 = 20;
                    for (int num66 = 1; num66 < ((player[myPlayer].breathMax / num65) + 1); num66++)
                    {
                        int num67 = 0xff;
                        float num68 = 1f;
                        if (player[myPlayer].breath >= (num66 * num65))
                        {
                            num67 = 0xff;
                        }
                        else
                        {
                            float num69 = ((float) (player[myPlayer].breath - ((num66 - 1) * num65))) / ((float) num65);
                            num67 = (int) (30f + (225f * num69));
                            if (num67 < 30)
                            {
                                num67 = 30;
                            }
                            num68 = (num69 / 4f) + 0.75f;
                            if (num68 < 0.75)
                            {
                                num68 = 0.75f;
                            }
                        }
                        int num70 = 0;
                        int num71 = 0;
                        if (num66 > 10)
                        {
                            num70 -= 260;
                            num71 += 0x1a;
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(bubbleTexture, new Vector2((float) (((500 + (0x1a * (num66 - 1))) + num70) + num48), ((32f + ((bubbleTexture.Height - (bubbleTexture.Height * num68)) / 2f)) + num71) + num64), new Rectangle(0, 0, bubbleTexture.Width, bubbleTexture.Height), new Color(num67, num67, num67, num67), 0f, vector10, num68, SpriteEffects.None, 0f);
                    }
                }
                buffString = "";
                if (!playerInventory)
                {
                    int index = -1;
                    for (int num73 = 0; num73 < 10; num73++)
                    {
                        if (player[myPlayer].buffType[num73] > 0)
                        {
                            int num74 = player[myPlayer].buffType[num73];
                            int num75 = 0x20 + (num73 * 0x26);
                            int num76 = 0x4c;
                            Color color3 = new Color(buffAlpha[num73], buffAlpha[num73], buffAlpha[num73], buffAlpha[num73]);
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(buffTexture[num74], new Vector2((float) num75, (float) num76), new Rectangle(0, 0, buffTexture[num74].Width, buffTexture[num74].Height), color3, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            switch (num74)
                            {
                                case 0x1c:
                                case 0x22:
                                case 0x25:
                                case 0x26:
                                    break;

                                default:
                                {
                                    string str14 = "0 s";
                                    if ((player[myPlayer].buffTime[num73] / 60) >= 60)
                                    {
                                        str14 = Math.Round((double) (((double) (player[myPlayer].buffTime[num73] / 60)) / 60.0)) + " m";
                                    }
                                    else
                                    {
                                        str14 = Math.Round((double) (((double) player[myPlayer].buffTime[num73]) / 60.0)) + " s";
                                    }
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontItemStack, str14, new Vector2((float) num75, (float) (num76 + buffTexture[num74].Height)), color3, 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                                    break;
                                }
                            }
                            if (((mouseX < (num75 + buffTexture[num74].Width)) && (mouseY < (num76 + buffTexture[num74].Height))) && ((mouseX > num75) && (mouseY > num76)))
                            {
                                index = num73;
                                buffAlpha[num73] += 0.1f;
                                if ((mouseRight && mouseRightRelease) && (!debuff[num74] || ZidoMod.allowRemoveDebuffs))
                                {
                                    PlaySound(12, -1, -1, 1);
                                    player[myPlayer].DelBuff(num73);
                                }
                            }
                            else
                            {
                                buffAlpha[num73] -= 0.05f;
                            }
                            if (buffAlpha[num73] > 1f)
                            {
                                buffAlpha[num73] = 1f;
                            }
                            else if (buffAlpha[num73] < 0.4)
                            {
                                buffAlpha[num73] = 0.4f;
                            }
                            continue;
                        }
                        buffAlpha[num73] = 0.4f;
                    }
                    if (index >= 0)
                    {
                        int num77 = player[myPlayer].buffType[index];
                        if (num77 > 0)
                        {
                            buffString = buffTip[num77];
                            this.MouseText(buffName[num77], 0, 0);
                        }
                    }
                }
                if (player[myPlayer].dead)
                {
                    playerInventory = false;
                }
                if (!playerInventory)
                {
                    player[myPlayer].chest = -1;
                    craftGuide = false;
                    reforge = false;
                }
                string cursorText = "";
                if (!playerInventory)
                {
                    if (ZidoMod.showUI)
                    {
                        float pos = 140f;
                        if (ZidoMod.useAlternativeSendData)
                            this.spriteBatch.DrawString(fontMouseText, "AltSendData", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(!ZidoMod.useAlternativeSendData), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.mouseMode > 0)
                        {
                            string toolText = "";
                            switch (ZidoMod.mouseMode)
                            {
                                case 1:
                                    toolText = "Projectile (" + ZidoMod.brushType + ") (" + ZidoMod.brushSize + ")";
                                    break;
                                case 2:
                                    toolText = "Tile (" + ZidoMod.brushType + ") (" + ZidoMod.brushSize + ")";
                                    break;
                                case 3:
                                    toolText = "Wall (" + ZidoMod.brushType + ") (" + ZidoMod.brushSize + ")";
                                    break;
                                case 4:
                                    toolText = "Liquid (" + ZidoMod.brushType + ") (" + ZidoMod.brushSize + ") (" + ZidoMod.brushExtra + ")";
                                    break;
                                case 5:
                                    toolText = "RemoveTile (" + ZidoMod.brushSize + ")";
                                    break;
                                case 6:
                                    toolText = "RemoveWall (" + ZidoMod.brushSize + ")";
                                    break;
                                case 7:
                                    toolText = "RemoveLiquid (" + ZidoMod.brushSize + ")";
                                    break;
                                case 8:
                                    toolText = "Drop (" + ZidoMod.brushType + ") (" + ZidoMod.brushSize + ")";
                                    break;
                                case 9:
                                    toolText = "Teleport";
                                    break;
                            }
                            this.spriteBatch.DrawString(fontMouseText, "MouseClick: " + toolText, new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.mouseMode > 0), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        }
                        if (ZidoMod.cmdLimit)
                            this.spriteBatch.DrawString(fontMouseText, "Safe mode", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.disableDebuffs), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (!ZidoMod.mouseReleaseNeeded)
                            this.spriteBatch.DrawString(fontMouseText, "Fast Mouse", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(!ZidoMod.mouseReleaseNeeded), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.bombDOS)
                            this.spriteBatch.DrawString(fontMouseText, "Bomb DOS", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.bombDOS), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.debuffDOS)
                            this.spriteBatch.DrawString(fontMouseText, "Debuff DOS", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.bombDOS), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.fullbright)
                            this.spriteBatch.DrawString(fontMouseText, "Fullbright:(" + ZidoMod.fullbrightcolor.R + "," + ZidoMod.fullbrightcolor.G + "," + ZidoMod.fullbrightcolor.B + ")", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.fullbright), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.godMode)
                            this.spriteBatch.DrawString(fontMouseText, "God Mode", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.godMode), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.noClip)
                            this.spriteBatch.DrawString(fontMouseText, "No Clip", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.noClip), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.accuratePlayers)
                            this.spriteBatch.DrawString(fontMouseText, "Accurate Players", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.accuratePlayers), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.freeCam)
                            this.spriteBatch.DrawString(fontMouseText, "Free Cam", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.freeCam), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.invisible)
                            this.spriteBatch.DrawString(fontMouseText, "Invisible", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.invisible), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.undead)
                            this.spriteBatch.DrawString(fontMouseText, "Undead", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.undead), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.speedHack > 1)
                            this.spriteBatch.DrawString(fontMouseText, "Speedhack: " + ZidoMod.speedHack.ToString(), new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.speedHack > 1), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.tileRange > 4)
                            this.spriteBatch.DrawString(fontMouseText, "Tile Range: " + ZidoMod.tileRange.ToString(), new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.tileRange > 4), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.pickupRange > 38)
                            this.spriteBatch.DrawString(fontMouseText, "Pickup Range: " + ZidoMod.pickupRange.ToString(), new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.pickupRange > 38), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.followMode > 0)
                            this.spriteBatch.DrawString(fontMouseText, "Follow: " + Main.player[ZidoMod.followTarget].name + " (" + ZidoMod.followMode + ")", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.followMode > 0), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.infiniteMana)
                            this.spriteBatch.DrawString(fontMouseText, "Inf Mana", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.infiniteMana), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.infiniteStack)
                            this.spriteBatch.DrawString(fontMouseText, "Inf Ammo", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.infiniteStack), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.forceMaxStack)
                            this.spriteBatch.DrawString(fontMouseText, "Inf Stacks", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.forceMaxStack), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.slowFall)
                            this.spriteBatch.DrawString(fontMouseText, "Slow Fall", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.slowFall), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.infiniteRockets)
                            this.spriteBatch.DrawString(fontMouseText, "Inf Rockets", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.infiniteRockets), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.gravityControl)
                            this.spriteBatch.DrawString(fontMouseText, "Grav Ctrl", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.gravityControl), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.waterWalk)
                            this.spriteBatch.DrawString(fontMouseText, "Water Walk", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.waterWalk), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.superJump)
                            this.spriteBatch.DrawString(fontMouseText, "Super Jump", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.superJump), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.uberDefense)
                            this.spriteBatch.DrawString(fontMouseText, "Uber Defense", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.uberDefense), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.noKnockback)
                            this.spriteBatch.DrawString(fontMouseText, "No Knockback", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.noKnockback), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if (ZidoMod.showInvis)
                            this.spriteBatch.DrawString(fontMouseText, "Show Invis", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.showInvis), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.infiniteBreath)
                            this.spriteBatch.DrawString(fontMouseText, "Inf Breath", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.infiniteBreath), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.thorns)
                            this.spriteBatch.DrawString(fontMouseText, "Thorns", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.thorns), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.autoReuse)
                            this.spriteBatch.DrawString(fontMouseText, "Auto Reuse", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.autoReuse), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.fastUse > 1)
                            this.spriteBatch.DrawString(fontMouseText, "Rapid Fire: " + ZidoMod.fastUse.ToString(), new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.fastUse > 1), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.infiniteJump)
                            this.spriteBatch.DrawString(fontMouseText, "Inf Jump", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.infiniteJump), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.capNetStats)
                            this.spriteBatch.DrawString(fontMouseText, "Cap Stats", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.capNetStats), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.noAnimateSend)
                            this.spriteBatch.DrawString(fontMouseText, "No Animate", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.noAnimateSend), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.noProjectileSend)
                            this.spriteBatch.DrawString(fontMouseText, "No Projectile", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.noProjectileSend), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.flashlight)
                            this.spriteBatch.DrawString(fontMouseText, "Flashlight", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.flashlight), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.instantRespawn)
                            this.spriteBatch.DrawString(fontMouseText, "Instant Spawn", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.instantRespawn), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.maxRespawn)
                            this.spriteBatch.DrawString(fontMouseText, "Max Spawn", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.maxRespawn), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.noFallDmg)
                            this.spriteBatch.DrawString(fontMouseText, "No Fall Dmg", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.noFallDmg), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.showAllRecipes)
                            this.spriteBatch.DrawString(fontMouseText, "Show Recipes", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.showAllRecipes), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.freeCrafting)
                            this.spriteBatch.DrawString(fontMouseText, "Free Crafting", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.freeCrafting), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                        if(ZidoMod.disableDebuffs)
                            this.spriteBatch.DrawString(fontMouseText, "No Debuffs", new Vector2(20f, pos += 20), ZidoMod.GetStatusColor(ZidoMod.disableDebuffs), 0f, new Vector2(), 1f, SpriteEffects.None, 0f);
                    }
                    if (ZidoMod.showRadar)
                    {
                        float pos = 100f;

                        int playerCount = 0;
                        for (int i = 0; i < Main.player.Length; i++)
                        {
                            if (Main.player[i].active && i != Main.myPlayer)
                                playerCount++;
                        }

                        string info = "Currently " + playerCount + " players active";
                        Vector2 vector = fontMouseText.MeasureString(info);
                        vector.X *= 0.5f;
                        vector.Y *= 0.5f;
                        this.spriteBatch.DrawString(fontMouseText, info, new Vector2(((screenWidth - vector.X)) - 40f, pos), Color.White, 0f, vector, 0.85f, SpriteEffects.None, 0f);
                        for (int i = 0; i < Main.player.Length; i++)
                        {
                            if (Main.player[i].active && i != Main.myPlayer)
                            {
                                int distance = (int)Math.Abs((Main.player[i].position.X - Main.player[Main.myPlayer].position.X) / 16f);
                                string dist = "[" + distance + "]";
                                vector = fontMouseText.MeasureString(dist);
                                vector.X *= 0.5f;
                                vector.Y *= 0.5f;
                                this.spriteBatch.DrawString(fontMouseText, dist, new Vector2(((screenWidth - vector.X)) - 40f, pos += 20), Color.White, 0f, vector, 0.85f, SpriteEffects.None, 0f);

                                bool direction = (Main.player[i].position.X > Main.player[Main.myPlayer].position.X);
                                string dire = (direction ? ">" : "<");
                                vector = fontMouseText.MeasureString(dire);
                                vector.X *= 0.5f;
                                vector.Y *= 0.5f;
                                this.spriteBatch.DrawString(fontMouseText, dire, new Vector2(((screenWidth - vector.X)) - 100f, pos), Color.White, 0f, vector, 0.85f, SpriteEffects.None, 0f);

                                string name = (Main.player[i].statLifeMax > 400 || Main.player[i].statLife > 400 ? "*" : "") + (Main.player[i].invis ? "=" : "") + Main.player[i].name;
                                if (name.Length > 16)
                                    name = name.Substring(0, 13) + "...";
                                vector = fontMouseText.MeasureString(name);
                                vector.X *= 0.5f;
                                vector.Y *= 0.5f;
                                Color health;
                                if (Main.player[i].statLife >= 400)
                                    health = Color.Green;
                                else if (Main.player[i].statLife >= 300)
                                    health = Color.LightGreen;
                                else if (Main.player[i].statLife >= 200)
                                    health = Color.Yellow;
                                else if (Main.player[i].statLife >= 100)
                                    health = Color.Orange;
                                else if (Main.player[i].statLife >= 50)
                                    health = Color.OrangeRed;
                                else if (Main.player[i].statLife >= 25)
                                    health = Color.Red;
                                else
                                    health = Color.DarkRed;

                                this.spriteBatch.DrawString(fontMouseText, name, new Vector2(((screenWidth - vector.X)) - 120f, pos), health, 0f, vector, 0.85f, SpriteEffects.None, 0f);

                                if (Main.player[i].inventory[Main.player[i].selectedItem] != null)
                                {
                                    int type = Main.player[i].inventory[Main.player[i].selectedItem].type;
                                    int width = itemTexture[type].Width;
                                    if (width > 40) width = 40;
                                    int height = itemTexture[type].Height;
                                    if (height > 40) height = 40;
                                    this.spriteBatch.Draw(itemTexture[type], new Vector2(screenWidth - 280f, pos - 10), new Rectangle(0, 0, width, height), Color.White, 0f, new Vector2(), 0.5f, SpriteEffects.None, 0f);
                                }
                            }
                        }
                    }

                    if ((npcChatText == null) || (npcChatText == ""))
                    {
                        bool flag6 = false;
                        bool flag7 = false;
                        bool flag8 = false;
                        for (int num220 = 0; num220 < 3; num220++)
                        {
                            string str24 = "";
                            if ((player[myPlayer].accCompass > 0) && !flag8)
                            {
                                int num221 = ((int) (((player[myPlayer].position.X + (player[myPlayer].width / 2)) * 2f) / 16f)) - maxTilesX;
                                if (num221 > 0)
                                {
                                    str24 = "Position: " + num221 + " feet east";
                                    if (num221 == 1)
                                    {
                                        str24 = "Position: " + num221 + " foot east";
                                    }
                                }
                                else if (num221 < 0)
                                {
                                    num221 *= -1;
                                    str24 = "Position: " + num221 + " feet west";
                                    if (num221 == 1)
                                    {
                                        str24 = "Position: " + num221 + " foot west";
                                    }
                                }
                                else
                                {
                                    str24 = "Position: center";
                                }
                                flag8 = true;
                            }
                            else if ((player[myPlayer].accDepthMeter > 0) && !flag7)
                            {
                                int num222 = (int) ((((player[myPlayer].position.Y + player[myPlayer].height) * 2f) / 16f) - (worldSurface * 2.0));
                                if (num222 > 0)
                                {
                                    str24 = "Depth: " + num222 + " feet below";
                                    if (num222 == 1)
                                    {
                                        str24 = "Depth: " + num222 + " foot below";
                                    }
                                }
                                else if (num222 < 0)
                                {
                                    num222 *= -1;
                                    str24 = "Depth: " + num222 + " feet above";
                                    if (num222 == 1)
                                    {
                                        str24 = "Depth: " + num222 + " foot above";
                                    }
                                }
                                else
                                {
                                    str24 = "Depth: Level";
                                }
                                flag7 = true;
                            }
                            else if ((player[myPlayer].accWatch > 0) && !flag6)
                            {
                                string str25 = "AM";
                                double time = Main.time;
                                if (!dayTime)
                                {
                                    time += 54000.0;
                                }
                                time = (time / 86400.0) * 24.0;
                                double num224 = 7.5;
                                time = (time - num224) - 12.0;
                                if (time < 0.0)
                                {
                                    time += 24.0;
                                }
                                if (time >= 12.0)
                                {
                                    str25 = "PM";
                                }
                                int num225 = (int) time;
                                double num226 = time - num225;
                                num226 = (int) (num226 * 60.0);
                                string str26 = num226.ToString();
                                if (num226 < 10.0)
                                {
                                    str26 = "0" + str26;
                                }
                                if (num225 > 12)
                                {
                                    num225 -= 12;
                                }
                                if (num225 == 0)
                                {
                                    num225 = 12;
                                }
                                if (player[myPlayer].accWatch == 1)
                                {
                                    str26 = "00";
                                }
                                else if (player[myPlayer].accWatch == 2)
                                {
                                    if (num226 < 30.0)
                                    {
                                        str26 = "00";
                                    }
                                    else
                                    {
                                        str26 = "30";
                                    }
                                }
                                str24 = string.Concat(new object[] { "Time: ", num225, ":", str26, " ", str25 });
                                flag6 = true;
                            }
                            if (str24 != "")
                            {
                                for (int num227 = 0; num227 < 5; num227++)
                                {
                                    int num228 = 0;
                                    int num229 = 0;
                                    Color black = Color.Black;
                                    switch (num227)
                                    {
                                        case 0:
                                            num228 = -2;
                                            break;

                                        case 1:
                                            num228 = 2;
                                            break;

                                        case 2:
                                            num229 = -2;
                                            break;

                                        case 3:
                                            num229 = 2;
                                            break;

                                        case 4:
                                            black = new Color((int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor);
                                            break;
                                    }
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontMouseText, str24, new Vector2((float) (0x16 + num228), (float) (((50 + (0x16 * num220)) + num229) + 0x30)), black, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (netMode == 1)
                    {
                        int num78 = (0x2a3 + screenWidth) - 800;
                        int y = 0x72;
                        if (player[myPlayer].hostile)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[4], new Vector2((float) (num78 - 2), (float) y), new Rectangle(0, 0, itemTexture[4].Width, itemTexture[4].Height), teamColor[player[myPlayer].team], 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[4], new Vector2((float) (num78 + 2), (float) y), new Rectangle(0, 0, itemTexture[4].Width, itemTexture[4].Height), teamColor[player[myPlayer].team], 0f, vector10, (float) 1f, SpriteEffects.FlipHorizontally, 0f);
                        }
                        else
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[4], new Vector2((float) (num78 - 0x10), (float) (y + 14)), new Rectangle(0, 0, itemTexture[4].Width, itemTexture[4].Height), teamColor[player[myPlayer].team], -0.785f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[4], new Vector2((float) (num78 + 2), (float) (y + 14)), new Rectangle(0, 0, itemTexture[4].Width, itemTexture[4].Height), teamColor[player[myPlayer].team], -0.785f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        }
                        if (((mouseX > num78) && (mouseX < (num78 + 0x22))) && ((mouseY > (y - 2)) && (mouseY < (y + 0x22))))
                        {
                            player[myPlayer].mouseInterface = true;
                            if (mouseLeft && mouseLeftRelease)
                            {
                                if (teamCooldown == 0)
                                {
                                    teamCooldown = teamCooldownLen;
                                    PlaySound(12, -1, -1, 1);
                                    if (player[myPlayer].hostile)
                                    {
                                        player[myPlayer].hostile = false;
                                    }
                                    else
                                    {
                                        player[myPlayer].hostile = true;
                                    }
                                    NetMessage.SendData(30, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                                }
                                else
                                {
                                    NewText("You must wait " + ((teamCooldown / 60) + 1) + " seconds.", 0xff, 0, 0);
                                }
                            }
                        }
                        num78 -= 3;
                        Rectangle rectangle = new Rectangle(mouseX, mouseY, 1, 1);
                        int width = teamTexture.Width;
                        int height = teamTexture.Height;
                        for (int num82 = 0; num82 < 5; num82++)
                        {
                            Rectangle rectangle2 = new Rectangle();
                            switch (num82)
                            {
                                case 0:
                                    rectangle2 = new Rectangle(num78 + 50, y - 20, width, height);
                                    break;

                                case 1:
                                    rectangle2 = new Rectangle(num78 + 40, y, width, height);
                                    break;

                                case 2:
                                    rectangle2 = new Rectangle(num78 + 60, y, width, height);
                                    break;

                                case 3:
                                    rectangle2 = new Rectangle(num78 + 40, y + 20, width, height);
                                    break;

                                case 4:
                                    rectangle2 = new Rectangle(num78 + 60, y + 20, width, height);
                                    break;
                            }
                            if (rectangle2.Intersects(rectangle))
                            {
                                player[myPlayer].mouseInterface = true;
                                if ((mouseLeft && mouseLeftRelease) && (player[myPlayer].team != num82))
                                {
                                    if (teamCooldown == 0)
                                    {
                                        teamCooldown = teamCooldownLen;
                                        PlaySound(12, -1, -1, 1);
                                        player[myPlayer].team = num82;
                                        NetMessage.SendData(0x2d, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                                    }
                                    else
                                    {
                                        NewText("You must wait " + ((teamCooldown / 60) + 1) + " seconds.", 0xff, 0, 0);
                                    }
                                }
                            }
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(teamTexture, new Vector2((float) (num78 + 50), (float) (y - 20)), new Rectangle(0, 0, teamTexture.Width, teamTexture.Height), teamColor[0], 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(teamTexture, new Vector2((float) (num78 + 40), (float) y), new Rectangle(0, 0, teamTexture.Width, teamTexture.Height), teamColor[1], 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(teamTexture, new Vector2((float) (num78 + 60), (float) y), new Rectangle(0, 0, teamTexture.Width, teamTexture.Height), teamColor[2], 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(teamTexture, new Vector2((float) (num78 + 40), (float) (y + 20)), new Rectangle(0, 0, teamTexture.Width, teamTexture.Height), teamColor[3], 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(teamTexture, new Vector2((float) (num78 + 60), (float) (y + 20)), new Rectangle(0, 0, teamTexture.Width, teamTexture.Height), teamColor[4], 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                    bool flag4 = false;
                    Main.inventoryScale = 0.85f;
                    int num83 = 0x1c0;
                    int num84 = 210;
                    Color white = new Color(150, 150, 150, 150);
                    if (((mouseX >= num83) && (mouseX <= (num83 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num84) && (mouseY <= (num84 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                    {
                        player[myPlayer].mouseInterface = true;
                        if (mouseLeftRelease && mouseLeft)
                        {
                            if (Main.mouseItem.type != 0)
                            {
                                trashItem.SetDefaults(0, false);
                            }
                            Item mouseItem = Main.mouseItem;
                            Main.mouseItem = trashItem;
                            trashItem = mouseItem;
                            if ((trashItem.type == 0) || (trashItem.stack < 1))
                            {
                                trashItem = new Item();
                            }
                            if ((Main.mouseItem.IsTheSameAs(trashItem) && (trashItem.stack != trashItem.maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                            {
                                if ((Main.mouseItem.stack + trashItem.stack) <= Main.mouseItem.maxStack)
                                {
                                    trashItem.stack += Main.mouseItem.stack;
                                    Main.mouseItem.stack = 0;
                                }
                                else
                                {
                                    int num85 = Main.mouseItem.maxStack - trashItem.stack;
                                    trashItem.stack += num85;
                                    Main.mouseItem.stack -= num85;
                                }
                            }
                            if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                            {
                                Main.mouseItem = new Item();
                            }
                            if ((Main.mouseItem.type > 0) || (trashItem.type > 0))
                            {
                                PlaySound(7, -1, -1, 1);
                            }
                        }
                        if (!flag4)
                        {
                            cursorText = trashItem.name;
                            if (trashItem.stack > 1)
                            {
                                obj2 = cursorText;
                                cursorText = string.Concat(new object[] { obj2, " (", trashItem.stack, ")" });
                            }
                            toolTip = (Item) trashItem.Clone();
                            if (cursorText == null)
                            {
                                cursorText = "Trash Can";
                            }
                        }
                        else
                        {
                            cursorText = "Trash Can";
                        }
                    }
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(inventoryBack7Texture, new Vector2((float) num83, (float) num84), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                    white = Color.White;
                    if (((trashItem.type == 0) || (trashItem.stack == 0)) || flag4)
                    {
                        white = new Color(100, 100, 100, 100);
                        float inventoryScale = Main.inventoryScale;
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(trashTexture, new Vector2((num83 + (26f * Main.inventoryScale)) - ((trashTexture.Width * 0.5f) * inventoryScale), (num84 + (26f * Main.inventoryScale)) - ((trashTexture.Height * 0.5f) * inventoryScale)), new Rectangle(0, 0, trashTexture.Width, trashTexture.Height), white, 0f, vector10, inventoryScale, SpriteEffects.None, 0f);
                    }
                    else
                    {
                        float num87 = 1f;
                        if ((itemTexture[trashItem.type].Width > 0x20) || (itemTexture[trashItem.type].Height > 0x20))
                        {
                            if (itemTexture[trashItem.type].Width > itemTexture[trashItem.type].Height)
                            {
                                num87 = 32f / ((float) itemTexture[trashItem.type].Width);
                            }
                            else
                            {
                                num87 = 32f / ((float) itemTexture[trashItem.type].Height);
                            }
                        }
                        num87 *= Main.inventoryScale;
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(itemTexture[trashItem.type], new Vector2((num83 + (26f * Main.inventoryScale)) - ((itemTexture[trashItem.type].Width * 0.5f) * num87), (num84 + (26f * Main.inventoryScale)) - ((itemTexture[trashItem.type].Height * 0.5f) * num87)), new Rectangle(0, 0, itemTexture[trashItem.type].Width, itemTexture[trashItem.type].Height), trashItem.GetAlpha(white), 0f, vector10, num87, SpriteEffects.None, 0f);
                        color34 = new Color();
                        if (trashItem.color != color34)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[trashItem.type], new Vector2((num83 + (26f * Main.inventoryScale)) - ((itemTexture[trashItem.type].Width * 0.5f) * num87), (num84 + (26f * Main.inventoryScale)) - ((itemTexture[trashItem.type].Height * 0.5f) * num87)), new Rectangle(0, 0, itemTexture[trashItem.type].Width, itemTexture[trashItem.type].Height), trashItem.GetColor(white), 0f, vector10, num87, SpriteEffects.None, 0f);
                        }
                        if (trashItem.stack > 1)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontItemStack, trashItem.stack.ToString(), new Vector2(num83 + (10f * Main.inventoryScale), num84 + (26f * Main.inventoryScale)), white, 0f, vector10, num87, SpriteEffects.None, 0f);
                        }
                    }
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, "Inventory", new Vector2(40f, 0f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    Main.inventoryScale = 0.85f;
                    if (((mouseX > 20) && (mouseX < ((int) (20f + (560f * Main.inventoryScale))))) && ((mouseY > 20) && (mouseY < ((int) (20f + (224f * Main.inventoryScale))))))
                    {
                        player[myPlayer].mouseInterface = true;
                    }
                    for (int num88 = 0; num88 < 10; num88++)
                    {
                        for (int num89 = 0; num89 < 4; num89++)
                        {
                            int num90 = (int) (20f + ((num88 * 0x38) * Main.inventoryScale));
                            int num91 = (int) (20f + ((num89 * 0x38) * Main.inventoryScale));
                            int num92 = num88 + (num89 * 10);
                            Color newColor = new Color(100, 100, 100, 100);
                            if (((mouseX >= num90) && (mouseX <= (num90 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num91) && (mouseY <= (num91 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                            {
                                player[myPlayer].mouseInterface = true;
                                if (mouseLeftRelease && mouseLeft)
                                {
                                    if (keyState.IsKeyDown(Keys.LeftShift))
                                    {
                                        if (player[myPlayer].inventory[num92].type > 0)
                                        {
                                            if (npcShop > 0)
                                            {
                                                if (player[myPlayer].SellItem(player[myPlayer].inventory[num92].value, player[myPlayer].inventory[num92].stack))
                                                {
                                                    this.shop[npcShop].AddShop(player[myPlayer].inventory[num92]);
                                                    player[myPlayer].inventory[num92].SetDefaults(0, false);
                                                    PlaySound(0x12, -1, -1, 1);
                                                }
                                                else if (player[myPlayer].inventory[num92].value == 0)
                                                {
                                                    this.shop[npcShop].AddShop(player[myPlayer].inventory[num92]);
                                                    player[myPlayer].inventory[num92].SetDefaults(0, false);
                                                    PlaySound(7, -1, -1, 1);
                                                }
                                            }
                                            else
                                            {
                                                Recipe.FindRecipes();
                                                PlaySound(7, -1, -1, 1);
                                                trashItem = (Item) player[myPlayer].inventory[num92].Clone();
                                                player[myPlayer].inventory[num92].SetDefaults(0, false);
                                            }
                                        }
                                    }
                                    else if ((player[myPlayer].selectedItem != num92) || (player[myPlayer].itemAnimation <= 0))
                                    {
                                        Item item2 = Main.mouseItem;
                                        Main.mouseItem = player[myPlayer].inventory[num92];
                                        player[myPlayer].inventory[num92] = item2;
                                        if ((player[myPlayer].inventory[num92].type == 0) || (player[myPlayer].inventory[num92].stack < 1))
                                        {
                                            player[myPlayer].inventory[num92] = new Item();
                                        }
                                        if ((Main.mouseItem.IsTheSameAs(player[myPlayer].inventory[num92]) && (player[myPlayer].inventory[num92].stack != player[myPlayer].inventory[num92].maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                        {
                                            if ((Main.mouseItem.stack + player[myPlayer].inventory[num92].stack) <= Main.mouseItem.maxStack)
                                            {
                                                Item item1 = player[myPlayer].inventory[num92];
                                                item1.stack += Main.mouseItem.stack;
                                                Main.mouseItem.stack = 0;
                                            }
                                            else
                                            {
                                                int num93 = Main.mouseItem.maxStack - player[myPlayer].inventory[num92].stack;
                                                Item item12 = player[myPlayer].inventory[num92];
                                                item12.stack += num93;
                                                Main.mouseItem.stack -= num93;
                                            }
                                        }
                                        if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                        {
                                            Main.mouseItem = new Item();
                                        }
                                        if ((Main.mouseItem.type > 0) || (player[myPlayer].inventory[num92].type > 0))
                                        {
                                            Recipe.FindRecipes();
                                            PlaySound(7, -1, -1, 1);
                                        }
                                    }
                                }
                                else if ((mouseRight && mouseRightRelease) && (player[myPlayer].inventory[num92].maxStack == 1))
                                {
                                    player[myPlayer].inventory[num92] = armorSwap(player[myPlayer].inventory[num92]);
                                }
                                else if (((((stackSplit <= 1) && mouseRight) && ((player[myPlayer].inventory[num92].maxStack > 1) && (player[myPlayer].inventory[num92].type > 0))) && (Main.mouseItem.IsTheSameAs(player[myPlayer].inventory[num92]) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                                {
                                    if (Main.mouseItem.type == 0)
                                    {
                                        Main.mouseItem = (Item) player[myPlayer].inventory[num92].Clone();
                                        Main.mouseItem.stack = 0;
                                    }
                                    Main.mouseItem.stack++;
                                    Item item13 = player[myPlayer].inventory[num92];
                                    item13.stack--;
                                    if (player[myPlayer].inventory[num92].stack <= 0)
                                    {
                                        player[myPlayer].inventory[num92] = new Item();
                                    }
                                    Recipe.FindRecipes();
                                    soundInstanceMenuTick.Stop();
                                    soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                    PlaySound(12, -1, -1, 1);
                                    if (stackSplit == 0)
                                    {
                                        stackSplit = 15;
                                    }
                                    else
                                    {
                                        stackSplit = stackDelay;
                                    }
                                }
                                cursorText = player[myPlayer].inventory[num92].name;
                                toolTip = (Item) player[myPlayer].inventory[num92].Clone();
                                if (player[myPlayer].inventory[num92].stack > 1)
                                {
                                    obj2 = cursorText;
                                    cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].inventory[num92].stack, ")" });
                                }
                            }
                            if (num89 != 0)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBackTexture, new Vector2((float) num90, (float) num91), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                            }
                            else
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBack9Texture, new Vector2((float) num90, (float) num91), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                            }
                            newColor = Color.White;
                            if ((player[myPlayer].inventory[num92].type > 0) && (player[myPlayer].inventory[num92].stack > 0))
                            {
                                float num94 = 1f;
                                if ((itemTexture[player[myPlayer].inventory[num92].type].Width > 0x20) || (itemTexture[player[myPlayer].inventory[num92].type].Height > 0x20))
                                {
                                    if (itemTexture[player[myPlayer].inventory[num92].type].Width > itemTexture[player[myPlayer].inventory[num92].type].Height)
                                    {
                                        num94 = 32f / ((float) itemTexture[player[myPlayer].inventory[num92].type].Width);
                                    }
                                    else
                                    {
                                        num94 = 32f / ((float) itemTexture[player[myPlayer].inventory[num92].type].Height);
                                    }
                                }
                                num94 *= Main.inventoryScale;
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num92].type], new Vector2((num90 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num92].type].Width * 0.5f) * num94), (num91 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num92].type].Height * 0.5f) * num94)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num92].type].Width, itemTexture[player[myPlayer].inventory[num92].type].Height), player[myPlayer].inventory[num92].GetAlpha(newColor), 0f, vector10, num94, SpriteEffects.None, 0f);
                                color34 = new Color();
                                if (player[myPlayer].inventory[num92].color != color34)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num92].type], new Vector2((num90 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num92].type].Width * 0.5f) * num94), (num91 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num92].type].Height * 0.5f) * num94)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num92].type].Width, itemTexture[player[myPlayer].inventory[num92].type].Height), player[myPlayer].inventory[num92].GetColor(newColor), 0f, vector10, num94, SpriteEffects.None, 0f);
                                }
                                if (player[myPlayer].inventory[num92].stack > 1)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontItemStack, player[myPlayer].inventory[num92].stack.ToString(), new Vector2(num90 + (10f * Main.inventoryScale), num91 + (26f * Main.inventoryScale)), newColor, 0f, vector10, num94, SpriteEffects.None, 0f);
                                }
                            }
                            if (num89 == 0)
                            {
                                string str16 = (num92 + 1).ToString();
                                if (str16 == "10")
                                {
                                    str16 = "0";
                                }
                                Color color6 = color2;
                                if (player[myPlayer].selectedItem == num92)
                                {
                                    color6.R = 0;
                                    color6.B = 0;
                                    color6.G = 0xff;
                                    color6.A = 50;
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontItemStack, str16, new Vector2((float) (num90 + 6), (float) (num91 + 4)), color6, 0f, vector10, (float) (Main.inventoryScale * 0.8f), SpriteEffects.None, 0f);
                            }
                        }
                    }
                    int num95 = 0;
                    int num96 = 2;
                    int num97 = 0x20;
                    if (!player[myPlayer].hbLocked)
                    {
                        num95 = 1;
                    }
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(HBLockTexture[num95], new Vector2((float) num96, (float) num97), new Rectangle(0, 0, HBLockTexture[num95].Width, HBLockTexture[num95].Height), color2, 0f, vector10, (float) 0.9f, SpriteEffects.None, 0f);
                    if (((mouseX > num96) && (mouseX < (num96 + (HBLockTexture[num95].Width * 0.9f)))) && ((mouseY > num97) && (mouseY < (num97 + (HBLockTexture[num95].Height * 0.9f)))))
                    {
                        player[myPlayer].mouseInterface = true;
                        if (!player[myPlayer].hbLocked)
                        {
                            this.MouseText("Hotbar unlocked", 0, 0);
                            flag = true;
                        }
                        else
                        {
                            this.MouseText("Hotbar locked", 0, 0);
                            flag = true;
                        }
                        if (mouseLeft && mouseLeftRelease)
                        {
                            PlaySound(0x16, -1, -1, 1);
                            if (!player[myPlayer].hbLocked)
                            {
                                player[myPlayer].hbLocked = true;
                            }
                            else
                            {
                                player[myPlayer].hbLocked = false;
                            }
                        }
                    }
                    if (armorHide)
                    {
                        armorAlpha -= 0.1f;
                        if (armorAlpha < 0f)
                        {
                            armorAlpha = 0f;
                        }
                    }
                    else
                    {
                        armorAlpha += 0.025f;
                        if (armorAlpha > 1f)
                        {
                            armorAlpha = 1f;
                        }
                    }
                    Color color7 = new Color((int) ((byte) (mouseTextColor * armorAlpha)), (int) ((byte) (mouseTextColor * armorAlpha)), (int) ((byte) (mouseTextColor * armorAlpha)), (int) ((byte) (mouseTextColor * armorAlpha)));
                    armorHide = false;
                    int num98 = 1;
                    int num99 = screenWidth - 0x98;
                    int num100 = 0x80;
                    if (netMode == 0)
                    {
                        num99 += 0x48;
                    }
                    if (this.showNPCs)
                    {
                        num98 = 0;
                    }
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(npcToggleTexture[num98], new Vector2((float) num99, (float) num100), new Rectangle(0, 0, npcToggleTexture[num98].Width, npcToggleTexture[num98].Height), Color.White, 0f, vector10, (float) 0.9f, SpriteEffects.None, 0f);
                    if (((mouseX > num99) && (mouseX < (num99 + (npcToggleTexture[num98].Width * 0.9f)))) && ((mouseY > num100) && (mouseY < (num100 + (npcToggleTexture[num98].Height * 0.9f)))))
                    {
                        player[myPlayer].mouseInterface = true;
                        if (mouseLeft && mouseLeftRelease)
                        {
                            PlaySound(12, -1, -1, 1);
                            if (!this.showNPCs)
                            {
                                this.showNPCs = true;
                            }
                            else
                            {
                                this.showNPCs = false;
                            }
                        }
                    }
                    if (this.showNPCs)
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, "Housing", new Vector2((float) (((screenWidth - 0x40) - 0x1c) - 3), 152f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        if (((mouseX > ((screenWidth - 0x40) - 0x1c)) && (mouseX < (((screenWidth - 0x40) - 0x1c) + ((int) (56f * Main.inventoryScale))))) && ((mouseY > 0xae) && (mouseY < ((int) (174f + (448f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        int num101 = 0;
                        string str17 = "";
                        for (int num102 = 0; num102 < 11; num102++)
                        {
                            bool flag5 = false;
                            int num103 = 0;
                            if (num102 == 0)
                            {
                                flag5 = true;
                            }
                            else
                            {
                                for (int num104 = 0; num104 < 200; num104++)
                                {
                                    if (npc[num104].active && (NPC.TypeToNum(npc[num104].type) == num102))
                                    {
                                        flag5 = true;
                                        num103 = num104;
                                        goto Label_41CB;
                                    }
                                }
                            }
                        Label_41CB:
                            if (flag5)
                            {
                                int num105 = (screenWidth - 0x40) - 0x1c;
                                int num106 = (int) (174f + ((num101 * 0x38) * Main.inventoryScale));
                                Color color8 = new Color(100, 100, 100, 100);
                                if ((Main.screenHeight < 0x300) && (num101 > 5))
                                {
                                    num106 -= (int) (280f * Main.inventoryScale);
                                    num105 -= 0x30;
                                }
                                if (((mouseX >= num105) && (mouseX <= (num105 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num106) && (mouseY <= (num106 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                                {
                                    flag = true;
                                    if (num102 == 0)
                                    {
                                        str17 = "Housing Query";
                                    }
                                    else
                                    {
                                        str17 = npc[num103].displayName + " the " + npc[num103].name;
                                    }
                                    player[myPlayer].mouseInterface = true;
                                    if ((mouseLeftRelease && mouseLeft) && (Main.mouseItem.type == 0))
                                    {
                                        PlaySound(12, -1, -1, 1);
                                        this.mouseNPC = num102;
                                        mouseLeftRelease = false;
                                    }
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBack11Texture, new Vector2((float) num105, (float) num106), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                                color8 = Color.White;
                                int num107 = num102;
                                float num108 = 1f;
                                float num109 = 0f;
                                if (npcHeadTexture[num107].Width > npcHeadTexture[num107].Height)
                                {
                                    num109 = npcHeadTexture[num107].Width;
                                }
                                else
                                {
                                    num109 = npcHeadTexture[num107].Height;
                                }
                                if (num109 > 36f)
                                {
                                    num108 = 36f / num109;
                                }
                                this.spriteBatch.Draw(npcHeadTexture[num107], new Vector2(num105 + (26f * Main.inventoryScale), num106 + (26f * Main.inventoryScale)), new Rectangle(0, 0, npcHeadTexture[num107].Width, npcHeadTexture[num107].Height), color8, 0f, new Vector2((float) (npcHeadTexture[num107].Width / 2), (float) (npcHeadTexture[num107].Height / 2)), num108, SpriteEffects.None, 0f);
                                num101++;
                            }
                        }
                        if ((str17 != "") && (Main.mouseItem.type == 0))
                        {
                            this.MouseText(str17, 0, 0);
                        }
                    }
                    else
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, "Equip", new Vector2((float) (((screenWidth - 0x40) - 0x1c) + 4), 152f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        if (((mouseX > ((screenWidth - 0x40) - 0x1c)) && (mouseX < (((screenWidth - 0x40) - 0x1c) + ((int) (56f * Main.inventoryScale))))) && ((mouseY > 0xae) && (mouseY < ((int) (174f + (448f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        for (int num110 = 0; num110 < 8; num110++)
                        {
                            int num111 = (screenWidth - 0x40) - 0x1c;
                            int num112 = (int) (174f + ((num110 * 0x38) * Main.inventoryScale));
                            Color color9 = new Color(100, 100, 100, 100);
                            string str18 = "";
                            switch (num110)
                            {
                                case 3:
                                    str18 = "Accessories";
                                    break;

                                case 7:
                                    str18 = player[myPlayer].statDefense + " Defense";
                                    break;
                            }
                            Vector2 vector5 = fontMouseText.MeasureString(str18);
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, str18, new Vector2((num111 - vector5.X) - 10f, (num112 + (inventoryBackTexture.Height * 0.5f)) - (vector5.Y * 0.5f)), color7, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            if (((mouseX >= num111) && (mouseX <= (num111 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num112) && (mouseY <= (num112 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                            {
                                armorHide = true;
                                player[myPlayer].mouseInterface = true;
                                if ((mouseLeftRelease && mouseLeft) && ((((Main.mouseItem.type == 0) || ((Main.mouseItem.headSlot > -1) && (num110 == 0))) || ((Main.mouseItem.bodySlot > -1) && (num110 == 1))) || (((Main.mouseItem.legSlot > -1) && (num110 == 2)) || ((Main.mouseItem.accessory && (num110 > 2)) && !AccCheck(Main.mouseItem, num110)))))
                                {
                                    Item item3 = Main.mouseItem;
                                    Main.mouseItem = player[myPlayer].armor[num110];
                                    player[myPlayer].armor[num110] = item3;
                                    if ((player[myPlayer].armor[num110].type == 0) || (player[myPlayer].armor[num110].stack < 1))
                                    {
                                        player[myPlayer].armor[num110] = new Item();
                                    }
                                    if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                    {
                                        Main.mouseItem = new Item();
                                    }
                                    if ((Main.mouseItem.type > 0) || (player[myPlayer].armor[num110].type > 0))
                                    {
                                        Recipe.FindRecipes();
                                        PlaySound(7, -1, -1, 1);
                                    }
                                }
                                cursorText = player[myPlayer].armor[num110].name;
                                toolTip = (Item) player[myPlayer].armor[num110].Clone();
                                if (num110 <= 2)
                                {
                                    toolTip.wornArmor = true;
                                }
                                if (player[myPlayer].armor[num110].stack > 1)
                                {
                                    obj2 = cursorText;
                                    cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].armor[num110].stack, ")" });
                                }
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(inventoryBack3Texture, new Vector2((float) num111, (float) num112), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                            color9 = Color.White;
                            if ((player[myPlayer].armor[num110].type > 0) && (player[myPlayer].armor[num110].stack > 0))
                            {
                                float num113 = 1f;
                                if ((itemTexture[player[myPlayer].armor[num110].type].Width > 0x20) || (itemTexture[player[myPlayer].armor[num110].type].Height > 0x20))
                                {
                                    if (itemTexture[player[myPlayer].armor[num110].type].Width > itemTexture[player[myPlayer].armor[num110].type].Height)
                                    {
                                        num113 = 32f / ((float) itemTexture[player[myPlayer].armor[num110].type].Width);
                                    }
                                    else
                                    {
                                        num113 = 32f / ((float) itemTexture[player[myPlayer].armor[num110].type].Height);
                                    }
                                }
                                num113 *= Main.inventoryScale;
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[player[myPlayer].armor[num110].type], new Vector2((num111 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num110].type].Width * 0.5f) * num113), (num112 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num110].type].Height * 0.5f) * num113)), new Rectangle(0, 0, itemTexture[player[myPlayer].armor[num110].type].Width, itemTexture[player[myPlayer].armor[num110].type].Height), player[myPlayer].armor[num110].GetAlpha(color9), 0f, vector10, num113, SpriteEffects.None, 0f);
                                color34 = new Color();
                                if (player[myPlayer].armor[num110].color != color34)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[player[myPlayer].armor[num110].type], new Vector2((num111 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num110].type].Width * 0.5f) * num113), (num112 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num110].type].Height * 0.5f) * num113)), new Rectangle(0, 0, itemTexture[player[myPlayer].armor[num110].type].Width, itemTexture[player[myPlayer].armor[num110].type].Height), player[myPlayer].armor[num110].GetColor(color9), 0f, vector10, num113, SpriteEffects.None, 0f);
                                }
                                if (player[myPlayer].armor[num110].stack > 1)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontItemStack, player[myPlayer].armor[num110].stack.ToString(), new Vector2(num111 + (10f * Main.inventoryScale), num112 + (26f * Main.inventoryScale)), color9, 0f, vector10, num113, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, "Social", new Vector2((float) (((screenWidth - 0x40) - 0x1c) - 0x2c), 152f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 0.8f, SpriteEffects.None, 0f);
                        if (((mouseX > (((screenWidth - 0x40) - 0x1c) - 0x2f)) && (mouseX < ((((screenWidth - 0x40) - 20) - 0x2f) + ((int) (56f * Main.inventoryScale))))) && ((mouseY > 0xae) && (mouseY < ((int) (174f + (168f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        for (int num114 = 8; num114 < 11; num114++)
                        {
                            int num115 = ((screenWidth - 0x40) - 0x1c) - 0x2f;
                            int num116 = (int) (174f + (((num114 - 8) * 0x38) * Main.inventoryScale));
                            Color color10 = new Color(100, 100, 100, 100);
                            string str19 = "";
                            switch (num114)
                            {
                                case 8:
                                    str19 = "Helmet";
                                    break;

                                case 9:
                                    str19 = "Shirt";
                                    break;

                                case 10:
                                    str19 = "Pants";
                                    break;
                            }
                            Vector2 vector6 = fontMouseText.MeasureString(str19);
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, str19, new Vector2((num115 - vector6.X) - 10f, (num116 + (inventoryBackTexture.Height * 0.5f)) - (vector6.Y * 0.5f)), color7, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            if (((mouseX >= num115) && (mouseX <= (num115 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num116) && (mouseY <= (num116 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                            {
                                player[myPlayer].mouseInterface = true;
                                armorHide = true;
                                if (mouseLeftRelease && mouseLeft)
                                {
                                    if ((((Main.mouseItem.type == 0) || ((Main.mouseItem.headSlot > -1) && (num114 == 8))) || ((Main.mouseItem.bodySlot > -1) && (num114 == 9))) || ((Main.mouseItem.legSlot > -1) && (num114 == 10)))
                                    {
                                        Item item4 = Main.mouseItem;
                                        Main.mouseItem = player[myPlayer].armor[num114];
                                        player[myPlayer].armor[num114] = item4;
                                        if ((player[myPlayer].armor[num114].type == 0) || (player[myPlayer].armor[num114].stack < 1))
                                        {
                                            player[myPlayer].armor[num114] = new Item();
                                        }
                                        if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                        {
                                            Main.mouseItem = new Item();
                                        }
                                        if ((Main.mouseItem.type > 0) || (player[myPlayer].armor[num114].type > 0))
                                        {
                                            Recipe.FindRecipes();
                                            PlaySound(7, -1, -1, 1);
                                        }
                                    }
                                }
                                else if ((mouseRight && mouseRightRelease) && (player[myPlayer].armor[num114].maxStack == 1))
                                {
                                    player[myPlayer].armor[num114] = armorSwap(player[myPlayer].armor[num114]);
                                }
                                cursorText = player[myPlayer].armor[num114].name;
                                toolTip = (Item) player[myPlayer].armor[num114].Clone();
                                toolTip.social = true;
                                if (num114 <= 2)
                                {
                                    toolTip.wornArmor = true;
                                }
                                if (player[myPlayer].armor[num114].stack > 1)
                                {
                                    obj2 = cursorText;
                                    cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].armor[num114].stack, ")" });
                                }
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(inventoryBack8Texture, new Vector2((float) num115, (float) num116), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                            color10 = Color.White;
                            if ((player[myPlayer].armor[num114].type > 0) && (player[myPlayer].armor[num114].stack > 0))
                            {
                                float num117 = 1f;
                                if ((itemTexture[player[myPlayer].armor[num114].type].Width > 0x20) || (itemTexture[player[myPlayer].armor[num114].type].Height > 0x20))
                                {
                                    if (itemTexture[player[myPlayer].armor[num114].type].Width > itemTexture[player[myPlayer].armor[num114].type].Height)
                                    {
                                        num117 = 32f / ((float) itemTexture[player[myPlayer].armor[num114].type].Width);
                                    }
                                    else
                                    {
                                        num117 = 32f / ((float) itemTexture[player[myPlayer].armor[num114].type].Height);
                                    }
                                }
                                num117 *= Main.inventoryScale;
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[player[myPlayer].armor[num114].type], new Vector2((num115 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num114].type].Width * 0.5f) * num117), (num116 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num114].type].Height * 0.5f) * num117)), new Rectangle(0, 0, itemTexture[player[myPlayer].armor[num114].type].Width, itemTexture[player[myPlayer].armor[num114].type].Height), player[myPlayer].armor[num114].GetAlpha(color10), 0f, vector10, num117, SpriteEffects.None, 0f);
                                color34 = new Color();
                                if (player[myPlayer].armor[num114].color != color34)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[player[myPlayer].armor[num114].type], new Vector2((num115 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num114].type].Width * 0.5f) * num117), (num116 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].armor[num114].type].Height * 0.5f) * num117)), new Rectangle(0, 0, itemTexture[player[myPlayer].armor[num114].type].Width, itemTexture[player[myPlayer].armor[num114].type].Height), player[myPlayer].armor[num114].GetColor(color10), 0f, vector10, num117, SpriteEffects.None, 0f);
                                }
                                if (player[myPlayer].armor[num114].stack > 1)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontItemStack, player[myPlayer].armor[num114].stack.ToString(), new Vector2(num115 + (10f * Main.inventoryScale), num116 + (26f * Main.inventoryScale)), color10, 0f, vector10, num117, SpriteEffects.None, 0f);
                                }
                            }
                        }
                    }
                    int num118 = (Main.screenHeight - 600) / 2;
                    int num119 = (int) ((((float) Main.screenHeight) / 600f) * 250f);
                    if (craftingHide)
                    {
                        craftingAlpha -= 0.1f;
                        if (craftingAlpha < 0f)
                        {
                            craftingAlpha = 0f;
                        }
                    }
                    else
                    {
                        craftingAlpha += 0.025f;
                        if (craftingAlpha > 1f)
                        {
                            craftingAlpha = 1f;
                        }
                    }
                    Color color11 = new Color((int) ((byte) (mouseTextColor * craftingAlpha)), (int) ((byte) (mouseTextColor * craftingAlpha)), (int) ((byte) (mouseTextColor * craftingAlpha)), (int) ((byte) (mouseTextColor * craftingAlpha)));
                    craftingHide = false;
                    if (reforge)
                    {
                        if (mouseReforge)
                        {
                            if (reforgeScale < 1.3)
                            {
                                reforgeScale += 0.02f;
                            }
                        }
                        else if (reforgeScale > 1f)
                        {
                            reforgeScale -= 0.02f;
                        }
                        if (((player[myPlayer].chest != -1) || (npcShop != 0)) || ((player[myPlayer].talkNPC == -1) || craftGuide))
                        {
                            reforge = false;
                            player[myPlayer].dropItemCheck();
                            Recipe.FindRecipes();
                        }
                        else
                        {
                            int num120 = 0x65;
                            int num121 = 0xf1;
                            string str20 = "Cost: ";
                            if (reforgeItem.type > 0)
                            {
                                int price = reforgeItem.value;
                                string str21 = "";
                                int num123 = 0;
                                int num124 = 0;
                                int num125 = 0;
                                int num126 = 0;
                                int num127 = price;
                                if (num127 < 1)
                                {
                                    num127 = 1;
                                }
                                if (num127 >= 0xf4240)
                                {
                                    num123 = num127 / 0xf4240;
                                    num127 -= num123 * 0xf4240;
                                }
                                if (num127 >= 0x2710)
                                {
                                    num124 = num127 / 0x2710;
                                    num127 -= num124 * 0x2710;
                                }
                                if (num127 >= 100)
                                {
                                    num125 = num127 / 100;
                                    num127 -= num125 * 100;
                                }
                                if (num127 >= 1)
                                {
                                    num126 = num127;
                                }
                                if (num123 > 0)
                                {
                                    str21 = str21 + num123 + " platinum ";
                                }
                                if (num124 > 0)
                                {
                                    str21 = str21 + num124 + " gold ";
                                }
                                if (num125 > 0)
                                {
                                    str21 = str21 + num125 + " silver ";
                                }
                                if (num126 > 0)
                                {
                                    str21 = str21 + num126 + " copper ";
                                }
                                float num128 = ((float) mouseTextColor) / 255f;
                                Color color12 = Color.White;
                                if (num123 > 0)
                                {
                                    color12 = new Color((int) ((byte) (220f * num128)), (int) ((byte) (220f * num128)), (int) ((byte) (198f * num128)), (int) mouseTextColor);
                                }
                                else if (num124 > 0)
                                {
                                    color12 = new Color((int) ((byte) (224f * num128)), (int) ((byte) (201f * num128)), (int) ((byte) (92f * num128)), (int) mouseTextColor);
                                }
                                else if (num125 > 0)
                                {
                                    color12 = new Color((int) ((byte) (181f * num128)), (int) ((byte) (192f * num128)), (int) ((byte) (193f * num128)), (int) mouseTextColor);
                                }
                                else if (num126 > 0)
                                {
                                    color12 = new Color((int) ((byte) (246f * num128)), (int) ((byte) (138f * num128)), (int) ((byte) (96f * num128)), (int) mouseTextColor);
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontMouseText, str21, new Vector2((num120 + 50) + fontMouseText.MeasureString(str20).X, (float) num121), color12, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                                int num129 = num120 + 70;
                                int num130 = num121 + 40;
                                this.spriteBatch.Draw(reforgeTexture, new Vector2((float) num129, (float) num130), new Rectangle(0, 0, reforgeTexture.Width, reforgeTexture.Height), Color.White, 0f, new Vector2((float) (reforgeTexture.Width / 2), (float) (reforgeTexture.Height / 2)), reforgeScale, SpriteEffects.None, 0f);
                                if (((mouseX > (num129 - (reforgeTexture.Width / 2))) && (mouseX < (num129 + (reforgeTexture.Width / 2)))) && ((mouseY > (num130 - (reforgeTexture.Height / 2))) && (mouseY < (num130 + (reforgeTexture.Height / 2)))))
                                {
                                    cursorText = "Reforge";
                                    if (!mouseReforge)
                                    {
                                        PlaySound(12, -1, -1, 1);
                                    }
                                    mouseReforge = true;
                                    player[myPlayer].mouseInterface = true;
                                    if ((mouseLeftRelease && mouseLeft) && player[myPlayer].BuyItem(price))
                                    {
                                        reforgeItem.SetDefaults(reforgeItem.name);
                                        reforgeItem.Prefix(-2);
                                        reforgeItem.position.X = (player[myPlayer].position.X + (player[myPlayer].width / 2)) - (reforgeItem.width / 2);
                                        reforgeItem.position.Y = (player[myPlayer].position.Y + (player[myPlayer].height / 2)) - (reforgeItem.height / 2);
                                        ItemText.NewText(reforgeItem, reforgeItem.stack);
                                        PlaySound(2, -1, -1, 0x25);
                                    }
                                }
                                else
                                {
                                    mouseReforge = false;
                                }
                            }
                            else
                            {
                                str20 = "Place an item here to reforge";
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, str20, new Vector2((float) (num120 + 50), (float) num121), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            Color color13 = new Color(100, 100, 100, 100);
                            if (((mouseX >= num120) && (mouseX <= (num120 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num121) && (mouseY <= (num121 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                            {
                                player[myPlayer].mouseInterface = true;
                                craftingHide = true;
                                if (Main.mouseItem.Prefix(-3) || (Main.mouseItem.type == 0))
                                {
                                    if (mouseLeftRelease && mouseLeft)
                                    {
                                        Item item5 = Main.mouseItem;
                                        Main.mouseItem = reforgeItem;
                                        reforgeItem = item5;
                                        if ((reforgeItem.type == 0) || (reforgeItem.stack < 1))
                                        {
                                            reforgeItem = new Item();
                                        }
                                        if ((Main.mouseItem.IsTheSameAs(reforgeItem) && (reforgeItem.stack != reforgeItem.maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                        {
                                            if ((Main.mouseItem.stack + reforgeItem.stack) <= Main.mouseItem.maxStack)
                                            {
                                                reforgeItem.stack += Main.mouseItem.stack;
                                                Main.mouseItem.stack = 0;
                                            }
                                            else
                                            {
                                                int num131 = Main.mouseItem.maxStack - reforgeItem.stack;
                                                reforgeItem.stack += num131;
                                                Main.mouseItem.stack -= num131;
                                            }
                                        }
                                        if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                        {
                                            Main.mouseItem = new Item();
                                        }
                                        if ((Main.mouseItem.type > 0) || (reforgeItem.type > 0))
                                        {
                                            Recipe.FindRecipes();
                                            PlaySound(7, -1, -1, 1);
                                        }
                                    }
                                    else if ((((stackSplit <= 1) && mouseRight) && (Main.mouseItem.IsTheSameAs(reforgeItem) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                                    {
                                        if (Main.mouseItem.type == 0)
                                        {
                                            Main.mouseItem = (Item) reforgeItem.Clone();
                                            Main.mouseItem.stack = 0;
                                        }
                                        Main.mouseItem.stack++;
                                        reforgeItem.stack--;
                                        if (reforgeItem.stack <= 0)
                                        {
                                            reforgeItem = new Item();
                                        }
                                        Recipe.FindRecipes();
                                        soundInstanceMenuTick.Stop();
                                        soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                        PlaySound(12, -1, -1, 1);
                                        if (stackSplit == 0)
                                        {
                                            stackSplit = 15;
                                        }
                                        else
                                        {
                                            stackSplit = stackDelay;
                                        }
                                    }
                                }
                                cursorText = reforgeItem.name;
                                toolTip = (Item) reforgeItem.Clone();
                                if (reforgeItem.stack > 1)
                                {
                                    obj2 = cursorText;
                                    cursorText = string.Concat(new object[] { obj2, " (", reforgeItem.stack, ")" });
                                }
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(inventoryBack4Texture, new Vector2((float) num120, (float) num121), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                            color13 = Color.White;
                            if ((reforgeItem.type > 0) && (reforgeItem.stack > 0))
                            {
                                float num132 = 1f;
                                if ((itemTexture[reforgeItem.type].Width > 0x20) || (itemTexture[reforgeItem.type].Height > 0x20))
                                {
                                    if (itemTexture[reforgeItem.type].Width > itemTexture[reforgeItem.type].Height)
                                    {
                                        num132 = 32f / ((float) itemTexture[reforgeItem.type].Width);
                                    }
                                    else
                                    {
                                        num132 = 32f / ((float) itemTexture[reforgeItem.type].Height);
                                    }
                                }
                                num132 *= Main.inventoryScale;
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[reforgeItem.type], new Vector2((num120 + (26f * Main.inventoryScale)) - ((itemTexture[reforgeItem.type].Width * 0.5f) * num132), (num121 + (26f * Main.inventoryScale)) - ((itemTexture[reforgeItem.type].Height * 0.5f) * num132)), new Rectangle(0, 0, itemTexture[reforgeItem.type].Width, itemTexture[reforgeItem.type].Height), reforgeItem.GetAlpha(color13), 0f, vector10, num132, SpriteEffects.None, 0f);
                                color34 = new Color();
                                if (reforgeItem.color != color34)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[reforgeItem.type], new Vector2((num120 + (26f * Main.inventoryScale)) - ((itemTexture[reforgeItem.type].Width * 0.5f) * num132), (num121 + (26f * Main.inventoryScale)) - ((itemTexture[reforgeItem.type].Height * 0.5f) * num132)), new Rectangle(0, 0, itemTexture[reforgeItem.type].Width, itemTexture[reforgeItem.type].Height), reforgeItem.GetColor(color13), 0f, vector10, num132, SpriteEffects.None, 0f);
                                }
                                if (reforgeItem.stack > 1)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontItemStack, reforgeItem.stack.ToString(), new Vector2(num120 + (10f * Main.inventoryScale), num121 + (26f * Main.inventoryScale)), color13, 0f, vector10, num132, SpriteEffects.None, 0f);
                                }
                            }
                        }
                    }
                    else if (craftGuide)
                    {
                        if (((player[myPlayer].chest != -1) || (npcShop != 0)) || ((player[myPlayer].talkNPC == -1) || reforge))
                        {
                            craftGuide = false;
                            player[myPlayer].dropItemCheck();
                            Recipe.FindRecipes();
                        }
                        else
                        {
                            string str22;
                            int num133 = 0x49;
                            int num134 = 0x14b;
                            num134 += num118;
                            if (guideItem.type <= 0)
                            {
                                str22 = "Place a material here to show recipes";
                            }
                            else
                            {
                                str22 = "Showing recipes that use " + guideItem.name;
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontMouseText, "Required objects:", new Vector2((float) num133, (float) (num134 + 0x76)), color11, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                                int focusRecipe = Main.focusRecipe;
                                int num136 = 0;
                                for (int num137 = 0; num137 < Recipe.maxRequirements; num137++)
                                {
                                    int num138 = (num137 + 1) * 0x1a;
                                    if (recipe[availableRecipe[focusRecipe]].requiredTile[num137] == -1)
                                    {
                                        if ((num137 == 0) && !recipe[availableRecipe[focusRecipe]].needWater)
                                        {
                                            vector10 = new Vector2();
                                            this.spriteBatch.DrawString(fontMouseText, "None", new Vector2((float) num133, (float) ((num134 + 0x76) + num138)), color11, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                                        }
                                        break;
                                    }
                                    num136++;
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontMouseText, tileName[recipe[availableRecipe[focusRecipe]].requiredTile[num137]], new Vector2((float) num133, (float) ((num134 + 0x76) + num138)), color11, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                                }
                                if (recipe[availableRecipe[focusRecipe]].needWater)
                                {
                                    int num139 = (num136 + 1) * 0x1a;
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontMouseText, "None", new Vector2((float) num133, (float) ((num134 + 0x76) + num139)), color11, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, str22, new Vector2((float) (num133 + 50), (float) (num134 + 12)), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                            Color color14 = new Color(100, 100, 100, 100);
                            if (((mouseX >= num133) && (mouseX <= (num133 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num134) && (mouseY <= (num134 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                            {
                                player[myPlayer].mouseInterface = true;
                                craftingHide = true;
                                if (Main.mouseItem.material || (Main.mouseItem.type == 0))
                                {
                                    if (mouseLeftRelease && mouseLeft)
                                    {
                                        Item item6 = Main.mouseItem;
                                        Main.mouseItem = guideItem;
                                        guideItem = item6;
                                        if ((guideItem.type == 0) || (guideItem.stack < 1))
                                        {
                                            guideItem = new Item();
                                        }
                                        if ((Main.mouseItem.IsTheSameAs(guideItem) && (guideItem.stack != guideItem.maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                        {
                                            if ((Main.mouseItem.stack + guideItem.stack) <= Main.mouseItem.maxStack)
                                            {
                                                guideItem.stack += Main.mouseItem.stack;
                                                Main.mouseItem.stack = 0;
                                            }
                                            else
                                            {
                                                int num140 = Main.mouseItem.maxStack - guideItem.stack;
                                                guideItem.stack += num140;
                                                Main.mouseItem.stack -= num140;
                                            }
                                        }
                                        if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                        {
                                            Main.mouseItem = new Item();
                                        }
                                        if ((Main.mouseItem.type > 0) || (guideItem.type > 0))
                                        {
                                            Recipe.FindRecipes();
                                            PlaySound(7, -1, -1, 1);
                                        }
                                    }
                                    else if ((((stackSplit <= 1) && mouseRight) && (Main.mouseItem.IsTheSameAs(guideItem) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                                    {
                                        if (Main.mouseItem.type == 0)
                                        {
                                            Main.mouseItem = (Item) guideItem.Clone();
                                            Main.mouseItem.stack = 0;
                                        }
                                        Main.mouseItem.stack++;
                                        guideItem.stack--;
                                        if (guideItem.stack <= 0)
                                        {
                                            guideItem = new Item();
                                        }
                                        Recipe.FindRecipes();
                                        soundInstanceMenuTick.Stop();
                                        soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                        PlaySound(12, -1, -1, 1);
                                        if (stackSplit == 0)
                                        {
                                            stackSplit = 15;
                                        }
                                        else
                                        {
                                            stackSplit = stackDelay;
                                        }
                                    }
                                }
                                cursorText = guideItem.name;
                                toolTip = (Item) guideItem.Clone();
                                if (guideItem.stack > 1)
                                {
                                    obj2 = cursorText;
                                    cursorText = string.Concat(new object[] { obj2, " (", guideItem.stack, ")" });
                                }
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(inventoryBack4Texture, new Vector2((float) num133, (float) num134), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                            color14 = Color.White;
                            if ((guideItem.type > 0) && (guideItem.stack > 0))
                            {
                                float num141 = 1f;
                                if ((itemTexture[guideItem.type].Width > 0x20) || (itemTexture[guideItem.type].Height > 0x20))
                                {
                                    if (itemTexture[guideItem.type].Width > itemTexture[guideItem.type].Height)
                                    {
                                        num141 = 32f / ((float) itemTexture[guideItem.type].Width);
                                    }
                                    else
                                    {
                                        num141 = 32f / ((float) itemTexture[guideItem.type].Height);
                                    }
                                }
                                num141 *= Main.inventoryScale;
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[guideItem.type], new Vector2((num133 + (26f * Main.inventoryScale)) - ((itemTexture[guideItem.type].Width * 0.5f) * num141), (num134 + (26f * Main.inventoryScale)) - ((itemTexture[guideItem.type].Height * 0.5f) * num141)), new Rectangle(0, 0, itemTexture[guideItem.type].Width, itemTexture[guideItem.type].Height), guideItem.GetAlpha(color14), 0f, vector10, num141, SpriteEffects.None, 0f);
                                color34 = new Color();
                                if (guideItem.color != color34)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[guideItem.type], new Vector2((num133 + (26f * Main.inventoryScale)) - ((itemTexture[guideItem.type].Width * 0.5f) * num141), (num134 + (26f * Main.inventoryScale)) - ((itemTexture[guideItem.type].Height * 0.5f) * num141)), new Rectangle(0, 0, itemTexture[guideItem.type].Width, itemTexture[guideItem.type].Height), guideItem.GetColor(color14), 0f, vector10, num141, SpriteEffects.None, 0f);
                                }
                                if (guideItem.stack > 1)
                                {
                                    vector10 = new Vector2();
                                    this.spriteBatch.DrawString(fontItemStack, guideItem.stack.ToString(), new Vector2(num133 + (10f * Main.inventoryScale), num134 + (26f * Main.inventoryScale)), color14, 0f, vector10, num141, SpriteEffects.None, 0f);
                                }
                            }
                        }
                    }
                    if (!reforge)
                    {
                        if (numAvailableRecipes > 0)
                        {
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, "Crafting", new Vector2(76f, (float) (0x19e + num118)), color11, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        }
                        for (int num142 = 0; num142 < Recipe.maxRecipes; num142++)
                        {
                            Main.inventoryScale = 100f / (Math.Abs(availableRecipeY[num142]) + 100f);
                            if (Main.inventoryScale < 0.75)
                            {
                                Main.inventoryScale = 0.75f;
                            }
                            if (availableRecipeY[num142] < ((num142 - Main.focusRecipe) * 0x41))
                            {
                                if (availableRecipeY[num142] == 0f)
                                {
                                    PlaySound(12, -1, -1, 1);
                                }
                                availableRecipeY[num142] += 6.5f;
                            }
                            else if (availableRecipeY[num142] > ((num142 - Main.focusRecipe) * 0x41))
                            {
                                if (availableRecipeY[num142] == 0f)
                                {
                                    PlaySound(12, -1, -1, 1);
                                }
                                availableRecipeY[num142] -= 6.5f;
                            }
                            if ((num142 < numAvailableRecipes) && (Math.Abs(availableRecipeY[num142]) <= num119))
                            {
                                int num143 = (int) (46f - (26f * Main.inventoryScale));
                                int num144 = ((int) ((410f + (availableRecipeY[num142] * Main.inventoryScale)) - (30f * Main.inventoryScale))) + num118;
                                double num145 = color2.A + 50;
                                double num146 = 255.0;
                                if (Math.Abs(availableRecipeY[num142]) > (num119 - 100))
                                {
                                    num145 = (150f * (100f - (Math.Abs(availableRecipeY[num142]) - (num119 - 100)))) * 0.01;
                                    num146 = (255f * (100f - (Math.Abs(availableRecipeY[num142]) - (num119 - 100)))) * 0.01;
                                }
                                new Color((byte) num145, (byte) num145, (byte) num145, (byte) num145);
                                Color color15 = new Color((int) ((byte) num146), (int) ((byte) num146), (int) ((byte) num146), (int) ((byte) num146));
                                if (((mouseX >= num143) && (mouseX <= (num143 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num144) && (mouseY <= (num144 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                                {
                                    player[myPlayer].mouseInterface = true;
                                    if ((Main.focusRecipe == num142) && (guideItem.type == 0))
                                    {
                                        if ((Main.mouseItem.type == 0) || (Main.mouseItem.IsTheSameAs(recipe[availableRecipe[num142]].createItem) && ((Main.mouseItem.stack + recipe[availableRecipe[num142]].createItem.stack) <= Main.mouseItem.maxStack)))
                                        {
                                            if (mouseLeftRelease && mouseLeft)
                                            {
                                                int stack = Main.mouseItem.stack;
                                                Main.mouseItem = (Item) recipe[availableRecipe[num142]].createItem.Clone();
                                                Main.mouseItem.Prefix(-1);
                                                Main.mouseItem.stack += stack;
                                                Main.mouseItem.position.X = (player[myPlayer].position.X + (player[myPlayer].width / 2)) - (Main.mouseItem.width / 2);
                                                Main.mouseItem.position.Y = (player[myPlayer].position.Y + (player[myPlayer].height / 2)) - (Main.mouseItem.height / 2);
                                                ItemText.NewText(Main.mouseItem, recipe[availableRecipe[num142]].createItem.stack);
                                                recipe[availableRecipe[num142]].Create();
                                                if ((Main.mouseItem.type > 0) || (recipe[availableRecipe[num142]].createItem.type > 0))
                                                {
                                                    PlaySound(7, -1, -1, 1);
                                                }
                                            }
                                            else if (((stackSplit <= 1) && mouseRight) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                                            {
                                                if (stackSplit == 0)
                                                {
                                                    stackSplit = 15;
                                                }
                                                else
                                                {
                                                    stackSplit = stackDelay;
                                                }
                                                int num148 = Main.mouseItem.stack;
                                                Main.mouseItem = (Item) recipe[availableRecipe[num142]].createItem.Clone();
                                                Main.mouseItem.stack += num148;
                                                Main.mouseItem.position.X = (player[myPlayer].position.X + (player[myPlayer].width / 2)) - (Main.mouseItem.width / 2);
                                                Main.mouseItem.position.Y = (player[myPlayer].position.Y + (player[myPlayer].height / 2)) - (Main.mouseItem.height / 2);
                                                ItemText.NewText(Main.mouseItem, recipe[availableRecipe[num142]].createItem.stack);
                                                recipe[availableRecipe[num142]].Create();
                                                if ((Main.mouseItem.type > 0) || (recipe[availableRecipe[num142]].createItem.type > 0))
                                                {
                                                    PlaySound(7, -1, -1, 1);
                                                }
                                            }
                                        }
                                    }
                                    else if (mouseLeftRelease && mouseLeft)
                                    {
                                        Main.focusRecipe = num142;
                                    }
                                    craftingHide = true;
                                    cursorText = recipe[availableRecipe[num142]].createItem.name;
                                    toolTip = (Item) recipe[availableRecipe[num142]].createItem.Clone();
                                    if (recipe[availableRecipe[num142]].createItem.stack > 1)
                                    {
                                        obj2 = cursorText;
                                        cursorText = string.Concat(new object[] { obj2, " (", recipe[availableRecipe[num142]].createItem.stack, ")" });
                                    }
                                }
                                if (numAvailableRecipes > 0)
                                {
                                    num145 -= 50.0;
                                    if (num145 < 0.0)
                                    {
                                        num145 = 0.0;
                                    }
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(inventoryBack4Texture, new Vector2((float) num143, (float) num144), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), new Color((byte) num145, (byte) num145, (byte) num145, (byte) num145), 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                                    if ((recipe[availableRecipe[num142]].createItem.type > 0) && (recipe[availableRecipe[num142]].createItem.stack > 0))
                                    {
                                        float num149 = 1f;
                                        if ((itemTexture[recipe[availableRecipe[num142]].createItem.type].Width > 0x20) || (itemTexture[recipe[availableRecipe[num142]].createItem.type].Height > 0x20))
                                        {
                                            if (itemTexture[recipe[availableRecipe[num142]].createItem.type].Width > itemTexture[recipe[availableRecipe[num142]].createItem.type].Height)
                                            {
                                                num149 = 32f / ((float) itemTexture[recipe[availableRecipe[num142]].createItem.type].Width);
                                            }
                                            else
                                            {
                                                num149 = 32f / ((float) itemTexture[recipe[availableRecipe[num142]].createItem.type].Height);
                                            }
                                        }
                                        num149 *= Main.inventoryScale;
                                        vector10 = new Vector2();
                                        this.spriteBatch.Draw(itemTexture[recipe[availableRecipe[num142]].createItem.type], new Vector2((num143 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[num142]].createItem.type].Width * 0.5f) * num149), (num144 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[num142]].createItem.type].Height * 0.5f) * num149)), new Rectangle(0, 0, itemTexture[recipe[availableRecipe[num142]].createItem.type].Width, itemTexture[recipe[availableRecipe[num142]].createItem.type].Height), recipe[availableRecipe[num142]].createItem.GetAlpha(color15), 0f, vector10, num149, SpriteEffects.None, 0f);
                                        color34 = new Color();
                                        if (recipe[availableRecipe[num142]].createItem.color != color34)
                                        {
                                            vector10 = new Vector2();
                                            this.spriteBatch.Draw(itemTexture[recipe[availableRecipe[num142]].createItem.type], new Vector2((num143 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[num142]].createItem.type].Width * 0.5f) * num149), (num144 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[num142]].createItem.type].Height * 0.5f) * num149)), new Rectangle(0, 0, itemTexture[recipe[availableRecipe[num142]].createItem.type].Width, itemTexture[recipe[availableRecipe[num142]].createItem.type].Height), recipe[availableRecipe[num142]].createItem.GetColor(color15), 0f, vector10, num149, SpriteEffects.None, 0f);
                                        }
                                        if (recipe[availableRecipe[num142]].createItem.stack > 1)
                                        {
                                            vector10 = new Vector2();
                                            this.spriteBatch.DrawString(fontItemStack, recipe[availableRecipe[num142]].createItem.stack.ToString(), new Vector2(num143 + (10f * Main.inventoryScale), num144 + (26f * Main.inventoryScale)), color15, 0f, vector10, num149, SpriteEffects.None, 0f);
                                        }
                                    }
                                }
                            }
                        }
                        if (numAvailableRecipes > 0)
                        {
                            for (int num150 = 0; num150 < Recipe.maxRequirements; num150++)
                            {
                                if (recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type == 0)
                                {
                                    break;
                                }
                                int num151 = 80 + (num150 * 40);
                                int num152 = 380 + num118;
                                double num153 = color2.A + 50;
                                double num154 = 255.0;
                                Color color16 = Color.White;
                                Color color17 = Color.White;
                                num153 = (color2.A + 50) - (Math.Abs(availableRecipeY[Main.focusRecipe]) * 2f);
                                num154 = 255f - (Math.Abs(availableRecipeY[Main.focusRecipe]) * 2f);
                                if (num153 < 0.0)
                                {
                                    num153 = 0.0;
                                }
                                if (num154 < 0.0)
                                {
                                    num154 = 0.0;
                                }
                                color16.R = (byte) num153;
                                color16.G = (byte) num153;
                                color16.B = (byte) num153;
                                color16.A = (byte) num153;
                                color17.R = (byte) num154;
                                color17.G = (byte) num154;
                                color17.B = (byte) num154;
                                color17.A = (byte) num154;
                                Main.inventoryScale = 0.6f;
                                if (num153 == 0.0)
                                {
                                    break;
                                }
                                if (((mouseX >= num151) && (mouseX <= (num151 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num152) && (mouseY <= (num152 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                                {
                                    craftingHide = true;
                                    player[myPlayer].mouseInterface = true;
                                    cursorText = recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].name;
                                    toolTip = (Item) recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].Clone();
                                    if (recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].stack > 1)
                                    {
                                        obj2 = cursorText;
                                        cursorText = string.Concat(new object[] { obj2, " (", recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].stack, ")" });
                                    }
                                }
                                num153 -= 50.0;
                                if (num153 < 0.0)
                                {
                                    num153 = 0.0;
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBack4Texture, new Vector2((float) num151, (float) num152), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), new Color((byte) num153, (byte) num153, (byte) num153, (byte) num153), 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                                if ((recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type > 0) && (recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].stack > 0))
                                {
                                    float num155 = 1f;
                                    if ((itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Width > 0x20) || (itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Height > 0x20))
                                    {
                                        if (itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Width > itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Height)
                                        {
                                            num155 = 32f / ((float) itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Width);
                                        }
                                        else
                                        {
                                            num155 = 32f / ((float) itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Height);
                                        }
                                    }
                                    num155 *= Main.inventoryScale;
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type], new Vector2((num151 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Width * 0.5f) * num155), (num152 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Height * 0.5f) * num155)), new Rectangle(0, 0, itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Width, itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Height), recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].GetAlpha(color17), 0f, vector10, num155, SpriteEffects.None, 0f);
                                    color34 = new Color();
                                    if (recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].color != color34)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.Draw(itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type], new Vector2((num151 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Width * 0.5f) * num155), (num152 + (26f * Main.inventoryScale)) - ((itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Height * 0.5f) * num155)), new Rectangle(0, 0, itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Width, itemTexture[recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].type].Height), recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].GetColor(color17), 0f, vector10, num155, SpriteEffects.None, 0f);
                                    }
                                    if (recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].stack > 1)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.DrawString(fontItemStack, recipe[availableRecipe[Main.focusRecipe]].requiredItem[num150].stack.ToString(), new Vector2(num151 + (10f * Main.inventoryScale), num152 + (26f * Main.inventoryScale)), color17, 0f, vector10, num155, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, "Coins", new Vector2(496f, 84f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 0.75f, SpriteEffects.None, 0f);
                    Main.inventoryScale = 0.6f;
                    for (int num156 = 0; num156 < 4; num156++)
                    {
                        int num157 = 0x1f1;
                        int num158 = (int) ((85f + ((num156 * 0x38) * Main.inventoryScale)) + 20f);
                        int num159 = num156 + 40;
                        Color color18 = new Color(100, 100, 100, 100);
                        if (((mouseX >= num157) && (mouseX <= (num157 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num158) && (mouseY <= (num158 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                        {
                            player[myPlayer].mouseInterface = true;
                            if (mouseLeftRelease && mouseLeft)
                            {
                                if (keyState.IsKeyDown(Keys.LeftShift))
                                {
                                    if (player[myPlayer].inventory[num159].type > 0)
                                    {
                                        if (npcShop > 0)
                                        {
                                            if (player[myPlayer].SellItem(player[myPlayer].inventory[num159].value, player[myPlayer].inventory[num159].stack))
                                            {
                                                this.shop[npcShop].AddShop(player[myPlayer].inventory[num159]);
                                                player[myPlayer].inventory[num159].SetDefaults(0, false);
                                                PlaySound(0x12, -1, -1, 1);
                                            }
                                            else if (player[myPlayer].inventory[num159].value == 0)
                                            {
                                                this.shop[npcShop].AddShop(player[myPlayer].inventory[num159]);
                                                player[myPlayer].inventory[num159].SetDefaults(0, false);
                                                PlaySound(7, -1, -1, 1);
                                            }
                                        }
                                        else
                                        {
                                            Recipe.FindRecipes();
                                            PlaySound(7, -1, -1, 1);
                                            trashItem = (Item) player[myPlayer].inventory[num159].Clone();
                                            player[myPlayer].inventory[num159].SetDefaults(0, false);
                                        }
                                    }
                                }
                                else if (((player[myPlayer].selectedItem != num159) || (player[myPlayer].itemAnimation <= 0)) && (((Main.mouseItem.type == 0) || (Main.mouseItem.type == 0x47)) || (((Main.mouseItem.type == 0x48) || (Main.mouseItem.type == 0x49)) || (Main.mouseItem.type == 0x4a))))
                                {
                                    Item item7 = Main.mouseItem;
                                    Main.mouseItem = player[myPlayer].inventory[num159];
                                    player[myPlayer].inventory[num159] = item7;
                                    if ((player[myPlayer].inventory[num159].type == 0) || (player[myPlayer].inventory[num159].stack < 1))
                                    {
                                        player[myPlayer].inventory[num159] = new Item();
                                    }
                                    if ((Main.mouseItem.IsTheSameAs(player[myPlayer].inventory[num159]) && (player[myPlayer].inventory[num159].stack != player[myPlayer].inventory[num159].maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                    {
                                        if ((Main.mouseItem.stack + player[myPlayer].inventory[num159].stack) <= Main.mouseItem.maxStack)
                                        {
                                            Item item14 = player[myPlayer].inventory[num159];
                                            item14.stack += Main.mouseItem.stack;
                                            Main.mouseItem.stack = 0;
                                        }
                                        else
                                        {
                                            int num160 = Main.mouseItem.maxStack - player[myPlayer].inventory[num159].stack;
                                            Item item15 = player[myPlayer].inventory[num159];
                                            item15.stack += num160;
                                            Main.mouseItem.stack -= num160;
                                        }
                                    }
                                    if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                    {
                                        Main.mouseItem = new Item();
                                    }
                                    if ((Main.mouseItem.type > 0) || (player[myPlayer].inventory[num159].type > 0))
                                    {
                                        PlaySound(7, -1, -1, 1);
                                    }
                                    Recipe.FindRecipes();
                                }
                            }
                            else if ((((stackSplit <= 1) && mouseRight) && (Main.mouseItem.IsTheSameAs(player[myPlayer].inventory[num159]) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                            {
                                if (Main.mouseItem.type == 0)
                                {
                                    Main.mouseItem = (Item) player[myPlayer].inventory[num159].Clone();
                                    Main.mouseItem.stack = 0;
                                }
                                Main.mouseItem.stack++;
                                Item item16 = player[myPlayer].inventory[num159];
                                item16.stack--;
                                if (player[myPlayer].inventory[num159].stack <= 0)
                                {
                                    player[myPlayer].inventory[num159] = new Item();
                                }
                                Recipe.FindRecipes();
                                soundInstanceMenuTick.Stop();
                                soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                PlaySound(12, -1, -1, 1);
                                if (stackSplit == 0)
                                {
                                    stackSplit = 15;
                                }
                                else
                                {
                                    stackSplit = stackDelay;
                                }
                            }
                            cursorText = player[myPlayer].inventory[num159].name;
                            toolTip = (Item) player[myPlayer].inventory[num159].Clone();
                            if (player[myPlayer].inventory[num159].stack > 1)
                            {
                                obj2 = cursorText;
                                cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].inventory[num159].stack, ")" });
                            }
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(inventoryBackTexture, new Vector2((float) num157, (float) num158), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                        color18 = Color.White;
                        if ((player[myPlayer].inventory[num159].type > 0) && (player[myPlayer].inventory[num159].stack > 0))
                        {
                            float num161 = 1f;
                            if ((itemTexture[player[myPlayer].inventory[num159].type].Width > 0x20) || (itemTexture[player[myPlayer].inventory[num159].type].Height > 0x20))
                            {
                                if (itemTexture[player[myPlayer].inventory[num159].type].Width > itemTexture[player[myPlayer].inventory[num159].type].Height)
                                {
                                    num161 = 32f / ((float) itemTexture[player[myPlayer].inventory[num159].type].Width);
                                }
                                else
                                {
                                    num161 = 32f / ((float) itemTexture[player[myPlayer].inventory[num159].type].Height);
                                }
                            }
                            num161 *= Main.inventoryScale;
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num159].type], new Vector2((num157 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num159].type].Width * 0.5f) * num161), (num158 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num159].type].Height * 0.5f) * num161)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num159].type].Width, itemTexture[player[myPlayer].inventory[num159].type].Height), player[myPlayer].inventory[num159].GetAlpha(color18), 0f, vector10, num161, SpriteEffects.None, 0f);
                            color34 = new Color();
                            if (player[myPlayer].inventory[num159].color != color34)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num159].type], new Vector2((num157 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num159].type].Width * 0.5f) * num161), (num158 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num159].type].Height * 0.5f) * num161)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num159].type].Width, itemTexture[player[myPlayer].inventory[num159].type].Height), player[myPlayer].inventory[num159].GetColor(color18), 0f, vector10, num161, SpriteEffects.None, 0f);
                            }
                            if (player[myPlayer].inventory[num159].stack > 1)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontItemStack, player[myPlayer].inventory[num159].stack.ToString(), new Vector2(num157 + (10f * Main.inventoryScale), num158 + (26f * Main.inventoryScale)), color18, 0f, vector10, num161, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, "Ammo", new Vector2(532f, 84f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 0.75f, SpriteEffects.None, 0f);
                    Main.inventoryScale = 0.6f;
                    for (int num162 = 0; num162 < 4; num162++)
                    {
                        int num163 = 0x216;
                        int num164 = (int) ((85f + ((num162 * 0x38) * Main.inventoryScale)) + 20f);
                        int num165 = 0x2c + num162;
                        Color color19 = new Color(100, 100, 100, 100);
                        if (((mouseX >= num163) && (mouseX <= (num163 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num164) && (mouseY <= (num164 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                        {
                            player[myPlayer].mouseInterface = true;
                            if (mouseLeftRelease && mouseLeft)
                            {
                                if (keyState.IsKeyDown(Keys.LeftShift))
                                {
                                    if (player[myPlayer].inventory[num165].type > 0)
                                    {
                                        if (npcShop > 0)
                                        {
                                            if (player[myPlayer].SellItem(player[myPlayer].inventory[num165].value, player[myPlayer].inventory[num165].stack))
                                            {
                                                this.shop[npcShop].AddShop(player[myPlayer].inventory[num165]);
                                                player[myPlayer].inventory[num165].SetDefaults(0, false);
                                                PlaySound(0x12, -1, -1, 1);
                                            }
                                            else if (player[myPlayer].inventory[num165].value == 0)
                                            {
                                                this.shop[npcShop].AddShop(player[myPlayer].inventory[num165]);
                                                player[myPlayer].inventory[num165].SetDefaults(0, false);
                                                PlaySound(7, -1, -1, 1);
                                            }
                                        }
                                        else
                                        {
                                            Recipe.FindRecipes();
                                            PlaySound(7, -1, -1, 1);
                                            trashItem = (Item) player[myPlayer].inventory[num165].Clone();
                                            player[myPlayer].inventory[num165].SetDefaults(0, false);
                                        }
                                    }
                                }
                                else if (((player[myPlayer].selectedItem != num165) || (player[myPlayer].itemAnimation <= 0)) && (((Main.mouseItem.type == 0) || (Main.mouseItem.ammo > 0)) || (Main.mouseItem.type == 530)))
                                {
                                    Item item8 = Main.mouseItem;
                                    Main.mouseItem = player[myPlayer].inventory[num165];
                                    player[myPlayer].inventory[num165] = item8;
                                    if ((player[myPlayer].inventory[num165].type == 0) || (player[myPlayer].inventory[num165].stack < 1))
                                    {
                                        player[myPlayer].inventory[num165] = new Item();
                                    }
                                    if ((Main.mouseItem.IsTheSameAs(player[myPlayer].inventory[num165]) && (player[myPlayer].inventory[num165].stack != player[myPlayer].inventory[num165].maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                    {
                                        if ((Main.mouseItem.stack + player[myPlayer].inventory[num165].stack) <= Main.mouseItem.maxStack)
                                        {
                                            Item item17 = player[myPlayer].inventory[num165];
                                            item17.stack += Main.mouseItem.stack;
                                            Main.mouseItem.stack = 0;
                                        }
                                        else
                                        {
                                            int num166 = Main.mouseItem.maxStack - player[myPlayer].inventory[num165].stack;
                                            Item item18 = player[myPlayer].inventory[num165];
                                            item18.stack += num166;
                                            Main.mouseItem.stack -= num166;
                                        }
                                    }
                                    if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                    {
                                        Main.mouseItem = new Item();
                                    }
                                    if ((Main.mouseItem.type > 0) || (player[myPlayer].inventory[num165].type > 0))
                                    {
                                        PlaySound(7, -1, -1, 1);
                                    }
                                    Recipe.FindRecipes();
                                }
                            }
                            else if ((((stackSplit <= 1) && mouseRight) && (Main.mouseItem.IsTheSameAs(player[myPlayer].inventory[num165]) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                            {
                                if (Main.mouseItem.type == 0)
                                {
                                    Main.mouseItem = (Item) player[myPlayer].inventory[num165].Clone();
                                    Main.mouseItem.stack = 0;
                                }
                                Main.mouseItem.stack++;
                                Item item19 = player[myPlayer].inventory[num165];
                                item19.stack--;
                                if (player[myPlayer].inventory[num165].stack <= 0)
                                {
                                    player[myPlayer].inventory[num165] = new Item();
                                }
                                Recipe.FindRecipes();
                                soundInstanceMenuTick.Stop();
                                soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                PlaySound(12, -1, -1, 1);
                                if (stackSplit == 0)
                                {
                                    stackSplit = 15;
                                }
                                else
                                {
                                    stackSplit = stackDelay;
                                }
                            }
                            cursorText = player[myPlayer].inventory[num165].name;
                            toolTip = (Item) player[myPlayer].inventory[num165].Clone();
                            if (player[myPlayer].inventory[num165].stack > 1)
                            {
                                obj2 = cursorText;
                                cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].inventory[num165].stack, ")" });
                            }
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(inventoryBackTexture, new Vector2((float) num163, (float) num164), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                        color19 = Color.White;
                        if ((player[myPlayer].inventory[num165].type > 0) && (player[myPlayer].inventory[num165].stack > 0))
                        {
                            float num167 = 1f;
                            if ((itemTexture[player[myPlayer].inventory[num165].type].Width > 0x20) || (itemTexture[player[myPlayer].inventory[num165].type].Height > 0x20))
                            {
                                if (itemTexture[player[myPlayer].inventory[num165].type].Width > itemTexture[player[myPlayer].inventory[num165].type].Height)
                                {
                                    num167 = 32f / ((float) itemTexture[player[myPlayer].inventory[num165].type].Width);
                                }
                                else
                                {
                                    num167 = 32f / ((float) itemTexture[player[myPlayer].inventory[num165].type].Height);
                                }
                            }
                            num167 *= Main.inventoryScale;
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num165].type], new Vector2((num163 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num165].type].Width * 0.5f) * num167), (num164 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num165].type].Height * 0.5f) * num167)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num165].type].Width, itemTexture[player[myPlayer].inventory[num165].type].Height), player[myPlayer].inventory[num165].GetAlpha(color19), 0f, vector10, num167, SpriteEffects.None, 0f);
                            color34 = new Color();
                            if (player[myPlayer].inventory[num165].color != color34)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num165].type], new Vector2((num163 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num165].type].Width * 0.5f) * num167), (num164 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].inventory[num165].type].Height * 0.5f) * num167)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num165].type].Width, itemTexture[player[myPlayer].inventory[num165].type].Height), player[myPlayer].inventory[num165].GetColor(color19), 0f, vector10, num167, SpriteEffects.None, 0f);
                            }
                            if (player[myPlayer].inventory[num165].stack > 1)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontItemStack, player[myPlayer].inventory[num165].stack.ToString(), new Vector2(num163 + (10f * Main.inventoryScale), num164 + (26f * Main.inventoryScale)), color19, 0f, vector10, num167, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if ((npcShop > 0) && (!playerInventory || (player[myPlayer].talkNPC == -1)))
                    {
                        npcShop = 0;
                    }
                    if (npcShop > 0)
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, "Shop", new Vector2(284f, 210f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        Main.inventoryScale = 0.75f;
                        if (((mouseX > 0x49) && (mouseX < ((int) (73f + (280f * Main.inventoryScale))))) && ((mouseY > 210) && (mouseY < ((int) (210f + (224f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        for (int num168 = 0; num168 < 5; num168++)
                        {
                            for (int num169 = 0; num169 < 4; num169++)
                            {
                                int num170 = (int) (73f + ((num168 * 0x38) * Main.inventoryScale));
                                int num171 = (int) (210f + ((num169 * 0x38) * Main.inventoryScale));
                                int num172 = num168 + (num169 * 5);
                                Color color20 = new Color(100, 100, 100, 100);
                                if (((mouseX >= num170) && (mouseX <= (num170 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num171) && (mouseY <= (num171 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                                {
                                    player[myPlayer].mouseInterface = true;
                                    if (mouseLeftRelease && mouseLeft)
                                    {
                                        if (Main.mouseItem.type == 0)
                                        {
                                            if (((player[myPlayer].selectedItem != num172) || (player[myPlayer].itemAnimation <= 0)) && player[myPlayer].BuyItem(this.shop[npcShop].item[num172].value))
                                            {
                                                if (this.shop[npcShop].item[num172].buyOnce)
                                                {
                                                    int prefix = this.shop[npcShop].item[num172].prefix;
                                                    Main.mouseItem.SetDefaults(this.shop[npcShop].item[num172].name);
                                                    Main.mouseItem.Prefix(prefix);
                                                }
                                                else
                                                {
                                                    Main.mouseItem.SetDefaults(this.shop[npcShop].item[num172].name);
                                                    Main.mouseItem.Prefix(-1);
                                                }
                                                Main.mouseItem.position.X = (player[myPlayer].position.X + (player[myPlayer].width / 2)) - (Main.mouseItem.width / 2);
                                                Main.mouseItem.position.Y = (player[myPlayer].position.Y + (player[myPlayer].height / 2)) - (Main.mouseItem.height / 2);
                                                ItemText.NewText(Main.mouseItem, Main.mouseItem.stack);
                                                if (this.shop[npcShop].item[num172].buyOnce)
                                                {
                                                    Item item20 = this.shop[npcShop].item[num172];
                                                    item20.stack--;
                                                    if (this.shop[npcShop].item[num172].stack <= 0)
                                                    {
                                                        this.shop[npcShop].item[num172].SetDefaults(0, false);
                                                    }
                                                }
                                                PlaySound(0x12, -1, -1, 1);
                                            }
                                        }
                                        else if (this.shop[npcShop].item[num172].type == 0)
                                        {
                                            if (player[myPlayer].SellItem(Main.mouseItem.value, Main.mouseItem.stack))
                                            {
                                                this.shop[npcShop].AddShop(Main.mouseItem);
                                                Main.mouseItem.stack = 0;
                                                Main.mouseItem.type = 0;
                                                PlaySound(0x12, -1, -1, 1);
                                            }
                                            else if (Main.mouseItem.value == 0)
                                            {
                                                this.shop[npcShop].AddShop(Main.mouseItem);
                                                Main.mouseItem.stack = 0;
                                                Main.mouseItem.type = 0;
                                                PlaySound(7, -1, -1, 1);
                                            }
                                        }
                                    }
                                    else if (((((stackSplit <= 1) && mouseRight) && (Main.mouseItem.IsTheSameAs(this.shop[npcShop].item[num172]) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0))) && player[myPlayer].BuyItem(this.shop[npcShop].item[num172].value))
                                    {
                                        PlaySound(0x12, -1, -1, 1);
                                        if (Main.mouseItem.type == 0)
                                        {
                                            Main.mouseItem.SetDefaults(this.shop[npcShop].item[num172].name);
                                            Main.mouseItem.stack = 0;
                                        }
                                        Main.mouseItem.stack++;
                                        if (stackSplit == 0)
                                        {
                                            stackSplit = 15;
                                        }
                                        else
                                        {
                                            stackSplit = stackDelay;
                                        }
                                        if (this.shop[npcShop].item[num172].buyOnce)
                                        {
                                            Item item21 = this.shop[npcShop].item[num172];
                                            item21.stack--;
                                            if (this.shop[npcShop].item[num172].stack <= 0)
                                            {
                                                this.shop[npcShop].item[num172].SetDefaults(0, false);
                                            }
                                        }
                                    }
                                    cursorText = this.shop[npcShop].item[num172].name;
                                    toolTip = (Item) this.shop[npcShop].item[num172].Clone();
                                    toolTip.buy = true;
                                    if (this.shop[npcShop].item[num172].stack > 1)
                                    {
                                        obj2 = cursorText;
                                        cursorText = string.Concat(new object[] { obj2, " (", this.shop[npcShop].item[num172].stack, ")" });
                                    }
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBack6Texture, new Vector2((float) num170, (float) num171), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                                color20 = Color.White;
                                if ((this.shop[npcShop].item[num172].type > 0) && (this.shop[npcShop].item[num172].stack > 0))
                                {
                                    float num174 = 1f;
                                    if ((itemTexture[this.shop[npcShop].item[num172].type].Width > 0x20) || (itemTexture[this.shop[npcShop].item[num172].type].Height > 0x20))
                                    {
                                        if (itemTexture[this.shop[npcShop].item[num172].type].Width > itemTexture[this.shop[npcShop].item[num172].type].Height)
                                        {
                                            num174 = 32f / ((float) itemTexture[this.shop[npcShop].item[num172].type].Width);
                                        }
                                        else
                                        {
                                            num174 = 32f / ((float) itemTexture[this.shop[npcShop].item[num172].type].Height);
                                        }
                                    }
                                    num174 *= Main.inventoryScale;
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[this.shop[npcShop].item[num172].type], new Vector2((num170 + (26f * Main.inventoryScale)) - ((itemTexture[this.shop[npcShop].item[num172].type].Width * 0.5f) * num174), (num171 + (26f * Main.inventoryScale)) - ((itemTexture[this.shop[npcShop].item[num172].type].Height * 0.5f) * num174)), new Rectangle(0, 0, itemTexture[this.shop[npcShop].item[num172].type].Width, itemTexture[this.shop[npcShop].item[num172].type].Height), this.shop[npcShop].item[num172].GetAlpha(color20), 0f, vector10, num174, SpriteEffects.None, 0f);
                                    color34 = new Color();
                                    if (this.shop[npcShop].item[num172].color != color34)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.Draw(itemTexture[this.shop[npcShop].item[num172].type], new Vector2((num170 + (26f * Main.inventoryScale)) - ((itemTexture[this.shop[npcShop].item[num172].type].Width * 0.5f) * num174), (num171 + (26f * Main.inventoryScale)) - ((itemTexture[this.shop[npcShop].item[num172].type].Height * 0.5f) * num174)), new Rectangle(0, 0, itemTexture[this.shop[npcShop].item[num172].type].Width, itemTexture[this.shop[npcShop].item[num172].type].Height), this.shop[npcShop].item[num172].GetColor(color20), 0f, vector10, num174, SpriteEffects.None, 0f);
                                    }
                                    if (this.shop[npcShop].item[num172].stack > 1)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.DrawString(fontItemStack, this.shop[npcShop].item[num172].stack.ToString(), new Vector2(num170 + (10f * Main.inventoryScale), num171 + (26f * Main.inventoryScale)), color20, 0f, vector10, num174, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                    if ((player[myPlayer].chest > -1) && (tile[player[myPlayer].chestX, player[myPlayer].chestY].type != 0x15))
                    {
                        player[myPlayer].chest = -1;
                    }
                    if (player[myPlayer].chest != -1)
                    {
                        Main.inventoryScale = 0.75f;
                        if (((mouseX > 0x49) && (mouseX < ((int) (73f + (280f * Main.inventoryScale))))) && ((mouseY > 210) && (mouseY < ((int) (210f + (224f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        for (int num175 = 0; num175 < 3; num175++)
                        {
                            int num176 = 0x11e;
                            int num177 = 250;
                            float chestLootScale = this.chestLootScale;
                            string str23 = "Loot All";
                            switch (num175)
                            {
                                case 1:
                                    num177 += 0x1a;
                                    chestLootScale = this.chestDepositScale;
                                    str23 = "Deposit All";
                                    break;

                                case 2:
                                    num177 += 0x34;
                                    chestLootScale = this.chestStackScale;
                                    str23 = "Quick Stack";
                                    break;
                            }
                            Vector2 origin = (Vector2) (fontMouseText.MeasureString(str23) / 2f);
                            Color color21 = new Color((int) ((byte) (mouseTextColor * chestLootScale)), (int) ((byte) (mouseTextColor * chestLootScale)), (int) ((byte) (mouseTextColor * chestLootScale)), (int) ((byte) (mouseTextColor * chestLootScale)));
                            num176 += (int) (origin.X * chestLootScale);
                            this.spriteBatch.DrawString(fontMouseText, str23, new Vector2((float) num176, (float) num177), color21, 0f, origin, chestLootScale, SpriteEffects.None, 0f);
                            origin = (Vector2) (origin * chestLootScale);
                            if (((mouseX > (num176 - origin.X)) && (mouseX < (num176 + origin.X))) && ((mouseY > (num177 - origin.Y)) && (mouseY < (num177 + origin.Y))))
                            {
                                switch (num175)
                                {
                                    case 0:
                                        if (!this.chestLootHover)
                                        {
                                            PlaySound(12, -1, -1, 1);
                                        }
                                        this.chestLootHover = true;
                                        break;

                                    case 1:
                                        if (!this.chestDepositHover)
                                        {
                                            PlaySound(12, -1, -1, 1);
                                        }
                                        this.chestDepositHover = true;
                                        break;

                                    default:
                                        if (!this.chestStackHover)
                                        {
                                            PlaySound(12, -1, -1, 1);
                                        }
                                        this.chestStackHover = true;
                                        break;
                                }
                                player[myPlayer].mouseInterface = true;
                                chestLootScale += 0.05f;
                                if (mouseLeft && mouseLeftRelease)
                                {
                                    if (num175 == 0)
                                    {
                                        if (player[myPlayer].chest > -1)
                                        {
                                            for (int num179 = 0; num179 < 20; num179++)
                                            {
                                                if (chest[player[myPlayer].chest].item[num179].type > 0)
                                                {
                                                    chest[player[myPlayer].chest].item[num179] = player[myPlayer].GetItem(myPlayer, chest[player[myPlayer].chest].item[num179]);
                                                    if (netMode == 1)
                                                    {
                                                        NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num179, 0f, 0f, 0);
                                                    }
                                                }
                                            }
                                        }
                                        else if (player[myPlayer].chest == -3)
                                        {
                                            for (int num180 = 0; num180 < 20; num180++)
                                            {
                                                if (player[myPlayer].bank2[num180].type > 0)
                                                {
                                                    player[myPlayer].bank2[num180] = player[myPlayer].GetItem(myPlayer, player[myPlayer].bank2[num180]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            for (int num181 = 0; num181 < 20; num181++)
                                            {
                                                if (player[myPlayer].bank[num181].type > 0)
                                                {
                                                    player[myPlayer].bank[num181] = player[myPlayer].GetItem(myPlayer, player[myPlayer].bank[num181]);
                                                }
                                            }
                                        }
                                    }
                                    else if (num175 == 1)
                                    {
                                        for (int num182 = 40; num182 >= 10; num182--)
                                        {
                                            if ((player[myPlayer].inventory[num182].stack > 0) && (player[myPlayer].inventory[num182].type > 0))
                                            {
                                                if (player[myPlayer].inventory[num182].maxStack > 1)
                                                {
                                                    for (int num183 = 0; num183 < 20; num183++)
                                                    {
                                                        if (player[myPlayer].chest > -1)
                                                        {
                                                            if ((chest[player[myPlayer].chest].item[num183].stack < chest[player[myPlayer].chest].item[num183].maxStack) && player[myPlayer].inventory[num182].IsTheSameAs(chest[player[myPlayer].chest].item[num183]))
                                                            {
                                                                int num184 = player[myPlayer].inventory[num182].stack;
                                                                if ((player[myPlayer].inventory[num182].stack + chest[player[myPlayer].chest].item[num183].stack) > chest[player[myPlayer].chest].item[num183].maxStack)
                                                                {
                                                                    num184 = chest[player[myPlayer].chest].item[num183].maxStack - chest[player[myPlayer].chest].item[num183].stack;
                                                                }
                                                                Item item22 = player[myPlayer].inventory[num182];
                                                                item22.stack -= num184;
                                                                Item item23 = chest[player[myPlayer].chest].item[num183];
                                                                item23.stack += num184;
                                                                ChestCoins();
                                                                PlaySound(7, -1, -1, 1);
                                                                if (player[myPlayer].inventory[num182].stack <= 0)
                                                                {
                                                                    player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                    if (netMode == 1)
                                                                    {
                                                                        NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num183, 0f, 0f, 0);
                                                                    }
                                                                    break;
                                                                }
                                                                if (chest[player[myPlayer].chest].item[num183].type == 0)
                                                                {
                                                                    chest[player[myPlayer].chest].item[num183] = (Item) player[myPlayer].inventory[num182].Clone();
                                                                    player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                }
                                                                if (netMode == 1)
                                                                {
                                                                    NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num183, 0f, 0f, 0);
                                                                }
                                                            }
                                                        }
                                                        else if (player[myPlayer].chest == -3)
                                                        {
                                                            if ((player[myPlayer].bank2[num183].stack < player[myPlayer].bank2[num183].maxStack) && player[myPlayer].inventory[num182].IsTheSameAs(player[myPlayer].bank2[num183]))
                                                            {
                                                                int num185 = player[myPlayer].inventory[num182].stack;
                                                                if ((player[myPlayer].inventory[num182].stack + player[myPlayer].bank2[num183].stack) > player[myPlayer].bank2[num183].maxStack)
                                                                {
                                                                    num185 = player[myPlayer].bank2[num183].maxStack - player[myPlayer].bank2[num183].stack;
                                                                }
                                                                Item item24 = player[myPlayer].inventory[num182];
                                                                item24.stack -= num185;
                                                                Item item25 = player[myPlayer].bank2[num183];
                                                                item25.stack += num185;
                                                                PlaySound(7, -1, -1, 1);
                                                                BankCoins();
                                                                if (player[myPlayer].inventory[num182].stack <= 0)
                                                                {
                                                                    player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                    break;
                                                                }
                                                                if (player[myPlayer].bank2[num183].type == 0)
                                                                {
                                                                    player[myPlayer].bank2[num183] = (Item) player[myPlayer].inventory[num182].Clone();
                                                                    player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                }
                                                            }
                                                        }
                                                        else if ((player[myPlayer].bank[num183].stack < player[myPlayer].bank[num183].maxStack) && player[myPlayer].inventory[num182].IsTheSameAs(player[myPlayer].bank[num183]))
                                                        {
                                                            int num186 = player[myPlayer].inventory[num182].stack;
                                                            if ((player[myPlayer].inventory[num182].stack + player[myPlayer].bank[num183].stack) > player[myPlayer].bank[num183].maxStack)
                                                            {
                                                                num186 = player[myPlayer].bank[num183].maxStack - player[myPlayer].bank[num183].stack;
                                                            }
                                                            Item item26 = player[myPlayer].inventory[num182];
                                                            item26.stack -= num186;
                                                            Item item27 = player[myPlayer].bank[num183];
                                                            item27.stack += num186;
                                                            PlaySound(7, -1, -1, 1);
                                                            BankCoins();
                                                            if (player[myPlayer].inventory[num182].stack <= 0)
                                                            {
                                                                player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                break;
                                                            }
                                                            if (player[myPlayer].bank[num183].type == 0)
                                                            {
                                                                player[myPlayer].bank[num183] = (Item) player[myPlayer].inventory[num182].Clone();
                                                                player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                            }
                                                        }
                                                    }
                                                }
                                                if (player[myPlayer].inventory[num182].stack > 0)
                                                {
                                                    if (player[myPlayer].chest > -1)
                                                    {
                                                        for (int num187 = 0; num187 < 20; num187++)
                                                        {
                                                            if (chest[player[myPlayer].chest].item[num187].stack == 0)
                                                            {
                                                                PlaySound(7, -1, -1, 1);
                                                                chest[player[myPlayer].chest].item[num187] = (Item) player[myPlayer].inventory[num182].Clone();
                                                                player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                if (netMode == 1)
                                                                {
                                                                    NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num187, 0f, 0f, 0);
                                                                }
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    else if (player[myPlayer].chest == -3)
                                                    {
                                                        for (int num188 = 0; num188 < 20; num188++)
                                                        {
                                                            if (player[myPlayer].bank2[num188].stack == 0)
                                                            {
                                                                PlaySound(7, -1, -1, 1);
                                                                player[myPlayer].bank2[num188] = (Item) player[myPlayer].inventory[num182].Clone();
                                                                player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        for (int num189 = 0; num189 < 20; num189++)
                                                        {
                                                            if (player[myPlayer].bank[num189].stack == 0)
                                                            {
                                                                PlaySound(7, -1, -1, 1);
                                                                player[myPlayer].bank[num189] = (Item) player[myPlayer].inventory[num182].Clone();
                                                                player[myPlayer].inventory[num182].SetDefaults(0, false);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (player[myPlayer].chest > -1)
                                    {
                                        for (int num190 = 0; num190 < 20; num190++)
                                        {
                                            if ((chest[player[myPlayer].chest].item[num190].type > 0) && (chest[player[myPlayer].chest].item[num190].stack < chest[player[myPlayer].chest].item[num190].maxStack))
                                            {
                                                for (int num191 = 0; num191 < 0x30; num191++)
                                                {
                                                    if (chest[player[myPlayer].chest].item[num190].IsTheSameAs(player[myPlayer].inventory[num191]))
                                                    {
                                                        int num192 = player[myPlayer].inventory[num191].stack;
                                                        if ((chest[player[myPlayer].chest].item[num190].stack + num192) > chest[player[myPlayer].chest].item[num190].maxStack)
                                                        {
                                                            num192 = chest[player[myPlayer].chest].item[num190].maxStack - chest[player[myPlayer].chest].item[num190].stack;
                                                        }
                                                        PlaySound(7, -1, -1, 1);
                                                        Item item28 = chest[player[myPlayer].chest].item[num190];
                                                        item28.stack += num192;
                                                        Item item29 = player[myPlayer].inventory[num191];
                                                        item29.stack -= num192;
                                                        ChestCoins();
                                                        if (player[myPlayer].inventory[num191].stack == 0)
                                                        {
                                                            player[myPlayer].inventory[num191].SetDefaults(0, false);
                                                        }
                                                        else if (chest[player[myPlayer].chest].item[num190].type == 0)
                                                        {
                                                            chest[player[myPlayer].chest].item[num190] = (Item) player[myPlayer].inventory[num191].Clone();
                                                            player[myPlayer].inventory[num191].SetDefaults(0, false);
                                                        }
                                                        if (netMode == 1)
                                                        {
                                                            NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num190, 0f, 0f, 0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (player[myPlayer].chest == -3)
                                    {
                                        for (int num193 = 0; num193 < 20; num193++)
                                        {
                                            if ((player[myPlayer].bank2[num193].type > 0) && (player[myPlayer].bank2[num193].stack < player[myPlayer].bank2[num193].maxStack))
                                            {
                                                for (int num194 = 0; num194 < 0x30; num194++)
                                                {
                                                    if (player[myPlayer].bank2[num193].IsTheSameAs(player[myPlayer].inventory[num194]))
                                                    {
                                                        int num195 = player[myPlayer].inventory[num194].stack;
                                                        if ((player[myPlayer].bank2[num193].stack + num195) > player[myPlayer].bank2[num193].maxStack)
                                                        {
                                                            num195 = player[myPlayer].bank2[num193].maxStack - player[myPlayer].bank2[num193].stack;
                                                        }
                                                        PlaySound(7, -1, -1, 1);
                                                        Item item30 = player[myPlayer].bank2[num193];
                                                        item30.stack += num195;
                                                        Item item31 = player[myPlayer].inventory[num194];
                                                        item31.stack -= num195;
                                                        BankCoins();
                                                        if (player[myPlayer].inventory[num194].stack == 0)
                                                        {
                                                            player[myPlayer].inventory[num194].SetDefaults(0, false);
                                                        }
                                                        else if (player[myPlayer].bank2[num193].type == 0)
                                                        {
                                                            player[myPlayer].bank2[num193] = (Item) player[myPlayer].inventory[num194].Clone();
                                                            player[myPlayer].inventory[num194].SetDefaults(0, false);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        for (int num196 = 0; num196 < 20; num196++)
                                        {
                                            if ((player[myPlayer].bank[num196].type > 0) && (player[myPlayer].bank[num196].stack < player[myPlayer].bank[num196].maxStack))
                                            {
                                                for (int num197 = 0; num197 < 0x30; num197++)
                                                {
                                                    if (player[myPlayer].bank[num196].IsTheSameAs(player[myPlayer].inventory[num197]))
                                                    {
                                                        int num198 = player[myPlayer].inventory[num197].stack;
                                                        if ((player[myPlayer].bank[num196].stack + num198) > player[myPlayer].bank[num196].maxStack)
                                                        {
                                                            num198 = player[myPlayer].bank[num196].maxStack - player[myPlayer].bank[num196].stack;
                                                        }
                                                        PlaySound(7, -1, -1, 1);
                                                        Item item32 = player[myPlayer].bank[num196];
                                                        item32.stack += num198;
                                                        Item item33 = player[myPlayer].inventory[num197];
                                                        item33.stack -= num198;
                                                        BankCoins();
                                                        if (player[myPlayer].inventory[num197].stack == 0)
                                                        {
                                                            player[myPlayer].inventory[num197].SetDefaults(0, false);
                                                        }
                                                        else if (player[myPlayer].bank[num196].type == 0)
                                                        {
                                                            player[myPlayer].bank[num196] = (Item) player[myPlayer].inventory[num197].Clone();
                                                            player[myPlayer].inventory[num197].SetDefaults(0, false);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    Recipe.FindRecipes();
                                }
                            }
                            else
                            {
                                chestLootScale -= 0.05f;
                                switch (num175)
                                {
                                    case 0:
                                        this.chestLootHover = false;
                                        goto Label_BB62;

                                    case 1:
                                        this.chestDepositHover = false;
                                        goto Label_BB62;

                                    default:
                                        this.chestStackHover = false;
                                        goto Label_BB62;
                                }
                            }
                        Label_BB62:
                            if (chestLootScale < 0.75)
                            {
                                chestLootScale = 0.75f;
                            }
                            if (chestLootScale > 1f)
                            {
                                chestLootScale = 1f;
                            }
                            switch (num175)
                            {
                                case 0:
                                    this.chestLootScale = chestLootScale;
                                    break;

                                case 1:
                                    this.chestDepositScale = chestLootScale;
                                    break;

                                default:
                                    this.chestStackScale = chestLootScale;
                                    break;
                            }
                        }
                    }
                    else
                    {
                        this.chestLootScale = 0.75f;
                        this.chestDepositScale = 0.75f;
                        this.chestStackScale = 0.75f;
                        this.chestLootHover = false;
                        this.chestDepositHover = false;
                        this.chestStackHover = false;
                    }
                    if (player[myPlayer].chest > -1)
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, chestText, new Vector2(284f, 210f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        Main.inventoryScale = 0.75f;
                        if (((mouseX > 0x49) && (mouseX < ((int) (73f + (280f * Main.inventoryScale))))) && ((mouseY > 210) && (mouseY < ((int) (210f + (224f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        for (int num199 = 0; num199 < 5; num199++)
                        {
                            for (int num200 = 0; num200 < 4; num200++)
                            {
                                int num201 = (int) (73f + ((num199 * 0x38) * Main.inventoryScale));
                                int num202 = (int) (210f + ((num200 * 0x38) * Main.inventoryScale));
                                int num203 = num199 + (num200 * 5);
                                Color color22 = new Color(100, 100, 100, 100);
                                if (((mouseX >= num201) && (mouseX <= (num201 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num202) && (mouseY <= (num202 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                                {
                                    player[myPlayer].mouseInterface = true;
                                    if (mouseLeftRelease && mouseLeft)
                                    {
                                        if ((player[myPlayer].selectedItem != num203) || (player[myPlayer].itemAnimation <= 0))
                                        {
                                            Item item9 = Main.mouseItem;
                                            Main.mouseItem = chest[player[myPlayer].chest].item[num203];
                                            chest[player[myPlayer].chest].item[num203] = item9;
                                            if ((chest[player[myPlayer].chest].item[num203].type == 0) || (chest[player[myPlayer].chest].item[num203].stack < 1))
                                            {
                                                chest[player[myPlayer].chest].item[num203] = new Item();
                                            }
                                            if ((Main.mouseItem.IsTheSameAs(chest[player[myPlayer].chest].item[num203]) && (chest[player[myPlayer].chest].item[num203].stack != chest[player[myPlayer].chest].item[num203].maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                            {
                                                if ((Main.mouseItem.stack + chest[player[myPlayer].chest].item[num203].stack) <= Main.mouseItem.maxStack)
                                                {
                                                    Item item34 = chest[player[myPlayer].chest].item[num203];
                                                    item34.stack += Main.mouseItem.stack;
                                                    Main.mouseItem.stack = 0;
                                                }
                                                else
                                                {
                                                    int num204 = Main.mouseItem.maxStack - chest[player[myPlayer].chest].item[num203].stack;
                                                    Item item35 = chest[player[myPlayer].chest].item[num203];
                                                    item35.stack += num204;
                                                    Main.mouseItem.stack -= num204;
                                                }
                                            }
                                            if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                            {
                                                Main.mouseItem = new Item();
                                            }
                                            if ((Main.mouseItem.type > 0) || (chest[player[myPlayer].chest].item[num203].type > 0))
                                            {
                                                Recipe.FindRecipes();
                                                PlaySound(7, -1, -1, 1);
                                            }
                                            if (netMode == 1)
                                            {
                                                NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num203, 0f, 0f, 0);
                                            }
                                        }
                                    }
                                    else if ((mouseRight && mouseRightRelease) && (chest[player[myPlayer].chest].item[num203].maxStack == 1))
                                    {
                                        chest[player[myPlayer].chest].item[num203] = armorSwap(chest[player[myPlayer].chest].item[num203]);
                                        if (netMode == 1)
                                        {
                                            NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num203, 0f, 0f, 0);
                                        }
                                    }
                                    else if (((((stackSplit <= 1) && mouseRight) && (chest[player[myPlayer].chest].item[num203].maxStack > 1)) && (Main.mouseItem.IsTheSameAs(chest[player[myPlayer].chest].item[num203]) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                                    {
                                        if (Main.mouseItem.type == 0)
                                        {
                                            Main.mouseItem = (Item) chest[player[myPlayer].chest].item[num203].Clone();
                                            Main.mouseItem.stack = 0;
                                        }
                                        Main.mouseItem.stack++;
                                        Item item36 = chest[player[myPlayer].chest].item[num203];
                                        item36.stack--;
                                        if (chest[player[myPlayer].chest].item[num203].stack <= 0)
                                        {
                                            chest[player[myPlayer].chest].item[num203] = new Item();
                                        }
                                        Recipe.FindRecipes();
                                        soundInstanceMenuTick.Stop();
                                        soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                        PlaySound(12, -1, -1, 1);
                                        if (stackSplit == 0)
                                        {
                                            stackSplit = 15;
                                        }
                                        else
                                        {
                                            stackSplit = stackDelay;
                                        }
                                        if (netMode == 1)
                                        {
                                            NetMessage.SendData(0x20, -1, -1, "", player[myPlayer].chest, (float) num203, 0f, 0f, 0);
                                        }
                                    }
                                    cursorText = chest[player[myPlayer].chest].item[num203].name;
                                    toolTip = (Item) chest[player[myPlayer].chest].item[num203].Clone();
                                    if (chest[player[myPlayer].chest].item[num203].stack > 1)
                                    {
                                        obj2 = cursorText;
                                        cursorText = string.Concat(new object[] { obj2, " (", chest[player[myPlayer].chest].item[num203].stack, ")" });
                                    }
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBack5Texture, new Vector2((float) num201, (float) num202), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                                color22 = Color.White;
                                if ((chest[player[myPlayer].chest].item[num203].type > 0) && (chest[player[myPlayer].chest].item[num203].stack > 0))
                                {
                                    float num205 = 1f;
                                    if ((itemTexture[chest[player[myPlayer].chest].item[num203].type].Width > 0x20) || (itemTexture[chest[player[myPlayer].chest].item[num203].type].Height > 0x20))
                                    {
                                        if (itemTexture[chest[player[myPlayer].chest].item[num203].type].Width > itemTexture[chest[player[myPlayer].chest].item[num203].type].Height)
                                        {
                                            num205 = 32f / ((float) itemTexture[chest[player[myPlayer].chest].item[num203].type].Width);
                                        }
                                        else
                                        {
                                            num205 = 32f / ((float) itemTexture[chest[player[myPlayer].chest].item[num203].type].Height);
                                        }
                                    }
                                    num205 *= Main.inventoryScale;
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[chest[player[myPlayer].chest].item[num203].type], new Vector2((num201 + (26f * Main.inventoryScale)) - ((itemTexture[chest[player[myPlayer].chest].item[num203].type].Width * 0.5f) * num205), (num202 + (26f * Main.inventoryScale)) - ((itemTexture[chest[player[myPlayer].chest].item[num203].type].Height * 0.5f) * num205)), new Rectangle(0, 0, itemTexture[chest[player[myPlayer].chest].item[num203].type].Width, itemTexture[chest[player[myPlayer].chest].item[num203].type].Height), chest[player[myPlayer].chest].item[num203].GetAlpha(color22), 0f, vector10, num205, SpriteEffects.None, 0f);
                                    color34 = new Color();
                                    if (chest[player[myPlayer].chest].item[num203].color != color34)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.Draw(itemTexture[chest[player[myPlayer].chest].item[num203].type], new Vector2((num201 + (26f * Main.inventoryScale)) - ((itemTexture[chest[player[myPlayer].chest].item[num203].type].Width * 0.5f) * num205), (num202 + (26f * Main.inventoryScale)) - ((itemTexture[chest[player[myPlayer].chest].item[num203].type].Height * 0.5f) * num205)), new Rectangle(0, 0, itemTexture[chest[player[myPlayer].chest].item[num203].type].Width, itemTexture[chest[player[myPlayer].chest].item[num203].type].Height), chest[player[myPlayer].chest].item[num203].GetColor(color22), 0f, vector10, num205, SpriteEffects.None, 0f);
                                    }
                                    if (chest[player[myPlayer].chest].item[num203].stack > 1)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.DrawString(fontItemStack, chest[player[myPlayer].chest].item[num203].stack.ToString(), new Vector2(num201 + (10f * Main.inventoryScale), num202 + (26f * Main.inventoryScale)), color22, 0f, vector10, num205, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                    if (player[myPlayer].chest == -2)
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, "Piggy Bank", new Vector2(284f, 210f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        Main.inventoryScale = 0.75f;
                        if (((mouseX > 0x49) && (mouseX < ((int) (73f + (280f * Main.inventoryScale))))) && ((mouseY > 210) && (mouseY < ((int) (210f + (224f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        for (int num206 = 0; num206 < 5; num206++)
                        {
                            for (int num207 = 0; num207 < 4; num207++)
                            {
                                int num208 = (int) (73f + ((num206 * 0x38) * Main.inventoryScale));
                                int num209 = (int) (210f + ((num207 * 0x38) * Main.inventoryScale));
                                int num210 = num206 + (num207 * 5);
                                Color color23 = new Color(100, 100, 100, 100);
                                if (((mouseX >= num208) && (mouseX <= (num208 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num209) && (mouseY <= (num209 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                                {
                                    player[myPlayer].mouseInterface = true;
                                    if (mouseLeftRelease && mouseLeft)
                                    {
                                        if ((player[myPlayer].selectedItem != num210) || (player[myPlayer].itemAnimation <= 0))
                                        {
                                            Item item10 = Main.mouseItem;
                                            Main.mouseItem = player[myPlayer].bank[num210];
                                            player[myPlayer].bank[num210] = item10;
                                            if ((player[myPlayer].bank[num210].type == 0) || (player[myPlayer].bank[num210].stack < 1))
                                            {
                                                player[myPlayer].bank[num210] = new Item();
                                            }
                                            if ((Main.mouseItem.IsTheSameAs(player[myPlayer].bank[num210]) && (player[myPlayer].bank[num210].stack != player[myPlayer].bank[num210].maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                            {
                                                if ((Main.mouseItem.stack + player[myPlayer].bank[num210].stack) <= Main.mouseItem.maxStack)
                                                {
                                                    Item item37 = player[myPlayer].bank[num210];
                                                    item37.stack += Main.mouseItem.stack;
                                                    Main.mouseItem.stack = 0;
                                                }
                                                else
                                                {
                                                    int num211 = Main.mouseItem.maxStack - player[myPlayer].bank[num210].stack;
                                                    Item item38 = player[myPlayer].bank[num210];
                                                    item38.stack += num211;
                                                    Main.mouseItem.stack -= num211;
                                                }
                                            }
                                            if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                            {
                                                Main.mouseItem = new Item();
                                            }
                                            if ((Main.mouseItem.type > 0) || (player[myPlayer].bank[num210].type > 0))
                                            {
                                                Recipe.FindRecipes();
                                                PlaySound(7, -1, -1, 1);
                                            }
                                        }
                                    }
                                    else if ((mouseRight && mouseRightRelease) && (player[myPlayer].bank[num210].maxStack == 1))
                                    {
                                        player[myPlayer].bank[num210] = armorSwap(player[myPlayer].bank[num210]);
                                    }
                                    else if (((((stackSplit <= 1) && mouseRight) && (player[myPlayer].bank[num210].maxStack > 1)) && (Main.mouseItem.IsTheSameAs(player[myPlayer].bank[num210]) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                                    {
                                        if (Main.mouseItem.type == 0)
                                        {
                                            Main.mouseItem = (Item) player[myPlayer].bank[num210].Clone();
                                            Main.mouseItem.stack = 0;
                                        }
                                        Main.mouseItem.stack++;
                                        Item item39 = player[myPlayer].bank[num210];
                                        item39.stack--;
                                        if (player[myPlayer].bank[num210].stack <= 0)
                                        {
                                            player[myPlayer].bank[num210] = new Item();
                                        }
                                        Recipe.FindRecipes();
                                        soundInstanceMenuTick.Stop();
                                        soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                        PlaySound(12, -1, -1, 1);
                                        if (stackSplit == 0)
                                        {
                                            stackSplit = 15;
                                        }
                                        else
                                        {
                                            stackSplit = stackDelay;
                                        }
                                    }
                                    cursorText = player[myPlayer].bank[num210].name;
                                    toolTip = (Item) player[myPlayer].bank[num210].Clone();
                                    if (player[myPlayer].bank[num210].stack > 1)
                                    {
                                        obj2 = cursorText;
                                        cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].bank[num210].stack, ")" });
                                    }
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBack2Texture, new Vector2((float) num208, (float) num209), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                                color23 = Color.White;
                                if ((player[myPlayer].bank[num210].type > 0) && (player[myPlayer].bank[num210].stack > 0))
                                {
                                    float num212 = 1f;
                                    if ((itemTexture[player[myPlayer].bank[num210].type].Width > 0x20) || (itemTexture[player[myPlayer].bank[num210].type].Height > 0x20))
                                    {
                                        if (itemTexture[player[myPlayer].bank[num210].type].Width > itemTexture[player[myPlayer].bank[num210].type].Height)
                                        {
                                            num212 = 32f / ((float) itemTexture[player[myPlayer].bank[num210].type].Width);
                                        }
                                        else
                                        {
                                            num212 = 32f / ((float) itemTexture[player[myPlayer].bank[num210].type].Height);
                                        }
                                    }
                                    num212 *= Main.inventoryScale;
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[player[myPlayer].bank[num210].type], new Vector2((num208 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank[num210].type].Width * 0.5f) * num212), (num209 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank[num210].type].Height * 0.5f) * num212)), new Rectangle(0, 0, itemTexture[player[myPlayer].bank[num210].type].Width, itemTexture[player[myPlayer].bank[num210].type].Height), player[myPlayer].bank[num210].GetAlpha(color23), 0f, vector10, num212, SpriteEffects.None, 0f);
                                    color34 = new Color();
                                    if (player[myPlayer].bank[num210].color != color34)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.Draw(itemTexture[player[myPlayer].bank[num210].type], new Vector2((num208 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank[num210].type].Width * 0.5f) * num212), (num209 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank[num210].type].Height * 0.5f) * num212)), new Rectangle(0, 0, itemTexture[player[myPlayer].bank[num210].type].Width, itemTexture[player[myPlayer].bank[num210].type].Height), player[myPlayer].bank[num210].GetColor(color23), 0f, vector10, num212, SpriteEffects.None, 0f);
                                    }
                                    if (player[myPlayer].bank[num210].stack > 1)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.DrawString(fontItemStack, player[myPlayer].bank[num210].stack.ToString(), new Vector2(num208 + (10f * Main.inventoryScale), num209 + (26f * Main.inventoryScale)), color23, 0f, vector10, num212, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                    if (player[myPlayer].chest == -3)
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, "Safe", new Vector2(284f, 210f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                        Main.inventoryScale = 0.75f;
                        if (((mouseX > 0x49) && (mouseX < ((int) (73f + (280f * Main.inventoryScale))))) && ((mouseY > 210) && (mouseY < ((int) (210f + (224f * Main.inventoryScale))))))
                        {
                            player[myPlayer].mouseInterface = true;
                        }
                        for (int num213 = 0; num213 < 5; num213++)
                        {
                            for (int num214 = 0; num214 < 4; num214++)
                            {
                                int num215 = (int) (73f + ((num213 * 0x38) * Main.inventoryScale));
                                int num216 = (int) (210f + ((num214 * 0x38) * Main.inventoryScale));
                                int num217 = num213 + (num214 * 5);
                                Color color24 = new Color(100, 100, 100, 100);
                                if (((mouseX >= num215) && (mouseX <= (num215 + (inventoryBackTexture.Width * Main.inventoryScale)))) && ((mouseY >= num216) && (mouseY <= (num216 + (inventoryBackTexture.Height * Main.inventoryScale)))))
                                {
                                    player[myPlayer].mouseInterface = true;
                                    if (mouseLeftRelease && mouseLeft)
                                    {
                                        if ((player[myPlayer].selectedItem != num217) || (player[myPlayer].itemAnimation <= 0))
                                        {
                                            Item item11 = Main.mouseItem;
                                            Main.mouseItem = player[myPlayer].bank2[num217];
                                            player[myPlayer].bank2[num217] = item11;
                                            if ((player[myPlayer].bank2[num217].type == 0) || (player[myPlayer].bank2[num217].stack < 1))
                                            {
                                                player[myPlayer].bank2[num217] = new Item();
                                            }
                                            if ((Main.mouseItem.IsTheSameAs(player[myPlayer].bank2[num217]) && (player[myPlayer].bank2[num217].stack != player[myPlayer].bank2[num217].maxStack)) && (Main.mouseItem.stack != Main.mouseItem.maxStack))
                                            {
                                                if ((Main.mouseItem.stack + player[myPlayer].bank2[num217].stack) <= Main.mouseItem.maxStack)
                                                {
                                                    Item item40 = player[myPlayer].bank2[num217];
                                                    item40.stack += Main.mouseItem.stack;
                                                    Main.mouseItem.stack = 0;
                                                }
                                                else
                                                {
                                                    int num218 = Main.mouseItem.maxStack - player[myPlayer].bank2[num217].stack;
                                                    Item item41 = player[myPlayer].bank2[num217];
                                                    item41.stack += num218;
                                                    Main.mouseItem.stack -= num218;
                                                }
                                            }
                                            if ((Main.mouseItem.type == 0) || (Main.mouseItem.stack < 1))
                                            {
                                                Main.mouseItem = new Item();
                                            }
                                            if ((Main.mouseItem.type > 0) || (player[myPlayer].bank2[num217].type > 0))
                                            {
                                                Recipe.FindRecipes();
                                                PlaySound(7, -1, -1, 1);
                                            }
                                        }
                                    }
                                    else if ((mouseRight && mouseRightRelease) && (player[myPlayer].bank2[num217].maxStack == 1))
                                    {
                                        player[myPlayer].bank2[num217] = armorSwap(player[myPlayer].bank2[num217]);
                                    }
                                    else if (((((stackSplit <= 1) && mouseRight) && (player[myPlayer].bank2[num217].maxStack > 1)) && (Main.mouseItem.IsTheSameAs(player[myPlayer].bank2[num217]) || (Main.mouseItem.type == 0))) && ((Main.mouseItem.stack < Main.mouseItem.maxStack) || (Main.mouseItem.type == 0)))
                                    {
                                        if (Main.mouseItem.type == 0)
                                        {
                                            Main.mouseItem = (Item) player[myPlayer].bank2[num217].Clone();
                                            Main.mouseItem.stack = 0;
                                        }
                                        Main.mouseItem.stack++;
                                        Item item42 = player[myPlayer].bank2[num217];
                                        item42.stack--;
                                        if (player[myPlayer].bank2[num217].stack <= 0)
                                        {
                                            player[myPlayer].bank2[num217] = new Item();
                                        }
                                        Recipe.FindRecipes();
                                        soundInstanceMenuTick.Stop();
                                        soundInstanceMenuTick = soundMenuTick.CreateInstance();
                                        PlaySound(12, -1, -1, 1);
                                        if (stackSplit == 0)
                                        {
                                            stackSplit = 15;
                                        }
                                        else
                                        {
                                            stackSplit = stackDelay;
                                        }
                                    }
                                    cursorText = player[myPlayer].bank2[num217].name;
                                    toolTip = (Item) player[myPlayer].bank2[num217].Clone();
                                    if (player[myPlayer].bank2[num217].stack > 1)
                                    {
                                        obj2 = cursorText;
                                        cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].bank2[num217].stack, ")" });
                                    }
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(inventoryBack2Texture, new Vector2((float) num215, (float) num216), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), color2, 0f, vector10, Main.inventoryScale, SpriteEffects.None, 0f);
                                color24 = Color.White;
                                if ((player[myPlayer].bank2[num217].type > 0) && (player[myPlayer].bank2[num217].stack > 0))
                                {
                                    float num219 = 1f;
                                    if ((itemTexture[player[myPlayer].bank2[num217].type].Width > 0x20) || (itemTexture[player[myPlayer].bank2[num217].type].Height > 0x20))
                                    {
                                        if (itemTexture[player[myPlayer].bank2[num217].type].Width > itemTexture[player[myPlayer].bank2[num217].type].Height)
                                        {
                                            num219 = 32f / ((float) itemTexture[player[myPlayer].bank2[num217].type].Width);
                                        }
                                        else
                                        {
                                            num219 = 32f / ((float) itemTexture[player[myPlayer].bank2[num217].type].Height);
                                        }
                                    }
                                    num219 *= Main.inventoryScale;
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(itemTexture[player[myPlayer].bank2[num217].type], new Vector2((num215 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank2[num217].type].Width * 0.5f) * num219), (num216 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank2[num217].type].Height * 0.5f) * num219)), new Rectangle(0, 0, itemTexture[player[myPlayer].bank2[num217].type].Width, itemTexture[player[myPlayer].bank2[num217].type].Height), player[myPlayer].bank2[num217].GetAlpha(color24), 0f, vector10, num219, SpriteEffects.None, 0f);
                                    color34 = new Color();
                                    if (player[myPlayer].bank2[num217].color != color34)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.Draw(itemTexture[player[myPlayer].bank2[num217].type], new Vector2((num215 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank2[num217].type].Width * 0.5f) * num219), (num216 + (26f * Main.inventoryScale)) - ((itemTexture[player[myPlayer].bank2[num217].type].Height * 0.5f) * num219)), new Rectangle(0, 0, itemTexture[player[myPlayer].bank2[num217].type].Width, itemTexture[player[myPlayer].bank2[num217].type].Height), player[myPlayer].bank2[num217].GetColor(color24), 0f, vector10, num219, SpriteEffects.None, 0f);
                                    }
                                    if (player[myPlayer].bank2[num217].stack > 1)
                                    {
                                        vector10 = new Vector2();
                                        this.spriteBatch.DrawString(fontItemStack, player[myPlayer].bank2[num217].stack.ToString(), new Vector2(num215 + (10f * Main.inventoryScale), num216 + (26f * Main.inventoryScale)), color24, 0f, vector10, num219, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                }
                if (playerInventory || player[myPlayer].ghost)
                {
                    string str27 = "Save & Exit";
                    if (netMode != 0)
                    {
                        str27 = "Disconnect";
                    }
                    Vector2 vector8 = fontDeathText.MeasureString(str27);
                    int num230 = screenWidth - 110;
                    int num231 = Main.screenHeight - 20;
                    if (mouseExit)
                    {
                        if (exitScale < 1f)
                        {
                            exitScale += 0.02f;
                        }
                    }
                    else if (exitScale > 0.8)
                    {
                        exitScale -= 0.02f;
                    }
                    for (int num232 = 0; num232 < 5; num232++)
                    {
                        int num233 = 0;
                        int num234 = 0;
                        Color color26 = Color.Black;
                        switch (num232)
                        {
                            case 0:
                                num233 = -2;
                                break;

                            case 1:
                                num233 = 2;
                                break;

                            case 2:
                                num234 = -2;
                                break;

                            case 3:
                                num234 = 2;
                                break;

                            case 4:
                                color26 = Color.White;
                                break;
                        }
                        this.spriteBatch.DrawString(fontDeathText, str27, new Vector2((float) (num230 + num233), (float) (num231 + num234)), color26, 0f, new Vector2(vector8.X / 2f, vector8.Y / 2f), (float) (exitScale - 0.2f), SpriteEffects.None, 0f);
                    }
                    if (((mouseX > (num230 - (vector8.X / 2f))) && (mouseX < (num230 + (vector8.X / 2f)))) && ((mouseY > (num231 - (vector8.Y / 2f))) && (mouseY < ((num231 + (vector8.Y / 2f)) - 10f))))
                    {
                        if (!mouseExit)
                        {
                            PlaySound(12, -1, -1, 1);
                        }
                        mouseExit = true;
                        player[myPlayer].mouseInterface = true;
                        if (mouseLeftRelease && mouseLeft)
                        {
                            menuMode = 10;
                            WorldGen.SaveAndQuit();
                        }
                    }
                    else
                    {
                        mouseExit = false;
                    }
                }
                if (!playerInventory && !player[myPlayer].ghost)
                {
                    string str28 = "Items";
                    if ((player[myPlayer].inventory[player[myPlayer].selectedItem].name != "") && (player[myPlayer].inventory[player[myPlayer].selectedItem].name != null))
                    {
                        str28 = player[myPlayer].inventory[player[myPlayer].selectedItem].AffixName();
                    }
                    Vector2 vector9 = (Vector2) (fontMouseText.MeasureString(str28) / 2f);
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, str28, new Vector2(236f - vector9.X, 0f), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    int num235 = 20;
                    float num236 = 1f;
                    for (int num237 = 0; num237 < 10; num237++)
                    {
                        if (num237 == player[myPlayer].selectedItem)
                        {
                            if (hotbarScale[num237] < 1f)
                            {
                                hotbarScale[num237] += 0.05f;
                            }
                        }
                        else if (hotbarScale[num237] > 0.75)
                        {
                            hotbarScale[num237] -= 0.05f;
                        }
                        float num238 = hotbarScale[num237];
                        int num239 = (int) (20f + (22f * (1f - num238)));
                        int num240 = (int) (75f + (150f * num238));
                        Color color27 = new Color(0xff, 0xff, 0xff, num240);
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(inventoryBackTexture, new Vector2((float) num235, (float) num239), new Rectangle(0, 0, inventoryBackTexture.Width, inventoryBackTexture.Height), new Color(100, 100, 100, 100), 0f, vector10, num238, SpriteEffects.None, 0f);
                        if (((!player[myPlayer].hbLocked && (mouseX >= num235)) && ((mouseX <= (num235 + (inventoryBackTexture.Width * hotbarScale[num237]))) && (mouseY >= num239))) && ((mouseY <= (num239 + (inventoryBackTexture.Height * hotbarScale[num237]))) && !player[myPlayer].channel))
                        {
                            player[myPlayer].mouseInterface = true;
                            if (mouseLeft && !player[myPlayer].hbLocked)
                            {
                                player[myPlayer].changeItem = num237;
                            }
                            player[myPlayer].showItemIcon = false;
                            cursorText = player[myPlayer].inventory[num237].AffixName();
                            if (player[myPlayer].inventory[num237].stack > 1)
                            {
                                obj2 = cursorText;
                                cursorText = string.Concat(new object[] { obj2, " (", player[myPlayer].inventory[num237].stack, ")" });
                            }
                            rare = player[myPlayer].inventory[num237].rare;
                        }
                        if ((player[myPlayer].inventory[num237].type > 0) && (player[myPlayer].inventory[num237].stack > 0))
                        {
                            num236 = 1f;
                            if ((itemTexture[player[myPlayer].inventory[num237].type].Width > 0x20) || (itemTexture[player[myPlayer].inventory[num237].type].Height > 0x20))
                            {
                                if (itemTexture[player[myPlayer].inventory[num237].type].Width > itemTexture[player[myPlayer].inventory[num237].type].Height)
                                {
                                    num236 = 32f / ((float) itemTexture[player[myPlayer].inventory[num237].type].Width);
                                }
                                else
                                {
                                    num236 = 32f / ((float) itemTexture[player[myPlayer].inventory[num237].type].Height);
                                }
                            }
                            num236 *= num238;
                            vector10 = new Vector2();
                            this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num237].type], new Vector2((num235 + (26f * num238)) - ((itemTexture[player[myPlayer].inventory[num237].type].Width * 0.5f) * num236), (num239 + (26f * num238)) - ((itemTexture[player[myPlayer].inventory[num237].type].Height * 0.5f) * num236)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num237].type].Width, itemTexture[player[myPlayer].inventory[num237].type].Height), player[myPlayer].inventory[num237].GetAlpha(color27), 0f, vector10, num236, SpriteEffects.None, 0f);
                            color34 = new Color();
                            if (player[myPlayer].inventory[num237].color != color34)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[num237].type], new Vector2((num235 + (26f * num238)) - ((itemTexture[player[myPlayer].inventory[num237].type].Width * 0.5f) * num236), (num239 + (26f * num238)) - ((itemTexture[player[myPlayer].inventory[num237].type].Height * 0.5f) * num236)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[num237].type].Width, itemTexture[player[myPlayer].inventory[num237].type].Height), player[myPlayer].inventory[num237].GetColor(color27), 0f, vector10, num236, SpriteEffects.None, 0f);
                            }
                            if (player[myPlayer].inventory[num237].stack > 1)
                            {
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontItemStack, player[myPlayer].inventory[num237].stack.ToString(), new Vector2(num235 + (10f * num238), num239 + (26f * num238)), color27, 0f, vector10, num236, SpriteEffects.None, 0f);
                            }
                            if (player[myPlayer].inventory[num237].useAmmo > 0)
                            {
                                int useAmmo = player[myPlayer].inventory[num237].useAmmo;
                                int num242 = 0;
                                for (int num243 = 0; num243 < 0x30; num243++)
                                {
                                    if (player[myPlayer].inventory[num243].ammo == useAmmo)
                                    {
                                        num242 += player[myPlayer].inventory[num243].stack;
                                    }
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontItemStack, num242.ToString(), new Vector2(num235 + (8f * num238), num239 + (30f * num238)), color27, 0f, vector10, (float)(num238 * 0.8f), SpriteEffects.None, 0f);
                            }
                            else if (player[myPlayer].inventory[num237].type == 0x1fd)
                            {
                                int num244 = 0;
                                for (int num245 = 0; num245 < 0x30; num245++)
                                {
                                    if (player[myPlayer].inventory[num245].type == 530)
                                    {
                                        num244 += player[myPlayer].inventory[num245].stack;
                                    }
                                }
                                vector10 = new Vector2();
                                this.spriteBatch.DrawString(fontItemStack, num244.ToString(), new Vector2(num235 + (8f * num238), num239 + (30f * num238)), color27, 0f, vector10, (float)(num238 * 0.8f), SpriteEffects.None, 0f);
                            }
                            string str29 = (num237 + 1).ToString();
                            if (str29 == "10")
                            {
                                str29 = "0";
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontItemStack, str29, new Vector2(num235 + (8f * hotbarScale[num237]), num239 + (4f * hotbarScale[num237])), new Color(color27.R / 2, color27.G / 2, color27.B / 2, color27.A / 2), 0f, vector10, num236, SpriteEffects.None, 0f);
                            if (player[myPlayer].inventory[num237].potion)
                            {
                                Color alpha = player[myPlayer].inventory[num237].GetAlpha(color27);
                                float num246 = ((float) player[myPlayer].potionDelay) / ((float) player[myPlayer].potionDelayTime);
                                float num247 = alpha.R * num246;
                                float num248 = alpha.G * num246;
                                float num249 = alpha.B * num246;
                                float num250 = alpha.A * num246;
                                alpha = new Color((int) ((byte) num247), (int) ((byte) num248), (int) ((byte) num249), (int) ((byte) num250));
                                vector10 = new Vector2();
                                this.spriteBatch.Draw(cdTexture, new Vector2((num235 + (26f * hotbarScale[num237])) - ((cdTexture.Width * 0.5f) * num236), (num239 + (26f * hotbarScale[num237])) - ((cdTexture.Height * 0.5f) * num236)), new Rectangle(0, 0, cdTexture.Width, cdTexture.Height), alpha, 0f, vector10, num236, SpriteEffects.None, 0f);
                            }
                        }
                        num235 += ((int) (inventoryBackTexture.Width * hotbarScale[num237])) + 4;
                    }
                }
                if (Main.mouseItem.stack <= 0)
                {
                    Main.mouseItem.type = 0;
                }
                if (((cursorText != null) && (cursorText != "")) && (Main.mouseItem.type == 0))
                {
                    player[myPlayer].showItemIcon = false;
                    this.MouseText(cursorText, rare, 0);
                    flag = true;
                }
                if (chatMode)
                {
                    this.textBlinkerCount++;
                    if (this.textBlinkerCount >= 20)
                    {
                        if (this.textBlinkerState == 0)
                        {
                            this.textBlinkerState = 1;
                        }
                        else
                        {
                            this.textBlinkerState = 0;
                        }
                        this.textBlinkerCount = 0;
                    }
                    string chatText = Main.chatText;
                    if (this.textBlinkerState == 1)
                    {
                        chatText = chatText + "|";
                    }
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(textBackTexture, new Vector2(78f, (float) (Main.screenHeight - 0x24)), new Rectangle(0, 0, textBackTexture.Width, textBackTexture.Height), new Color(100, 100, 100, 100), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    for (int num251 = 0; num251 < 5; num251++)
                    {
                        int num252 = 0;
                        int num253 = 0;
                        Color color29 = Color.Black;
                        switch (num251)
                        {
                            case 0:
                                num252 = -2;
                                break;

                            case 1:
                                num252 = 2;
                                break;

                            case 2:
                                num253 = -2;
                                break;

                            case 3:
                                num253 = 2;
                                break;

                            case 4:
                                color29 = new Color((int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor);
                                break;
                        }
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontMouseText, chatText, new Vector2((float) (0x58 + num252), (float) ((Main.screenHeight - 30) + num253)), color29, 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                    }
                }
                for (int k = 0; k < numChatLines; k++)
                {
                    if (chatMode || (chatLine[k].showTime > 0))
                    {
                        float num255 = ((float) mouseTextColor) / 255f;
                        for (int num256 = 0; num256 < 5; num256++)
                        {
                            int num257 = 0;
                            int num258 = 0;
                            Color color30 = Color.Black;
                            switch (num256)
                            {
                                case 0:
                                    num257 = -2;
                                    break;

                                case 1:
                                    num257 = 2;
                                    break;

                                case 2:
                                    num258 = -2;
                                    break;

                                case 3:
                                    num258 = 2;
                                    break;

                                case 4:
                                    color30 = new Color((int) ((byte) (chatLine[k].color.R * num255)), (int) ((byte) (chatLine[k].color.G * num255)), (int) ((byte) (chatLine[k].color.B * num255)), (int) mouseTextColor);
                                    break;
                            }
                            vector10 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, chatLine[k].text, new Vector2((float) (0x58 + num257), (float) ((((Main.screenHeight - 30) + num258) - 0x1c) - (k * 0x13))), color30, 0f, vector10, (float) 0.85f, SpriteEffects.None, 0f);
                        }
                    }
                }
                if (player[myPlayer].dead)
                {
                    string str31 = "You were slain...";
                    vector10 = new Vector2();
                    this.spriteBatch.DrawString(fontDeathText, str31, new Vector2((float) ((screenWidth / 2) - (str31.Length * 10)), (float) ((Main.screenHeight / 2) - 20)), player[myPlayer].GetDeathAlpha(new Color(0, 0, 0, 0)), 0f, vector10, (float) 1f, SpriteEffects.None, 0f);
                }
                vector10 = new Vector2();
                this.spriteBatch.Draw(cursorTexture, new Vector2((float) (mouseX + 1), (float) (mouseY + 1)), new Rectangle(0, 0, cursorTexture.Width, cursorTexture.Height), new Color((int) (cursorColor.R * 0.2f), (int) (cursorColor.G * 0.2f), (int) (cursorColor.B * 0.2f), (int) (cursorColor.A * 0.5f)), 0f, vector10, (float) (Main.cursorScale * 1.1f), SpriteEffects.None, 0f);
                vector10 = new Vector2();
                this.spriteBatch.Draw(cursorTexture, new Vector2((float) mouseX, (float) mouseY), new Rectangle(0, 0, cursorTexture.Width, cursorTexture.Height), cursorColor, 0f, vector10, Main.cursorScale, SpriteEffects.None, 0f);
                if ((Main.mouseItem.type > 0) && (Main.mouseItem.stack > 0))
                {
                    this.mouseNPC = -1;
                    player[myPlayer].showItemIcon = false;
                    player[myPlayer].showItemIcon2 = 0;
                    flag = true;
                    float num259 = 1f;
                    if ((itemTexture[Main.mouseItem.type].Width > 0x20) || (itemTexture[Main.mouseItem.type].Height > 0x20))
                    {
                        if (itemTexture[Main.mouseItem.type].Width > itemTexture[Main.mouseItem.type].Height)
                        {
                            num259 = 32f / ((float) itemTexture[Main.mouseItem.type].Width);
                        }
                        else
                        {
                            num259 = 32f / ((float) itemTexture[Main.mouseItem.type].Height);
                        }
                    }
                    float num260 = 1f;
                    num260 *= Main.cursorScale;
                    Color color31 = Color.White;
                    num259 *= num260;
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(itemTexture[Main.mouseItem.type], new Vector2((mouseX + (26f * num260)) - ((itemTexture[Main.mouseItem.type].Width * 0.5f) * num259), (mouseY + (26f * num260)) - ((itemTexture[Main.mouseItem.type].Height * 0.5f) * num259)), new Rectangle(0, 0, itemTexture[Main.mouseItem.type].Width, itemTexture[Main.mouseItem.type].Height), Main.mouseItem.GetAlpha(color31), 0f, vector10, num259, SpriteEffects.None, 0f);
                    color34 = new Color();
                    if (Main.mouseItem.color != color34)
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.Draw(itemTexture[Main.mouseItem.type], new Vector2((mouseX + (26f * num260)) - ((itemTexture[Main.mouseItem.type].Width * 0.5f) * num259), (mouseY + (26f * num260)) - ((itemTexture[Main.mouseItem.type].Height * 0.5f) * num259)), new Rectangle(0, 0, itemTexture[Main.mouseItem.type].Width, itemTexture[Main.mouseItem.type].Height), Main.mouseItem.GetColor(color31), 0f, vector10, num259, SpriteEffects.None, 0f);
                    }
                    if (Main.mouseItem.stack > 1)
                    {
                        vector10 = new Vector2();
                        this.spriteBatch.DrawString(fontItemStack, Main.mouseItem.stack.ToString(), new Vector2(mouseX + (10f * num260), mouseY + (26f * num260)), color31, 0f, vector10, num259, SpriteEffects.None, 0f);
                    }
                }
                else if (this.mouseNPC > -1)
                {
                    player[myPlayer].mouseInterface = true;
                    flag = false;
                    float num261 = 1f;
                    num261 *= Main.cursorScale;
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(npcHeadTexture[this.mouseNPC], new Vector2((mouseX + (26f * num261)) - ((npcHeadTexture[this.mouseNPC].Width * 0.5f) * num261), (mouseY + (26f * num261)) - ((npcHeadTexture[this.mouseNPC].Height * 0.5f) * num261)), new Rectangle(0, 0, npcHeadTexture[this.mouseNPC].Width, npcHeadTexture[this.mouseNPC].Height), Color.White, 0f, vector10, num261, SpriteEffects.None, 0f);
                    if (mouseRight && mouseRightRelease)
                    {
                        PlaySound(12, -1, -1, 1);
                        this.mouseNPC = -1;
                    }
                    if (mouseLeft && mouseLeftRelease)
                    {
                        if (this.mouseNPC == 0)
                        {
                            int x = (int) ((mouseX + screenPosition.X) / 16f);
                            int num263 = (int) ((mouseY + screenPosition.Y) / 16f);
                            int num264 = -1;
                            if (WorldGen.MoveNPC(x, num263, num264))
                            {
                                NewText("This housing is suitable.", 0xff, 240, 20);
                            }
                        }
                        else
                        {
                            int num265 = 0;
                            for (int num266 = 0; num266 < 200; num266++)
                            {
                                if (npc[num266].active && (npc[num266].type == NPC.NumToType(this.mouseNPC)))
                                {
                                    num265 = num266;
                                    break;
                                }
                            }
                            if (num265 >= 0)
                            {
                                int num267 = (int) ((mouseX + screenPosition.X) / 16f);
                                int num268 = (int) ((mouseY + screenPosition.Y) / 16f);
                                if (WorldGen.MoveNPC(num267, num268, num265))
                                {
                                    this.mouseNPC = -1;
                                    WorldGen.moveRoom(num267, num268, num265);
                                    PlaySound(12, -1, -1, 1);
                                }
                            }
                            else
                            {
                                this.mouseNPC = 0;
                            }
                        }
                    }
                }
                Rectangle rectangle3 = new Rectangle(mouseX + ((int) screenPosition.X), mouseY + ((int) screenPosition.Y), 1, 1);
                if (!flag)
                {
                    int num269 = (0x1a * player[myPlayer].statLifeMax) / num50;
                    int num270 = 0;
                    if (player[myPlayer].statLifeMax > 200)
                    {
                        num269 = 260;
                        num270 += 0x1a;
                    }
                    if (((mouseX > (500 + num48)) && (mouseX < ((500 + num269) + num48))) && ((mouseY > 0x20) && (mouseY < ((0x20 + heartTexture.Height) + num270))))
                    {
                        player[myPlayer].showItemIcon = false;
                        string str32 = player[myPlayer].statLife + "/" + player[myPlayer].statLifeMax;
                        this.MouseText(str32, 0, 0);
                        flag = true;
                    }
                }
                if (!flag)
                {
                    int num271 = 0x18;
                    int num272 = (0x1c * player[myPlayer].statManaMax2) / num58;
                    if (((mouseX > (0x2fa + num48)) && (mouseX < ((0x2fa + num271) + num48))) && ((mouseY > 30) && (mouseY < (30 + num272))))
                    {
                        player[myPlayer].showItemIcon = false;
                        string str33 = player[myPlayer].statMana + "/" + player[myPlayer].statManaMax2;
                        this.MouseText(str33, 0, 0);
                        flag = true;
                    }
                }
                if (!flag)
                {
                    for (int num273 = 0; num273 < 200; num273++)
                    {
                        if (item[num273].active)
                        {
                            Rectangle rectangle4 = new Rectangle((int) ((item[num273].position.X + (item[num273].width * 0.5)) - (itemTexture[item[num273].type].Width * 0.5)), (((int) item[num273].position.Y) + item[num273].height) - itemTexture[item[num273].type].Height, itemTexture[item[num273].type].Width, itemTexture[item[num273].type].Height);
                            if (rectangle3.Intersects(rectangle4))
                            {
                                player[myPlayer].showItemIcon = false;
                                string str34 = item[num273].AffixName();
                                if (item[num273].stack > 1)
                                {
                                    obj2 = str34;
                                    str34 = string.Concat(new object[] { obj2, " (", item[num273].stack, ")" });
                                }
                                if ((item[num273].owner < 0xff) && showItemOwner)
                                {
                                    str34 = str34 + " <" + player[item[num273].owner].name + ">";
                                }
                                rare = item[num273].rare;
                                this.MouseText(str34, rare, 0);
                                flag = true;
                                break;
                            }
                        }
                    }
                }
                for (int m = 0; m < 0xff; m++)
                {
                    if ((player[m].active && (myPlayer != m)) && !player[m].dead)
                    {
                        Rectangle rectangle5 = new Rectangle((int) ((player[m].position.X + (player[m].width * 0.5)) - 16.0), (int) ((player[m].position.Y + player[m].height) - 48f), 0x20, 0x30);
                        if (!flag && rectangle3.Intersects(rectangle5))
                        {
                            player[myPlayer].showItemIcon = false;
                            int statLife = player[m].statLife;
                            if (statLife < 0)
                            {
                                statLife = 0;
                            }
                            string str35 = string.Concat(new object[] { player[m].name, ": ", statLife, "/", player[m].statLifeMax });
                            if (player[m].hostile)
                            {
                                str35 = str35 + " (PvP)";
                            }
                            this.MouseText(str35, 0, player[m].difficulty);
                        }
                    }
                }
                if (!flag)
                {
                    for (int num276 = 0; num276 < 200; num276++)
                    {
                        if (npc[num276].active)
                        {
                            Rectangle rectangle6 = new Rectangle((int) ((npc[num276].position.X + (npc[num276].width * 0.5)) - (npcTexture[npc[num276].type].Width * 0.5)), (((int) npc[num276].position.Y) + npc[num276].height) - (npcTexture[npc[num276].type].Height / npcFrameCount[npc[num276].type]), npcTexture[npc[num276].type].Width, npcTexture[npc[num276].type].Height / npcFrameCount[npc[num276].type]);
                            if ((npc[num276].type >= 0x57) && (npc[num276].type <= 0x5c))
                            {
                                rectangle6 = new Rectangle((int) ((npc[num276].position.X + (npc[num276].width * 0.5)) - 32.0), (int) ((npc[num276].position.Y + (npc[num276].height * 0.5)) - 32.0), 0x40, 0x40);
                            }
                            if (rectangle3.Intersects(rectangle6) && ((npc[num276].type != 0x55) || (npc[num276].ai[0] != 0f)))
                            {
                                bool flag9 = false;
                                if ((npc[num276].townNPC || (npc[num276].type == 0x69)) || ((npc[num276].type == 0x6a) || (npc[num276].type == 0x7b)))
                                {
                                    Rectangle rectangle7 = new Rectangle((((int) player[myPlayer].position.X) + (player[myPlayer].width / 2)) - (Player.tileRangeX * 0x10), (((int) player[myPlayer].position.Y) + (player[myPlayer].height / 2)) - (Player.tileRangeY * 0x10), (Player.tileRangeX * 0x10) * 2, (Player.tileRangeY * 0x10) * 2);
                                    Rectangle rectangle8 = new Rectangle((int) npc[num276].position.X, (int) npc[num276].position.Y, npc[num276].width, npc[num276].height);
                                    if (rectangle7.Intersects(rectangle8))
                                    {
                                        flag9 = true;
                                    }
                                }
                                if (flag9 && !player[myPlayer].dead)
                                {
                                    int num277 = -((npc[num276].width / 2) + 8);
                                    SpriteEffects effects = SpriteEffects.None;
                                    if (npc[num276].spriteDirection == -1)
                                    {
                                        effects = SpriteEffects.FlipHorizontally;
                                        num277 = (npc[num276].width / 2) + 8;
                                    }
                                    vector10 = new Vector2();
                                    this.spriteBatch.Draw(chatTexture, new Vector2((((npc[num276].position.X + (npc[num276].width / 2)) - screenPosition.X) - (chatTexture.Width / 2)) - num277, (npc[num276].position.Y - chatTexture.Height) - screenPosition.Y), new Rectangle(0, 0, chatTexture.Width, chatTexture.Height), new Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector10, (float) 1f, effects, 0f);
                                    if (mouseRight && npcChatRelease)
                                    {
                                        npcChatRelease = false;
                                        if (player[myPlayer].talkNPC != num276)
                                        {
                                            player[myPlayer].sign = -1;
                                            editSign = false;
                                            player[myPlayer].talkNPC = num276;
                                            playerInventory = false;
                                            player[myPlayer].chest = -1;
                                            npcChatText = npc[num276].GetChat();
                                            PlaySound(0x18, -1, -1, 1);
                                        }
                                    }
                                }
                                player[myPlayer].showItemIcon = false;
                                string displayName = npc[num276].displayName;
                                int realLife = num276;
                                if (npc[num276].realLife >= 0)
                                {
                                    realLife = npc[num276].realLife;
                                }
                                if ((npc[realLife].lifeMax > 1) && !npc[realLife].dontTakeDamage)
                                {
                                    obj2 = displayName;
                                    displayName = string.Concat(new object[] { obj2, ": ", npc[realLife].life, "/", npc[realLife].lifeMax });
                                }
                                this.MouseText(displayName, 0, 0);
                                break;
                            }
                        }
                    }
                }
                if (mouseRight)
                {
                    npcChatRelease = false;
                }
                else
                {
                    npcChatRelease = true;
                }
                if (player[myPlayer].showItemIcon && ((player[myPlayer].inventory[player[myPlayer].selectedItem].type > 0) || (player[myPlayer].showItemIcon2 > 0)))
                {
                    int type = player[myPlayer].inventory[player[myPlayer].selectedItem].type;
                    Color color32 = player[myPlayer].inventory[player[myPlayer].selectedItem].GetAlpha(Color.White);
                    Color color33 = player[myPlayer].inventory[player[myPlayer].selectedItem].GetColor(Color.White);
                    if (player[myPlayer].showItemIcon2 > 0)
                    {
                        type = player[myPlayer].showItemIcon2;
                        color32 = Color.White;
                        color33 = new Color();
                    }
                    float cursorScale = 1f;
                    cursorScale = Main.cursorScale;
                    vector10 = new Vector2();
                    this.spriteBatch.Draw(itemTexture[type], new Vector2((float) (mouseX + 10), (float) (mouseY + 10)), new Rectangle(0, 0, itemTexture[type].Width, itemTexture[type].Height), color32, 0f, vector10, cursorScale, SpriteEffects.None, 0f);
                    if ((player[myPlayer].showItemIcon2 == 0) && (player[myPlayer].inventory[player[myPlayer].selectedItem].color != new Color()))
                    {
                        this.spriteBatch.Draw(itemTexture[player[myPlayer].inventory[player[myPlayer].selectedItem].type], new Vector2((float) (mouseX + 10), (float) (mouseY + 10)), new Rectangle(0, 0, itemTexture[player[myPlayer].inventory[player[myPlayer].selectedItem].type].Width, itemTexture[player[myPlayer].inventory[player[myPlayer].selectedItem].type].Height), color33, 0f, new Vector2(), cursorScale, SpriteEffects.None, 0f);
                    }
                }
                player[myPlayer].showItemIcon = false;
                player[myPlayer].showItemIcon2 = 0;
            }
        }

        protected void DrawMenu()
        {
            string[] strArray3 = new string[1];
            Vector2 vector9;
            render = false;
            Star.UpdateStars();
            Cloud.UpdateClouds();
            holyTiles = 0;
            evilTiles = 0;
            jungleTiles = 0;
            chatMode = false;
            for (int i = 0; i < numChatLines; i++)
            {
                chatLine[i] = new ChatLine();
            }
            this.DrawFPS();
            screenLastPosition = screenPosition;
            screenPosition.Y = (float) ((worldSurface * 16.0) - screenHeight);
            if (grabSky)
            {
                screenPosition.X += (mouseX - (screenWidth / 2)) * 0.02f;
            }
            else
            {
                screenPosition.X += 2f;
            }
            if (screenPosition.X > 2.147484E+09f)
            {
                screenPosition.X = 0f;
            }
            if (screenPosition.X < -2.147484E+09f)
            {
                screenPosition.X = 0f;
            }
            background = 0;
            byte r = (byte) ((0xff + (tileColor.R * 2)) / 3);
            Color color = new Color(r, r, r, 0xff);
            this.logoRotation += this.logoRotationSpeed * 3E-05f;
            if (this.logoRotation > 0.1)
            {
                this.logoRotationDirection = -1f;
            }
            else if (this.logoRotation < -0.1)
            {
                this.logoRotationDirection = 1f;
            }
            if ((this.logoRotationSpeed < 20f) & (this.logoRotationDirection == 1f))
            {
                this.logoRotationSpeed++;
            }
            else if ((this.logoRotationSpeed > -20f) & (this.logoRotationDirection == -1f))
            {
                this.logoRotationSpeed--;
            }
            this.logoScale += this.logoScaleSpeed * 1E-05f;
            if (this.logoScale > 1.1)
            {
                this.logoScaleDirection = -1f;
            }
            else if (this.logoScale < 0.9)
            {
                this.logoScaleDirection = 1f;
            }
            if ((this.logoScaleSpeed < 50f) & (this.logoScaleDirection == 1f))
            {
                this.logoScaleSpeed++;
            }
            else if ((this.logoScaleSpeed > -50f) & (this.logoScaleDirection == -1f))
            {
                this.logoScaleSpeed--;
            }
            Color color2 = new Color((int) ((byte) (color.R * (((float) LogoA) / 255f))), (int) ((byte) (color.G * (((float) LogoA) / 255f))), (int) ((byte) (color.B * (((float) LogoA) / 255f))), (int) ((byte) (color.A * (((float) LogoA) / 255f))));
            Color color3 = new Color((int) ((byte) (color.R * (((float) LogoB) / 255f))), (int) ((byte) (color.G * (((float) LogoB) / 255f))), (int) ((byte) (color.B * (((float) LogoB) / 255f))), (int) ((byte) (color.A * (((float) LogoB) / 255f))));
            LogoT = false;
            if (!LogoT)
            {
                this.spriteBatch.Draw(logoTexture, new Vector2((float) (screenWidth / 2), 100f), new Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color2, this.logoRotation, new Vector2((float) (logoTexture.Width / 2), (float) (logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
            }
            else
            {
                this.spriteBatch.Draw(logo3Texture, new Vector2((float) (screenWidth / 2), 100f), new Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color2, this.logoRotation, new Vector2((float) (logoTexture.Width / 2), (float) (logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
            }
            this.spriteBatch.Draw(logo2Texture, new Vector2((float) (screenWidth / 2), 100f), new Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color3, this.logoRotation, new Vector2((float) (logoTexture.Width / 2), (float) (logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
            if (dayTime)
            {
                LogoA += 2;
                if (LogoA > 0xff)
                {
                    LogoA = 0xff;
                }
                LogoB--;
                if (LogoB < 0)
                {
                    LogoB = 0;
                }
            }
            else
            {
                LogoB += 2;
                if (LogoB > 0xff)
                {
                    LogoB = 0xff;
                }
                LogoA--;
                if (LogoA < 0)
                {
                    LogoA = 0;
                    LogoT = true;
                }
            }
            int num3 = 250;
            int num4 = screenWidth / 2;
            int num5 = 80;
            int num6 = 0;
            int menuMode = Main.menuMode;
            int index = -1;
            int num9 = 0;
            int num10 = 0;
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            int num11 = 0;
            bool[] flagArray = new bool[maxMenuItems];
            bool[] flagArray2 = new bool[maxMenuItems];
            int[] numArray = new int[maxMenuItems];
            int[] numArray2 = new int[maxMenuItems];
            byte[] buffer = new byte[maxMenuItems];
            float[] numArray3 = new float[maxMenuItems];
            bool[] flagArray3 = new bool[maxMenuItems];
            for (int j = 0; j < maxMenuItems; j++)
            {
                flagArray[j] = false;
                flagArray2[j] = false;
                numArray[j] = 0;
                numArray2[j] = 0;
                numArray3[j] = 1f;
            }
            string[] strArray = new string[maxMenuItems];
            if (Main.menuMode == -1)
            {
                Main.menuMode = 0;
            }
            if (netMode == 2)
            {
                bool flag4 = true;
                for (int num13 = 0; num13 < 8; num13++)
                {
                    if (num13 < 0xff)
                    {
                        try
                        {
                            strArray[num13] = Netplay.serverSock[num13].statusText;
                            if (Netplay.serverSock[num13].active && showSpam)
                            {
                                IntPtr ptr = new IntPtr();
                                object obj2 = strArray3[(int) ptr];
                                (strArray3 = strArray)[(int) (ptr = (IntPtr) num13)] = string.Concat(new object[] { obj2, " (", NetMessage.buffer[num13].spamCount, ")" });
                            }
                        }
                        catch
                        {
                            strArray[num13] = "";
                        }
                        flagArray[num13] = true;
                        if ((strArray[num13] != "") && (strArray[num13] != null))
                        {
                            flag4 = false;
                        }
                    }
                }
                if (flag4)
                {
                    strArray[0] = "Start a new instance of Terraria to join!";
                    strArray[1] = "Running on port " + Netplay.serverPort + ".";
                }
                num6 = 11;
                strArray[9] = statusText;
                flagArray[9] = true;
                num3 = 170;
                num5 = 30;
                numArray[10] = 20;
                numArray[10] = 40;
                strArray[10] = "Disconnect";
                if (this.selectedMenu == 10)
                {
                    Netplay.disconnect = true;
                    PlaySound(11, -1, -1, 1);
                }
                goto Label_3687;
            }
            if (Main.menuMode == 0x1f)
            {
                string password = Netplay.password;
                Netplay.password = GetInputText(Netplay.password);
                if (password != Netplay.password)
                {
                    PlaySound(12, -1, -1, 1);
                }
                strArray[0] = "Server Requires Password:";
                this.textBlinkerCount++;
                if (this.textBlinkerCount >= 20)
                {
                    if (this.textBlinkerState == 0)
                    {
                        this.textBlinkerState = 1;
                    }
                    else
                    {
                        this.textBlinkerState = 0;
                    }
                    this.textBlinkerCount = 0;
                }
                strArray[1] = Netplay.password;
                if (this.textBlinkerState == 1)
                {
                    (strArray3 = strArray)[1] = strArray3[1] + "|";
                    numArray2[1] = 1;
                }
                else
                {
                    (strArray3 = strArray)[1] = strArray3[1] + " ";
                }
                flagArray[0] = true;
                flagArray[1] = true;
                numArray[1] = -20;
                numArray[2] = 20;
                strArray[2] = "Accept";
                strArray[3] = "Back";
                num6 = 4;
                if (this.selectedMenu == 3)
                {
                    PlaySound(11, -1, -1, 1);
                    Main.menuMode = 0;
                    Netplay.disconnect = true;
                    Netplay.password = "";
                }
                else if ((this.selectedMenu == 2) || inputTextEnter)
                {
                    NetMessage.SendData(0x26, -1, -1, Netplay.password, 0, 0f, 0f, 0f, 0);
                    Main.menuMode = 14;
                }
                goto Label_3687;
            }
            if ((netMode == 1) || (Main.menuMode == 14))
            {
                num6 = 2;
                strArray[0] = statusText;
                flagArray[0] = true;
                num3 = 300;
                strArray[1] = "Cancel";
                if (this.selectedMenu == 1)
                {
                    Netplay.disconnect = true;
                    Netplay.clientSock.tcpClient.Close();
                    PlaySound(11, -1, -1, 1);
                    Main.menuMode = 0;
                    netMode = 0;
                    try
                    {
                        this.tServer.Kill();
                    }
                    catch
                    {
                    }
                }
                goto Label_3687;
            }
            if (Main.menuMode == 30)
            {
                string str2 = Netplay.password;
                Netplay.password = GetInputText(Netplay.password);
                if (str2 != Netplay.password)
                {
                    PlaySound(12, -1, -1, 1);
                }
                strArray[0] = "Enter Server Password:";
                this.textBlinkerCount++;
                if (this.textBlinkerCount >= 20)
                {
                    if (this.textBlinkerState == 0)
                    {
                        this.textBlinkerState = 1;
                    }
                    else
                    {
                        this.textBlinkerState = 0;
                    }
                    this.textBlinkerCount = 0;
                }
                strArray[1] = Netplay.password;
                if (this.textBlinkerState == 1)
                {
                    (strArray3 = strArray)[1] = strArray3[1] + "|";
                    numArray2[1] = 1;
                }
                else
                {
                    (strArray3 = strArray)[1] = strArray3[1] + " ";
                }
                flagArray[0] = true;
                flagArray[1] = true;
                numArray[1] = -20;
                numArray[2] = 20;
                strArray[2] = "Accept";
                strArray[3] = "Back";
                num6 = 4;
                if (this.selectedMenu == 3)
                {
                    PlaySound(11, -1, -1, 1);
                    Main.menuMode = 6;
                    Netplay.password = "";
                }
                else if (((this.selectedMenu == 2) || inputTextEnter) || autoPass)
                {
                    this.tServer.StartInfo.FileName = "TerrariaServer.exe";
                    this.tServer.StartInfo.Arguments = "-autoshutdown -world \"" + worldPathName + "\" -password \"" + Netplay.password + "\"";
                    if (libPath != "")
                    {
                        ProcessStartInfo startInfo = this.tServer.StartInfo;
                        startInfo.Arguments = startInfo.Arguments + " -loadlib " + libPath;
                    }
                    this.tServer.StartInfo.UseShellExecute = false;
                    this.tServer.StartInfo.CreateNoWindow = true;
                    this.tServer.Start();
                    Netplay.SetIP("127.0.0.1");
                    autoPass = true;
                    statusText = "Starting server...";
                    Netplay.StartClient();
                    Main.menuMode = 10;
                }
                goto Label_3687;
            }
            if (Main.menuMode == 15)
            {
                num6 = 2;
                strArray[0] = statusText;
                flagArray[0] = true;
                num3 = 80;
                num5 = 400;
                strArray[1] = "Back";
                if (this.selectedMenu == 1)
                {
                    Netplay.disconnect = true;
                    PlaySound(11, -1, -1, 1);
                    Main.menuMode = 0;
                    netMode = 0;
                }
                goto Label_3687;
            }
            if (Main.menuMode == 200)
            {
                num6 = 3;
                strArray[0] = "Load failed!";
                flagArray[0] = true;
                num3 -= 30;
                numArray[1] = 70;
                numArray[2] = 50;
                strArray[1] = "Load Backup";
                strArray[2] = "Cancel";
                if (this.selectedMenu == 1)
                {
                    if (File.Exists(worldPathName + ".bak"))
                    {
                        File.Copy(worldPathName + ".bak", worldPathName, true);
                        File.Delete(worldPathName + ".bak");
                        PlaySound(10, -1, -1, 1);
                        WorldGen.playWorld();
                        Main.menuMode = 10;
                    }
                    else
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 0;
                        netMode = 0;
                    }
                }
                if (this.selectedMenu == 2)
                {
                    PlaySound(11, -1, -1, 1);
                    Main.menuMode = 0;
                    netMode = 0;
                }
                goto Label_3687;
            }
            if (Main.menuMode == 0xc9)
            {
                num6 = 3;
                strArray[0] = "Load failed!";
                flagArray[0] = true;
                flagArray[1] = true;
                num3 -= 30;
                numArray[1] = -30;
                numArray[2] = 50;
                strArray[1] = "No backup found";
                strArray[2] = "Back";
                if (this.selectedMenu == 2)
                {
                    PlaySound(11, -1, -1, 1);
                    Main.menuMode = 0;
                    netMode = 0;
                }
                goto Label_3687;
            }
            if (Main.menuMode == 10)
            {
                num6 = 1;
                strArray[0] = statusText;
                flagArray[0] = true;
                num3 = 300;
                goto Label_3687;
            }
            if (Main.menuMode == 100)
            {
                num6 = 1;
                strArray[0] = statusText;
                flagArray[0] = true;
                num3 = 300;
                goto Label_3687;
            }
            if (Main.menuMode == 0)
            {
                menuMultiplayer = false;
                menuServer = false;
                netMode = 0;
                strArray[0] = "Play Terraria";
                strArray[1] = "Settings";
                //strArray[2] = "ZidoMod"; (work in progress) - BlueFly
                //strArray[3] = "Exit";
                strArray[2] = "Exit";
                num6 = 4;
                /*
                if (this.selectedMenu == 2)
                {
                    PlaySound(10, -1, -1, 1);
                    Main.menuMode = 12;
                }
                if (this.selectedMenu == 3)
                */
                if (this.selectedMenu == 2)
                {
                    this.QuitGame();
                }
                if (this.selectedMenu == 0)
                {
                    PlaySound(10, -1, -1, 1);
                    Main.menuMode = 12;
                }
                if (this.selectedMenu == 1)
                {
                    PlaySound(10, -1, -1, 1);
                    Main.menuMode = 11;
                }
                goto Label_3687;
            }
            if (Main.menuMode == 1)
            {
                myPlayer = 0;
                num3 = 190;
                num5 = 50;
                strArray[5] = "Create Character";
                strArray[6] = "Delete";
                if (numLoadPlayers == 5)
                {
                    flagArray2[5] = true;
                    strArray[5] = "";
                }
                else if (numLoadPlayers == 0)
                {
                    flagArray2[6] = true;
                    strArray[6] = "";
                }
                strArray[7] = "Back";
                for (int num14 = 0; num14 < 5; num14++)
                {
                    if (num14 < numLoadPlayers)
                    {
                        strArray[num14] = loadPlayer[num14].name;
                        buffer[num14] = loadPlayer[num14].difficulty;
                    }
                    else
                    {
                        strArray[num14] = null;
                    }
                }
                num6 = 8;
                if ((this.focusMenu >= 0) && (this.focusMenu < numLoadPlayers))
                {
                    index = this.focusMenu;
                    Vector2 vector = fontDeathText.MeasureString(strArray[index]);
                    num9 = (int) (((screenWidth / 2) + (vector.X * 0.5)) + 10.0);
                    num10 = (num3 + (num5 * this.focusMenu)) + 4;
                }
                if (this.selectedMenu == 7)
                {
                    autoJoin = false;
                    autoPass = false;
                    PlaySound(11, -1, -1, 1);
                    if (menuMultiplayer)
                    {
                        Main.menuMode = 12;
                        menuMultiplayer = false;
                        menuServer = false;
                    }
                    else
                    {
                        Main.menuMode = 0;
                    }
                }
                else if (this.selectedMenu == 5)
                {
                    loadPlayer[numLoadPlayers] = new Player();
                    loadPlayer[numLoadPlayers].inventory[0].SetDefaults("Copper Shortsword");
                    loadPlayer[numLoadPlayers].inventory[0].Prefix(-1);
                    loadPlayer[numLoadPlayers].inventory[1].SetDefaults("Copper Pickaxe");
                    loadPlayer[numLoadPlayers].inventory[1].Prefix(-1);
                    loadPlayer[numLoadPlayers].inventory[2].SetDefaults("Copper Axe");
                    loadPlayer[numLoadPlayers].inventory[2].Prefix(-1);
                    PlaySound(10, -1, -1, 1);
                    Main.menuMode = 2;
                }
                else if (this.selectedMenu == 6)
                {
                    PlaySound(10, -1, -1, 1);
                    Main.menuMode = 4;
                }
                else if (this.selectedMenu >= 0)
                {
                    if (menuMultiplayer)
                    {
                        this.selectedPlayer = this.selectedMenu;
                        player[myPlayer] = (Player) loadPlayer[this.selectedPlayer].Clone();
                        playerPathName = loadPlayerPath[this.selectedPlayer];
                        PlaySound(10, -1, -1, 1);
                        if (autoJoin)
                        {
                            if (Netplay.SetIP(Main.getIP))
                            {
                                Main.menuMode = 10;
                                Netplay.StartClient();
                            }
                            else if (Netplay.SetIP2(Main.getIP))
                            {
                                Main.menuMode = 10;
                                Netplay.StartClient();
                            }
                            autoJoin = false;
                        }
                        else if (menuServer)
                        {
                            LoadWorlds();
                            Main.menuMode = 6;
                        }
                        else
                        {
                            Main.menuMode = 13;
                        }
                    }
                    else
                    {
                        myPlayer = 0;
                        this.selectedPlayer = this.selectedMenu;
                        player[myPlayer] = (Player) loadPlayer[this.selectedPlayer].Clone();
                        playerPathName = loadPlayerPath[this.selectedPlayer];
                        LoadWorlds();
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 6;
                    }
                }
                goto Label_3687;
            }
            if (Main.menuMode != 2)
            {
                if (Main.menuMode == 0xde)
                {
                    if (this.focusMenu == 3)
                    {
                        strArray[0] = "Hardcore characters die for good";
                    }
                    else if (this.focusMenu == 2)
                    {
                        strArray[0] = "Mediumcore characters drop items on death";
                    }
                    else if (this.focusMenu == 1)
                    {
                        strArray[0] = "Softcore characters drop money on death";
                    }
                    else
                    {
                        strArray[0] = "Select difficulty";
                    }
                    num5 = 50;
                    numArray[1] = 0x19;
                    numArray[2] = 0x19;
                    numArray[3] = 0x19;
                    flagArray[0] = true;
                    strArray[1] = "Softcore";
                    strArray[2] = "Mediumcore";
                    buffer[2] = 1;
                    strArray[3] = "Hardcore";
                    buffer[3] = 2;
                    num6 = 4;
                    if (this.selectedMenu == 1)
                    {
                        loadPlayer[numLoadPlayers].difficulty = 0;
                        Main.menuMode = 2;
                    }
                    else if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 2;
                        loadPlayer[numLoadPlayers].difficulty = 1;
                    }
                    else if (this.selectedMenu == 3)
                    {
                        loadPlayer[numLoadPlayers].difficulty = 2;
                        Main.menuMode = 2;
                    }
                }
                else if (Main.menuMode == 20)
                {
                    if (this.selectedMenu == 0)
                    {
                        Main.menuMode = 0x15;
                        PlaySound(10, -1, -1, 1);
                        this.selColor = loadPlayer[numLoadPlayers].shirtColor;
                    }
                    if (this.selectedMenu == 1)
                    {
                        Main.menuMode = 0x16;
                        PlaySound(10, -1, -1, 1);
                        this.selColor = loadPlayer[numLoadPlayers].underShirtColor;
                    }
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 0x17;
                        PlaySound(10, -1, -1, 1);
                        this.selColor = loadPlayer[numLoadPlayers].pantsColor;
                    }
                    if (this.selectedMenu == 3)
                    {
                        this.selColor = loadPlayer[numLoadPlayers].shoeColor;
                        Main.menuMode = 0x18;
                        PlaySound(10, -1, -1, 1);
                    }
                    strArray[0] = "Shirt";
                    strArray[1] = "Undershirt";
                    strArray[2] = "Pants";
                    strArray[3] = "Shoes";
                    num3 = 260;
                    num5 = 50;
                    numArray[5] = 20;
                    strArray[5] = "Back";
                    num6 = 6;
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    if (this.selectedMenu == 5)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 2;
                    }
                }
                else if (Main.menuMode == 0x11)
                {
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    flag = true;
                    num11 = 390;
                    num3 = 260;
                    num5 = 60;
                    loadPlayer[index].hairColor = this.selColor;
                    num6 = 3;
                    strArray[0] = "Hair " + (loadPlayer[index].hair + 1);
                    strArray[1] = "Hair Color";
                    flagArray[1] = true;
                    numArray[2] = 150;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 0)
                    {
                        PlaySound(12, -1, -1, 1);
                        Player player1 = loadPlayer[index];
                        player1.hair++;
                        if (loadPlayer[index].hair >= 0x24)
                        {
                            loadPlayer[index].hair = 0;
                        }
                    }
                    else if (this.selectedMenu2 == 0)
                    {
                        PlaySound(12, -1, -1, 1);
                        Player player2 = loadPlayer[index];
                        player2.hair--;
                        if (loadPlayer[index].hair < 0)
                        {
                            loadPlayer[index].hair = 0x23;
                        }
                    }
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 2;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Main.menuMode == 0x12)
                {
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    flag = true;
                    num11 = 370;
                    num3 = 240;
                    num5 = 60;
                    loadPlayer[index].eyeColor = this.selColor;
                    num6 = 3;
                    strArray[0] = "";
                    strArray[1] = "Eye Color";
                    flagArray[1] = true;
                    numArray[2] = 170;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 2;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Main.menuMode == 0x13)
                {
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    flag = true;
                    num11 = 370;
                    num3 = 240;
                    num5 = 60;
                    loadPlayer[index].skinColor = this.selColor;
                    num6 = 3;
                    strArray[0] = "";
                    strArray[1] = "Skin Color";
                    flagArray[1] = true;
                    numArray[2] = 170;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 2;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Main.menuMode == 0x15)
                {
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    flag = true;
                    num11 = 370;
                    num3 = 240;
                    num5 = 60;
                    loadPlayer[index].shirtColor = this.selColor;
                    num6 = 3;
                    strArray[0] = "";
                    strArray[1] = "Shirt Color";
                    flagArray[1] = true;
                    numArray[2] = 170;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 20;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Main.menuMode == 0x16)
                {
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    flag = true;
                    num11 = 370;
                    num3 = 240;
                    num5 = 60;
                    loadPlayer[index].underShirtColor = this.selColor;
                    num6 = 3;
                    strArray[0] = "";
                    strArray[1] = "Undershirt Color";
                    flagArray[1] = true;
                    numArray[2] = 170;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 20;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Main.menuMode == 0x17)
                {
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    flag = true;
                    num11 = 370;
                    num3 = 240;
                    num5 = 60;
                    loadPlayer[index].pantsColor = this.selColor;
                    num6 = 3;
                    strArray[0] = "";
                    strArray[1] = "Pants Color";
                    flagArray[1] = true;
                    numArray[2] = 170;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 20;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Main.menuMode == 0x18)
                {
                    index = numLoadPlayers;
                    num9 = (screenWidth / 2) - 0x10;
                    num10 = 210;
                    flag = true;
                    num11 = 370;
                    num3 = 240;
                    num5 = 60;
                    loadPlayer[index].shoeColor = this.selColor;
                    num6 = 3;
                    strArray[0] = "";
                    strArray[1] = "Shoe Color";
                    flagArray[1] = true;
                    numArray[2] = 170;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 2)
                    {
                        Main.menuMode = 20;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Main.menuMode == 3)
                {
                    string name = loadPlayer[numLoadPlayers].name;
                    loadPlayer[numLoadPlayers].name = GetInputText(loadPlayer[numLoadPlayers].name);
                    if (loadPlayer[numLoadPlayers].name.Length > Player.nameLen)
                    {
                        loadPlayer[numLoadPlayers].name = loadPlayer[numLoadPlayers].name.Substring(0, Player.nameLen);
                    }
                    if (name != loadPlayer[numLoadPlayers].name)
                    {
                        PlaySound(12, -1, -1, 1);
                    }
                    strArray[0] = "Enter Character Name:";
                    flagArray2[2] = true;
                    if (loadPlayer[numLoadPlayers].name != "")
                    {
                        if (loadPlayer[numLoadPlayers].name.Substring(0, 1) == " ")
                        {
                            loadPlayer[numLoadPlayers].name = "";
                        }
                        for (int num18 = 0; num18 < loadPlayer[numLoadPlayers].name.Length; num18++)
                        {
                            if (loadPlayer[numLoadPlayers].name.Substring(num18, 1) != " ")
                            {
                                flagArray2[2] = false;
                            }
                        }
                    }
                    this.textBlinkerCount++;
                    if (this.textBlinkerCount >= 20)
                    {
                        if (this.textBlinkerState == 0)
                        {
                            this.textBlinkerState = 1;
                        }
                        else
                        {
                            this.textBlinkerState = 0;
                        }
                        this.textBlinkerCount = 0;
                    }
                    strArray[1] = loadPlayer[numLoadPlayers].name;
                    if (this.textBlinkerState == 1)
                    {
                        (strArray3 = strArray)[1] = strArray3[1] + "|";
                        numArray2[1] = 1;
                    }
                    else
                    {
                        (strArray3 = strArray)[1] = strArray3[1] + " ";
                    }
                    flagArray[0] = true;
                    flagArray[1] = true;
                    numArray[1] = -20;
                    numArray[2] = 20;
                    strArray[2] = "Accept";
                    strArray[3] = "Back";
                    num6 = 4;
                    if (this.selectedMenu == 3)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 2;
                    }
                    if ((this.selectedMenu == 2) || (!flagArray2[2] && inputTextEnter))
                    {
                        loadPlayer[numLoadPlayers].name.Trim();
                        loadPlayerPath[numLoadPlayers] = nextLoadPlayer();
                        Player.SavePlayer(loadPlayer[numLoadPlayers], loadPlayerPath[numLoadPlayers]);
                        LoadPlayers();
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 1;
                    }
                }
                else if (Main.menuMode == 4)
                {
                    num3 = 220;
                    num5 = 60;
                    strArray[5] = "Back";
                    for (int num19 = 0; num19 < 5; num19++)
                    {
                        if (num19 < numLoadPlayers)
                        {
                            strArray[num19] = loadPlayer[num19].name;
                            buffer[num19] = loadPlayer[num19].difficulty;
                        }
                        else
                        {
                            strArray[num19] = null;
                        }
                    }
                    num6 = 6;
                    if ((this.focusMenu >= 0) && (this.focusMenu < numLoadPlayers))
                    {
                        index = this.focusMenu;
                        Vector2 vector2 = fontDeathText.MeasureString(strArray[index]);
                        num9 = (int) (((screenWidth / 2) + (vector2.X * 0.5)) + 10.0);
                        num10 = (num3 + (num5 * this.focusMenu)) + 4;
                    }
                    if (this.selectedMenu == 5)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 1;
                    }
                    else if (this.selectedMenu >= 0)
                    {
                        this.selectedPlayer = this.selectedMenu;
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 5;
                    }
                }
                else if (Main.menuMode == 5)
                {
                    strArray[0] = "Delete " + loadPlayer[this.selectedPlayer].name + "?";
                    flagArray[0] = true;
                    strArray[1] = "Yes";
                    strArray[2] = "No";
                    num6 = 3;
                    if (this.selectedMenu == 1)
                    {
                        ErasePlayer(this.selectedPlayer);
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 1;
                    }
                    else if (this.selectedMenu == 2)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 1;
                    }
                }
                else if (Main.menuMode == 6)
                {
                    num3 = 190;
                    num5 = 50;
                    strArray[5] = "Create World";
                    strArray[6] = "Delete";
                    if (numLoadWorlds == 5)
                    {
                        flagArray2[5] = true;
                        strArray[5] = "";
                    }
                    else if (numLoadWorlds == 0)
                    {
                        flagArray2[6] = true;
                        strArray[6] = "";
                    }
                    strArray[7] = "Back";
                    for (int num20 = 0; num20 < 5; num20++)
                    {
                        if (num20 < numLoadWorlds)
                        {
                            strArray[num20] = loadWorld[num20];
                        }
                        else
                        {
                            strArray[num20] = null;
                        }
                    }
                    num6 = 8;
                    if (this.selectedMenu == 7)
                    {
                        if (menuMultiplayer)
                        {
                            Main.menuMode = 12;
                        }
                        else
                        {
                            Main.menuMode = 1;
                        }
                        PlaySound(11, -1, -1, 1);
                    }
                    else if (this.selectedMenu == 5)
                    {
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 0x10;
                        Main.newWorldName = "World " + (numLoadWorlds + 1);
                    }
                    else if (this.selectedMenu == 6)
                    {
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 8;
                    }
                    else if (this.selectedMenu >= 0)
                    {
                        if (menuMultiplayer)
                        {
                            PlaySound(10, -1, -1, 1);
                            worldPathName = loadWorldPath[this.selectedMenu];
                            Main.menuMode = 30;
                        }
                        else
                        {
                            PlaySound(10, -1, -1, 1);
                            worldPathName = loadWorldPath[this.selectedMenu];
                            WorldGen.playWorld();
                            Main.menuMode = 10;
                        }
                    }
                }
                else if (Main.menuMode == 7)
                {
                    string newWorldName = Main.newWorldName;
                    Main.newWorldName = GetInputText(Main.newWorldName);
                    if (Main.newWorldName.Length > 20)
                    {
                        Main.newWorldName = Main.newWorldName.Substring(0, 20);
                    }
                    if (newWorldName != Main.newWorldName)
                    {
                        PlaySound(12, -1, -1, 1);
                    }
                    strArray[0] = "Enter World Name:";
                    flagArray2[2] = true;
                    if (Main.newWorldName != "")
                    {
                        if (Main.newWorldName.Substring(0, 1) == " ")
                        {
                            Main.newWorldName = "";
                        }
                        for (int num21 = 0; num21 < Main.newWorldName.Length; num21++)
                        {
                            if (Main.newWorldName != " ")
                            {
                                flagArray2[2] = false;
                            }
                        }
                    }
                    this.textBlinkerCount++;
                    if (this.textBlinkerCount >= 20)
                    {
                        if (this.textBlinkerState == 0)
                        {
                            this.textBlinkerState = 1;
                        }
                        else
                        {
                            this.textBlinkerState = 0;
                        }
                        this.textBlinkerCount = 0;
                    }
                    strArray[1] = Main.newWorldName;
                    if (this.textBlinkerState == 1)
                    {
                        (strArray3 = strArray)[1] = strArray3[1] + "|";
                        numArray2[1] = 1;
                    }
                    else
                    {
                        (strArray3 = strArray)[1] = strArray3[1] + " ";
                    }
                    flagArray[0] = true;
                    flagArray[1] = true;
                    numArray[1] = -20;
                    numArray[2] = 20;
                    strArray[2] = "Accept";
                    strArray[3] = "Back";
                    num6 = 4;
                    if (this.selectedMenu == 3)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 0x10;
                    }
                    if ((this.selectedMenu == 2) || (!flagArray2[2] && inputTextEnter))
                    {
                        Main.menuMode = 10;
                        worldName = Main.newWorldName;
                        worldPathName = nextLoadWorld();
                        WorldGen.CreateNewWorld();
                    }
                }
                else if (Main.menuMode == 8)
                {
                    num3 = 220;
                    num5 = 60;
                    strArray[5] = "Back";
                    for (int num22 = 0; num22 < 5; num22++)
                    {
                        if (num22 < numLoadWorlds)
                        {
                            strArray[num22] = loadWorld[num22];
                        }
                        else
                        {
                            strArray[num22] = null;
                        }
                    }
                    num6 = 6;
                    if (this.selectedMenu == 5)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 1;
                    }
                    else if (this.selectedMenu >= 0)
                    {
                        this.selectedWorld = this.selectedMenu;
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 9;
                    }
                }
                else if (Main.menuMode == 9)
                {
                    strArray[0] = "Delete " + loadWorld[this.selectedWorld] + "?";
                    flagArray[0] = true;
                    strArray[1] = "Yes";
                    strArray[2] = "No";
                    num6 = 3;
                    if (this.selectedMenu == 1)
                    {
                        EraseWorld(this.selectedWorld);
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 6;
                    }
                    else if (this.selectedMenu == 2)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 6;
                    }
                }
                else if (Main.menuMode == 0x457)
                {
                    num3 = 220;
                    num5 = 50;
                    numArray[6] = 10;
                    num6 = 7;
                    if (this.graphics.IsFullScreen)
                    {
                        strArray[0] = "Go Windowed";
                    }
                    else
                    {
                        strArray[0] = "Go Fullscreen";
                    }
                    this.bgScroll = (int) Math.Round((double) ((1f - caveParrallax) * 500f));
                    strArray[1] = "Resolution";
                    strArray[2] = "Parallax";
                    if (fixedTiming)
                    {
                        strArray[3] = "Frame Skip Off (Not Recommended)";
                    }
                    else
                    {
                        strArray[3] = "Frame Skip On (Recommended)";
                    }
                    if (Lighting.lightMode == 0)
                    {
                        strArray[4] = "Lighting: Color";
                    }
                    else if (Lighting.lightMode == 1)
                    {
                        strArray[4] = "Lighting: White";
                    }
                    else if (Lighting.lightMode == 2)
                    {
                        strArray[4] = "Lighting: Retro";
                    }
                    else if (Lighting.lightMode == 3)
                    {
                        strArray[4] = "Lighting: Trippy";
                    }
                    if (qaStyle == 0)
                    {
                        strArray[5] = "Quality: Auto";
                    }
                    else if (qaStyle == 1)
                    {
                        strArray[5] = "Quality: High";
                    }
                    else if (qaStyle == 2)
                    {
                        strArray[5] = "Quality: Medium";
                    }
                    else
                    {
                        strArray[5] = "Quality: Low";
                    }
                    strArray[6] = "Back";
                    if (this.selectedMenu == 6)
                    {
                        PlaySound(11, -1, -1, 1);
                        this.SaveSettings();
                        Main.menuMode = 11;
                    }
                    if (this.selectedMenu == 5)
                    {
                        PlaySound(12, -1, -1, 1);
                        qaStyle++;
                        if (qaStyle > 3)
                        {
                            qaStyle = 0;
                        }
                    }
                    if (this.selectedMenu == 4)
                    {
                        PlaySound(12, -1, -1, 1);
                        Lighting.lightMode++;
                        if (Lighting.lightMode >= 4)
                        {
                            Lighting.lightMode = 0;
                        }
                    }
                    if (this.selectedMenu == 3)
                    {
                        PlaySound(12, -1, -1, 1);
                        if (fixedTiming)
                        {
                            fixedTiming = false;
                        }
                        else
                        {
                            fixedTiming = true;
                        }
                    }
                    if (this.selectedMenu == 2)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 0x1c;
                    }
                    if (this.selectedMenu == 1)
                    {
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 0x6f;
                    }
                    if (this.selectedMenu == 0)
                    {
                        this.graphics.ToggleFullScreen();
                    }
                }
                else if (Main.menuMode == 11)
                {
                    num3 = 180;
                    num5 = 0x30;
                    numArray[7] = 10;
                    num6 = 8;
                    strArray[0] = "Video";
                    strArray[1] = "Cursor Color";
                    strArray[2] = "Volume";
                    strArray[3] = "Controls";
                    if (autoSave)
                    {
                        strArray[4] = "Autosave On";
                    }
                    else
                    {
                        strArray[4] = "Autosave Off";
                    }
                    if (autoPause)
                    {
                        strArray[5] = "Autopause On";
                    }
                    else
                    {
                        strArray[5] = "Autopause Off";
                    }
                    if (showItemText)
                    {
                        strArray[6] = "Pickup Text On";
                    }
                    else
                    {
                        strArray[6] = "Pickup Text Off";
                    }
                    strArray[7] = "Back";
                    if (this.selectedMenu == 7)
                    {
                        PlaySound(11, -1, -1, 1);
                        this.SaveSettings();
                        Main.menuMode = 0;
                    }
                    if (this.selectedMenu == 6)
                    {
                        PlaySound(12, -1, -1, 1);
                        if (showItemText)
                        {
                            showItemText = false;
                        }
                        else
                        {
                            showItemText = true;
                        }
                    }
                    if (this.selectedMenu == 5)
                    {
                        PlaySound(12, -1, -1, 1);
                        if (autoPause)
                        {
                            autoPause = false;
                        }
                        else
                        {
                            autoPause = true;
                        }
                    }
                    if (this.selectedMenu == 4)
                    {
                        PlaySound(12, -1, -1, 1);
                        if (autoSave)
                        {
                            autoSave = false;
                        }
                        else
                        {
                            autoSave = true;
                        }
                    }
                    if (this.selectedMenu == 3)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 0x1b;
                    }
                    if (this.selectedMenu == 2)
                    {
                        PlaySound(11, -1, -1, 1);
                        Main.menuMode = 0x1a;
                    }
                    if (this.selectedMenu == 1)
                    {
                        PlaySound(10, -1, -1, 1);
                        this.selColor = mouseColor;
                        Main.menuMode = 0x19;
                    }
                    if (this.selectedMenu == 0)
                    {
                        PlaySound(10, -1, -1, 1);
                        Main.menuMode = 0x457;
                    }
                }
                else if (Main.menuMode != 0x6f)
                {
                    if (Main.menuMode == 0x19)
                    {
                        flag = true;
                        num11 = 370;
                        num3 = 240;
                        num5 = 60;
                        mouseColor = this.selColor;
                        num6 = 3;
                        strArray[0] = "";
                        strArray[1] = "Cursor Color";
                        flagArray[1] = true;
                        numArray[2] = 170;
                        numArray[1] = 10;
                        strArray[2] = "Back";
                        if (this.selectedMenu == 2)
                        {
                            Main.menuMode = 11;
                            PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Main.menuMode == 0x1a)
                    {
                        flag2 = true;
                        num3 = 240;
                        num5 = 60;
                        num6 = 3;
                        strArray[0] = "";
                        strArray[1] = "Volume";
                        flagArray[1] = true;
                        numArray[2] = 170;
                        numArray[1] = 10;
                        strArray[2] = "Back";
                        if (this.selectedMenu == 2)
                        {
                            Main.menuMode = 11;
                            PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Main.menuMode == 0x1c)
                    {
                        caveParrallax = 1f - (((float) this.bgScroll) / 500f);
                        flag3 = true;
                        num3 = 240;
                        num5 = 60;
                        num6 = 3;
                        strArray[0] = "";
                        strArray[1] = "Parallax";
                        flagArray[1] = true;
                        numArray[2] = 170;
                        numArray[1] = 10;
                        strArray[2] = "Back";
                        if (this.selectedMenu == 2)
                        {
                            Main.menuMode = 0x457;
                            PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Main.menuMode == 0x1b)
                    {
                        num3 = 0xb0;
                        num5 = 0x1c;
                        num6 = 14;
                        string[] strArray2 = new string[] { cUp, cDown, cLeft, cRight, cJump, cThrowItem, cInv, cHeal, cMana, cBuff, cHook, cTorch };
                        if (this.setKey >= 0)
                        {
                            strArray2[this.setKey] = "_";
                        }
                        strArray[0] = "Up             " + strArray2[0];
                        strArray[1] = "Down          " + strArray2[1];
                        strArray[2] = "Left            " + strArray2[2];
                        strArray[3] = "Right          " + strArray2[3];
                        strArray[4] = "Jump          " + strArray2[4];
                        strArray[5] = "Throw         " + strArray2[5];
                        strArray[6] = "Inventory      " + strArray2[6];
                        strArray[7] = "Quick Heal    " + strArray2[7];
                        strArray[8] = "Quick Mana   " + strArray2[8];
                        strArray[9] = "Quick Buff    " + strArray2[9];
                        strArray[10] = "Grapple        " + strArray2[10];
                        strArray[11] = "Auto Select    " + strArray2[11];
                        for (int num25 = 0; num25 < 12; num25++)
                        {
                            flagArray3[num25] = true;
                            numArray3[num25] = 0.55f;
                            numArray2[num25] = -80;
                        }
                        numArray3[12] = 0.8f;
                        numArray3[13] = 0.8f;
                        numArray[12] = 6;
                        strArray[12] = "Reset to Default";
                        numArray[13] = 0x10;
                        strArray[13] = "Back";
                        if (this.selectedMenu == 13)
                        {
                            Main.menuMode = 11;
                            PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu == 12)
                        {
                            cUp = "W";
                            cDown = "S";
                            cLeft = "A";
                            cRight = "D";
                            cJump = "Space";
                            cThrowItem = "T";
                            cInv = "Escape";
                            cHeal = "H";
                            cMana = "M";
                            cBuff = "B";
                            cHook = "E";
                            cTorch = "LeftShift";
                            this.setKey = -1;
                            PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu >= 0)
                        {
                            this.setKey = this.selectedMenu;
                        }
                        if (this.setKey >= 0)
                        {
                            Keys[] pressedKeys = keyState.GetPressedKeys();
                            if (pressedKeys.Length > 0)
                            {
                                string str5 = pressedKeys[0].ToString();
                                if (this.setKey == 0)
                                {
                                    cUp = str5;
                                }
                                if (this.setKey == 1)
                                {
                                    cDown = str5;
                                }
                                if (this.setKey == 2)
                                {
                                    cLeft = str5;
                                }
                                if (this.setKey == 3)
                                {
                                    cRight = str5;
                                }
                                if (this.setKey == 4)
                                {
                                    cJump = str5;
                                }
                                if (this.setKey == 5)
                                {
                                    cThrowItem = str5;
                                }
                                if (this.setKey == 6)
                                {
                                    cInv = str5;
                                }
                                if (this.setKey == 7)
                                {
                                    cHeal = str5;
                                }
                                if (this.setKey == 8)
                                {
                                    cMana = str5;
                                }
                                if (this.setKey == 9)
                                {
                                    cBuff = str5;
                                }
                                if (this.setKey == 10)
                                {
                                    cHook = str5;
                                }
                                if (this.setKey == 11)
                                {
                                    cTorch = str5;
                                }
                                this.setKey = -1;
                            }
                        }
                    }
                    else if (Main.menuMode == 12)
                    {
                        menuServer = false;
                        strArray[0] = "Join";
                        strArray[1] = "Back";
                        if (this.selectedMenu == 0)
                        {
                            LoadPlayers();
                            menuMultiplayer = true;
                            PlaySound(10, -1, -1, 1);
                            Main.menuMode = 1;
                        }
                        if (this.selectedMenu == 1)
                        {
                            PlaySound(11, -1, -1, 1);
                            Main.menuMode = 0;
                        }
                        num6 = 3;
                    }
                    else if (Main.menuMode == 13)
                    {
                        string getIP = Main.getIP;
                        Main.getIP = GetInputText(Main.getIP);
                        if (getIP != Main.getIP)
                        {
                            PlaySound(12, -1, -1, 1);
                        }
                        strArray[0] = "Enter Server IP Address:";
                        flagArray2[9] = true;
                        if (Main.getIP != "")
                        {
                            if (Main.getIP.Substring(0, 1) == " ")
                            {
                                Main.getIP = "";
                            }
                            for (int num26 = 0; num26 < Main.getIP.Length; num26++)
                            {
                                if (Main.getIP != " ")
                                {
                                    flagArray2[9] = false;
                                }
                            }
                        }
                        this.textBlinkerCount++;
                        if (this.textBlinkerCount >= 20)
                        {
                            if (this.textBlinkerState == 0)
                            {
                                this.textBlinkerState = 1;
                            }
                            else
                            {
                                this.textBlinkerState = 0;
                            }
                            this.textBlinkerCount = 0;
                        }
                        strArray[1] = Main.getIP;
                        if (this.textBlinkerState == 1)
                        {
                            (strArray3 = strArray)[1] = strArray3[1] + "|";
                            numArray2[1] = 1;
                        }
                        else
                        {
                            (strArray3 = strArray)[1] = strArray3[1] + " ";
                        }
                        flagArray[0] = true;
                        flagArray[1] = true;
                        numArray[9] = 0x2c;
                        numArray[10] = 0x40;
                        strArray[9] = "Accept";
                        strArray[10] = "Back";
                        num6 = 11;
                        num3 = 180;
                        num5 = 30;
                        numArray[1] = 0x13;
                        for (int num27 = 2; num27 < 9; num27++)
                        {
                            int num28 = num27 - 2;
                            if ((recentWorld[num28] != null) && (recentWorld[num28] != ""))
                            {
                                strArray[num27] = string.Concat(new object[] { recentWorld[num28], " (", recentIP[num28], ":", recentPort[num28], ")" });
                            }
                            else
                            {
                                strArray[num27] = "";
                                flagArray[num27] = true;
                            }
                            numArray3[num27] = 0.6f;
                            numArray[num27] = 40;
                        }
                        if ((this.selectedMenu >= 2) && (this.selectedMenu < 9))
                        {
                            autoPass = false;
                            int num29 = this.selectedMenu - 2;
                            Netplay.serverPort = recentPort[num29];
                            Main.getIP = recentIP[num29];
                            if (Netplay.SetIP(Main.getIP))
                            {
                                Main.menuMode = 10;
                                Netplay.StartClient();
                            }
                            else if (Netplay.SetIP2(Main.getIP))
                            {
                                Main.menuMode = 10;
                                Netplay.StartClient();
                            }
                        }
                        if (this.selectedMenu == 10)
                        {
                            PlaySound(11, -1, -1, 1);
                            Main.menuMode = 1;
                        }
                        if ((this.selectedMenu == 9) || (!flagArray2[2] && inputTextEnter))
                        {
                            PlaySound(12, -1, -1, 1);
                            Main.menuMode = 0x83;
                        }
                    }
                    else if (Main.menuMode == 0x83)
                    {
                        int num30 = 0x1e61;
                        string getPort = Main.getPort;
                        Main.getPort = GetInputText(Main.getPort);
                        if (getPort != Main.getPort)
                        {
                            PlaySound(12, -1, -1, 1);
                        }
                        strArray[0] = "Enter Server Port:";
                        flagArray2[2] = true;
                        if (Main.getPort != "")
                        {
                            bool flag5 = false;
                            try
                            {
                                num30 = Convert.ToInt32(Main.getPort);
                                if ((num30 > 0) && (num30 <= 0xffff))
                                {
                                    flag5 = true;
                                }
                            }
                            catch
                            {
                            }
                            if (flag5)
                            {
                                flagArray2[2] = false;
                            }
                        }
                        this.textBlinkerCount++;
                        if (this.textBlinkerCount >= 20)
                        {
                            if (this.textBlinkerState == 0)
                            {
                                this.textBlinkerState = 1;
                            }
                            else
                            {
                                this.textBlinkerState = 0;
                            }
                            this.textBlinkerCount = 0;
                        }
                        strArray[1] = Main.getPort;
                        if (this.textBlinkerState == 1)
                        {
                            (strArray3 = strArray)[1] = strArray3[1] + "|";
                            numArray2[1] = 1;
                        }
                        else
                        {
                            (strArray3 = strArray)[1] = strArray3[1] + " ";
                        }
                        flagArray[0] = true;
                        flagArray[1] = true;
                        numArray[1] = -20;
                        numArray[2] = 20;
                        strArray[2] = "Accept";
                        strArray[3] = "Back";
                        num6 = 4;
                        if (this.selectedMenu == 3)
                        {
                            PlaySound(11, -1, -1, 1);
                            Main.menuMode = 1;
                        }
                        if ((this.selectedMenu == 2) || (!flagArray2[2] && inputTextEnter))
                        {
                            Netplay.serverPort = num30;
                            autoPass = false;
                            if (Netplay.SetIP(Main.getIP))
                            {
                                Main.menuMode = 10;
                                Netplay.StartClient();
                            }
                            else if (Netplay.SetIP2(Main.getIP))
                            {
                                Main.menuMode = 10;
                                Netplay.StartClient();
                            }
                        }
                    }
                    else if (Main.menuMode == 0x10)
                    {
                        num3 = 200;
                        num5 = 60;
                        numArray[1] = 30;
                        numArray[2] = 30;
                        numArray[3] = 30;
                        numArray[4] = 70;
                        strArray[0] = "Choose world size:";
                        flagArray[0] = true;
                        strArray[1] = "Small";
                        strArray[2] = "Medium";
                        strArray[3] = "Large";
                        strArray[4] = "Back";
                        num6 = 5;
                        if (this.selectedMenu == 4)
                        {
                            Main.menuMode = 6;
                            PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu > 0)
                        {
                            if (this.selectedMenu == 1)
                            {
                                maxTilesX = 0x1068;
                                maxTilesY = 0x4b0;
                            }
                            else if (this.selectedMenu == 2)
                            {
                                maxTilesX = 0x1900;
                                maxTilesY = 0x708;
                            }
                            else
                            {
                                maxTilesX = 0x20d0;
                                maxTilesY = 0x960;
                            }
                            Main.menuMode = 7;
                            PlaySound(10, -1, -1, 1);
                            WorldGen.setWorldSize();
                        }
                    }
                }
                else
                {
                    num3 = 240;
                    num5 = 60;
                    num6 = 3;
                    strArray[0] = "Fullscreen Resolution";
                    strArray[1] = this.graphics.PreferredBackBufferWidth + "x" + this.graphics.PreferredBackBufferHeight;
                    flagArray[0] = true;
                    numArray[2] = 170;
                    numArray[1] = 10;
                    strArray[2] = "Back";
                    if (this.selectedMenu == 1)
                    {
                        PlaySound(12, -1, -1, 1);
                        int num23 = 0;
                        for (int num24 = 0; num24 < this.numDisplayModes; num24++)
                        {
                            if ((this.displayWidth[num24] == this.graphics.PreferredBackBufferWidth) && (this.displayHeight[num24] == this.graphics.PreferredBackBufferHeight))
                            {
                                num23 = num24;
                                break;
                            }
                        }
                        num23++;
                        if (num23 >= this.numDisplayModes)
                        {
                            num23 = 0;
                        }
                        this.graphics.PreferredBackBufferWidth = this.displayWidth[num23];
                        this.graphics.PreferredBackBufferHeight = this.displayHeight[num23];
                    }
                    if (this.selectedMenu == 2)
                    {
                        if (this.graphics.IsFullScreen)
                        {
                            this.graphics.ApplyChanges();
                        }
                        Main.menuMode = 0x457;
                        PlaySound(11, -1, -1, 1);
                    }
                }
                goto Label_3687;
            }
            if (this.selectedMenu == 0)
            {
                Main.menuMode = 0x11;
                PlaySound(10, -1, -1, 1);
                this.selColor = loadPlayer[numLoadPlayers].hairColor;
            }
            if (this.selectedMenu == 1)
            {
                Main.menuMode = 0x12;
                PlaySound(10, -1, -1, 1);
                this.selColor = loadPlayer[numLoadPlayers].eyeColor;
            }
            if (this.selectedMenu == 2)
            {
                Main.menuMode = 0x13;
                PlaySound(10, -1, -1, 1);
                this.selColor = loadPlayer[numLoadPlayers].skinColor;
            }
            if (this.selectedMenu == 3)
            {
                Main.menuMode = 20;
                PlaySound(10, -1, -1, 1);
            }
            strArray[0] = "Hair";
            strArray[1] = "Eyes";
            strArray[2] = "Skin";
            strArray[3] = "Clothes";
            num3 = 220;
            for (int k = 0; k < 9; k++)
            {
                if (k < 6)
                {
                    numArray3[k] = 0.75f;
                }
                else
                {
                    numArray3[k] = 0.9f;
                }
            }
            num5 = 0x26;
            numArray[6] = 6;
            numArray[7] = 12;
            numArray[8] = 0x12;
            index = numLoadPlayers;
            num9 = (screenWidth / 2) - 0x10;
            num10 = 0xb0;
            if (loadPlayer[index].male)
            {
                strArray[4] = "Male";
            }
            else
            {
                strArray[4] = "Female";
            }
            if (this.selectedMenu == 4)
            {
                if (loadPlayer[index].male)
                {
                    PlaySound(20, -1, -1, 1);
                    loadPlayer[index].male = false;
                }
                else
                {
                    PlaySound(1, -1, -1, 1);
                    loadPlayer[index].male = true;
                }
            }
            if (loadPlayer[index].difficulty == 2)
            {
                strArray[5] = "Hardcore";
                buffer[5] = loadPlayer[index].difficulty;
            }
            else if (loadPlayer[index].difficulty == 1)
            {
                strArray[5] = "Mediumcore";
                buffer[5] = loadPlayer[index].difficulty;
            }
            else
            {
                strArray[5] = "Softcore";
            }
            if (this.selectedMenu == 5)
            {
                PlaySound(10, -1, -1, 1);
                Main.menuMode = 0xde;
            }
            if (this.selectedMenu == 7)
            {
                PlaySound(12, -1, -1, 1);
                loadPlayer[index].hair = rand.Next(0x24);
                loadPlayer[index].eyeColor = this.randColor();
                while (((loadPlayer[index].eyeColor.R + loadPlayer[index].eyeColor.G) + loadPlayer[index].eyeColor.B) > 300)
                {
                    loadPlayer[index].eyeColor = this.randColor();
                }
                loadPlayer[index].hairColor = this.randColor();
                loadPlayer[index].pantsColor = this.randColor();
                loadPlayer[index].shirtColor = this.randColor();
                loadPlayer[index].shoeColor = this.randColor();
                loadPlayer[index].skinColor = this.randColor();
                float num16 = rand.Next(60, 120) * 0.01f;
                if (num16 > 1f)
                {
                    num16 = 1f;
                }
                loadPlayer[index].skinColor.R = (byte) (rand.Next(240, 0xff) * num16);
                loadPlayer[index].skinColor.G = (byte) (rand.Next(110, 140) * num16);
                loadPlayer[index].skinColor.B = (byte) (rand.Next(0x4b, 110) * num16);
                loadPlayer[index].underShirtColor = this.randColor();
                switch ((loadPlayer[index].hair + 1))
                {
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 12:
                    case 0x13:
                    case 0x16:
                    case 0x17:
                    case 0x1a:
                    case 0x1b:
                    case 30:
                    case 0x21:
                        loadPlayer[index].male = false;
                        goto Label_15B1;
                }
                loadPlayer[index].male = true;
            }
        Label_15B1:
            strArray[7] = "Random";
            strArray[6] = "Create";
            strArray[8] = "Back";
            num6 = 9;
            if (this.selectedMenu == 8)
            {
                PlaySound(11, -1, -1, 1);
                Main.menuMode = 1;
            }
            else if (this.selectedMenu == 6)
            {
                PlaySound(10, -1, -1, 1);
                loadPlayer[numLoadPlayers].name = "";
                Main.menuMode = 3;
            }
        Label_3687:
            if (Main.menuMode != menuMode)
            {
                num6 = 0;
                for (int num31 = 0; num31 < maxMenuItems; num31++)
                {
                    this.menuItemScale[num31] = 0.8f;
                }
            }
            int focusMenu = this.focusMenu;
            this.selectedMenu = -1;
            this.selectedMenu2 = -1;
            this.focusMenu = -1;
            for (int m = 0; m < num6; m++)
            {
                if (strArray[m] != null)
                {
                    if (flag)
                    {
                        string text = "";
                        for (int num34 = 0; num34 < 6; num34++)
                        {
                            int num35 = num11;
                            int num36 = (370 + (screenWidth / 2)) - 400;
                            switch (num34)
                            {
                                case 0:
                                    text = "Red:";
                                    break;

                                case 1:
                                    text = "Green:";
                                    num35 += 30;
                                    break;

                                case 2:
                                    text = "Blue:";
                                    num35 += 60;
                                    break;

                                case 3:
                                    text = this.selColor.R.ToString();
                                    num36 += 90;
                                    break;

                                case 4:
                                    text = this.selColor.G.ToString();
                                    num36 += 90;
                                    num35 += 30;
                                    break;

                                case 5:
                                    text = this.selColor.B.ToString();
                                    num36 += 90;
                                    num35 += 60;
                                    break;
                            }
                            for (int num37 = 0; num37 < 5; num37++)
                            {
                                Color black = Color.Black;
                                if (num37 == 4)
                                {
                                    black = color;
                                    black.R = (byte) ((0xff + black.R) / 2);
                                    black.G = (byte) ((0xff + black.R) / 2);
                                    black.B = (byte) ((0xff + black.R) / 2);
                                }
                                int num38 = 0xff;
                                int num39 = black.R - (0xff - num38);
                                if (num39 < 0)
                                {
                                    num39 = 0;
                                }
                                black = new Color((int) ((byte) num39), (int) ((byte) num39), (int) ((byte) num39), (int) ((byte) num38));
                                int num40 = 0;
                                int num41 = 0;
                                switch (num37)
                                {
                                    case 0:
                                        num40 = -2;
                                        break;

                                    case 1:
                                        num40 = 2;
                                        break;

                                    case 2:
                                        num41 = -2;
                                        break;

                                    case 3:
                                        num41 = 2;
                                        break;
                                }
                                vector9 = new Vector2();
                                this.spriteBatch.DrawString(fontDeathText, text, new Vector2((float) (num36 + num40), (float) (num35 + num41)), black, 0f, vector9, (float) 0.5f, SpriteEffects.None, 0f);
                            }
                        }
                        bool flag6 = false;
                        for (int num42 = 0; num42 < 2; num42++)
                        {
                            for (int num43 = 0; num43 < 3; num43++)
                            {
                                int num44 = (num11 + (num43 * 30)) - 12;
                                int num45 = (360 + (screenWidth / 2)) - 400;
                                float scale = 0.9f;
                                if (num42 == 0)
                                {
                                    num45 -= 70;
                                    num44 += 2;
                                }
                                else
                                {
                                    num45 -= 40;
                                }
                                text = "-";
                                if (num42 == 1)
                                {
                                    text = "+";
                                }
                                Vector2 vector3 = new Vector2(24f, 24f);
                                int num47 = 0x8e;
                                if (((mouseX > num45) && (mouseX < (num45 + vector3.X))) && ((mouseY > (num44 + 13)) && (mouseY < ((num44 + 13) + vector3.Y))))
                                {
                                    if (this.focusColor != ((num42 + 1) * (num43 + 10)))
                                    {
                                        PlaySound(12, -1, -1, 1);
                                    }
                                    this.focusColor = (num42 + 1) * (num43 + 10);
                                    flag6 = true;
                                    num47 = 0xff;
                                    if (mouseLeft)
                                    {
                                        if (this.colorDelay <= 1)
                                        {
                                            if (this.colorDelay == 0)
                                            {
                                                this.colorDelay = 40;
                                            }
                                            else
                                            {
                                                this.colorDelay = 3;
                                            }
                                            int num48 = num42;
                                            if (num42 == 0)
                                            {
                                                num48 = -1;
                                                if (((this.selColor.R + this.selColor.G) + this.selColor.B) <= 150)
                                                {
                                                    num48 = 0;
                                                }
                                            }
                                            if (((num43 == 0) && ((this.selColor.R + num48) >= 0)) && ((this.selColor.R + num48) <= 0xff))
                                            {
                                                this.selColor.R = (byte) (this.selColor.R + num48);
                                            }
                                            if (((num43 == 1) && ((this.selColor.G + num48) >= 0)) && ((this.selColor.G + num48) <= 0xff))
                                            {
                                                this.selColor.G = (byte) (this.selColor.G + num48);
                                            }
                                            if (((num43 == 2) && ((this.selColor.B + num48) >= 0)) && ((this.selColor.B + num48) <= 0xff))
                                            {
                                                this.selColor.B = (byte) (this.selColor.B + num48);
                                            }
                                        }
                                        this.colorDelay--;
                                    }
                                    else
                                    {
                                        this.colorDelay = 0;
                                    }
                                }
                                for (int num49 = 0; num49 < 5; num49++)
                                {
                                    Color color5 = Color.Black;
                                    if (num49 == 4)
                                    {
                                        color5 = color;
                                        color5.R = (byte) ((0xff + color5.R) / 2);
                                        color5.G = (byte) ((0xff + color5.R) / 2);
                                        color5.B = (byte) ((0xff + color5.R) / 2);
                                    }
                                    int num50 = color5.R - (0xff - num47);
                                    if (num50 < 0)
                                    {
                                        num50 = 0;
                                    }
                                    color5 = new Color((int) ((byte) num50), (int) ((byte) num50), (int) ((byte) num50), (int) ((byte) num47));
                                    int num51 = 0;
                                    int num52 = 0;
                                    switch (num49)
                                    {
                                        case 0:
                                            num51 = -2;
                                            break;

                                        case 1:
                                            num51 = 2;
                                            break;

                                        case 2:
                                            num52 = -2;
                                            break;

                                        case 3:
                                            num52 = 2;
                                            break;
                                    }
                                    vector9 = new Vector2();
                                    this.spriteBatch.DrawString(fontDeathText, text, new Vector2((float) (num45 + num51), (float) (num44 + num52)), color5, 0f, vector9, scale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (!flag6)
                        {
                            this.focusColor = 0;
                            this.colorDelay = 0;
                        }
                    }
                    if (flag3)
                    {
                        int num53 = 400;
                        string str9 = "";
                        for (int num54 = 0; num54 < 4; num54++)
                        {
                            int num55 = num53;
                            int num56 = (370 + (screenWidth / 2)) - 400;
                            if (num54 == 0)
                            {
                                str9 = "Parallax: " + this.bgScroll;
                            }
                            for (int num57 = 0; num57 < 5; num57++)
                            {
                                Color color6 = Color.Black;
                                if (num57 == 4)
                                {
                                    color6 = color;
                                    color6.R = (byte) ((0xff + color6.R) / 2);
                                    color6.G = (byte) ((0xff + color6.R) / 2);
                                    color6.B = (byte) ((0xff + color6.R) / 2);
                                }
                                int num58 = 0xff;
                                int num59 = color6.R - (0xff - num58);
                                if (num59 < 0)
                                {
                                    num59 = 0;
                                }
                                color6 = new Color((int) ((byte) num59), (int) ((byte) num59), (int) ((byte) num59), (int) ((byte) num58));
                                int num60 = 0;
                                int num61 = 0;
                                switch (num57)
                                {
                                    case 0:
                                        num60 = -2;
                                        break;

                                    case 1:
                                        num60 = 2;
                                        break;

                                    case 2:
                                        num61 = -2;
                                        break;

                                    case 3:
                                        num61 = 2;
                                        break;
                                }
                                vector9 = new Vector2();
                                this.spriteBatch.DrawString(fontDeathText, str9, new Vector2((float) (num56 + num60), (float) (num55 + num61)), color6, 0f, vector9, (float) 0.5f, SpriteEffects.None, 0f);
                            }
                        }
                        bool flag7 = false;
                        for (int num62 = 0; num62 < 2; num62++)
                        {
                            for (int num63 = 0; num63 < 1; num63++)
                            {
                                int num64 = (num53 + (num63 * 30)) - 12;
                                int num65 = (360 + (screenWidth / 2)) - 400;
                                float num66 = 0.9f;
                                if (num62 == 0)
                                {
                                    num65 -= 70;
                                    num64 += 2;
                                }
                                else
                                {
                                    num65 -= 40;
                                }
                                str9 = "-";
                                if (num62 == 1)
                                {
                                    str9 = "+";
                                }
                                Vector2 vector4 = new Vector2(24f, 24f);
                                int num67 = 0x8e;
                                if (((mouseX > num65) && (mouseX < (num65 + vector4.X))) && ((mouseY > (num64 + 13)) && (mouseY < ((num64 + 13) + vector4.Y))))
                                {
                                    if (this.focusColor != ((num62 + 1) * (num63 + 10)))
                                    {
                                        PlaySound(12, -1, -1, 1);
                                    }
                                    this.focusColor = (num62 + 1) * (num63 + 10);
                                    flag7 = true;
                                    num67 = 0xff;
                                    if (mouseLeft)
                                    {
                                        if (this.colorDelay <= 1)
                                        {
                                            if (this.colorDelay == 0)
                                            {
                                                this.colorDelay = 40;
                                            }
                                            else
                                            {
                                                this.colorDelay = 3;
                                            }
                                            int num68 = num62;
                                            if (num62 == 0)
                                            {
                                                num68 = -1;
                                            }
                                            if (num63 == 0)
                                            {
                                                this.bgScroll += num68;
                                                if (this.bgScroll > 100)
                                                {
                                                    this.bgScroll = 100;
                                                }
                                                if (this.bgScroll < 0)
                                                {
                                                    this.bgScroll = 0;
                                                }
                                            }
                                        }
                                        this.colorDelay--;
                                    }
                                    else
                                    {
                                        this.colorDelay = 0;
                                    }
                                }
                                for (int num69 = 0; num69 < 5; num69++)
                                {
                                    Color color7 = Color.Black;
                                    if (num69 == 4)
                                    {
                                        color7 = color;
                                        color7.R = (byte) ((0xff + color7.R) / 2);
                                        color7.G = (byte) ((0xff + color7.R) / 2);
                                        color7.B = (byte) ((0xff + color7.R) / 2);
                                    }
                                    int num70 = color7.R - (0xff - num67);
                                    if (num70 < 0)
                                    {
                                        num70 = 0;
                                    }
                                    color7 = new Color((int) ((byte) num70), (int) ((byte) num70), (int) ((byte) num70), (int) ((byte) num67));
                                    int num71 = 0;
                                    int num72 = 0;
                                    switch (num69)
                                    {
                                        case 0:
                                            num71 = -2;
                                            break;

                                        case 1:
                                            num71 = 2;
                                            break;

                                        case 2:
                                            num72 = -2;
                                            break;

                                        case 3:
                                            num72 = 2;
                                            break;
                                    }
                                    vector9 = new Vector2();
                                    this.spriteBatch.DrawString(fontDeathText, str9, new Vector2((float) (num65 + num71), (float) (num64 + num72)), color7, 0f, vector9, num66, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (!flag7)
                        {
                            this.focusColor = 0;
                            this.colorDelay = 0;
                        }
                    }
                    if (flag2)
                    {
                        int num73 = 400;
                        string str10 = "";
                        for (int num74 = 0; num74 < 4; num74++)
                        {
                            int num75 = num73;
                            int num76 = (370 + (screenWidth / 2)) - 400;
                            switch (num74)
                            {
                                case 0:
                                    str10 = "Sound:";
                                    break;

                                case 1:
                                    str10 = "Music:";
                                    num75 += 30;
                                    break;

                                case 2:
                                    str10 = Math.Round((double) (soundVolume * 100f)) + "%";
                                    num76 += 90;
                                    break;

                                case 3:
                                    str10 = Math.Round((double) (musicVolume * 100f)) + "%";
                                    num76 += 90;
                                    num75 += 30;
                                    break;
                            }
                            for (int num77 = 0; num77 < 5; num77++)
                            {
                                Color color8 = Color.Black;
                                if (num77 == 4)
                                {
                                    color8 = color;
                                    color8.R = (byte) ((0xff + color8.R) / 2);
                                    color8.G = (byte) ((0xff + color8.R) / 2);
                                    color8.B = (byte) ((0xff + color8.R) / 2);
                                }
                                int num78 = 0xff;
                                int num79 = color8.R - (0xff - num78);
                                if (num79 < 0)
                                {
                                    num79 = 0;
                                }
                                color8 = new Color((int) ((byte) num79), (int) ((byte) num79), (int) ((byte) num79), (int) ((byte) num78));
                                int num80 = 0;
                                int num81 = 0;
                                switch (num77)
                                {
                                    case 0:
                                        num80 = -2;
                                        break;

                                    case 1:
                                        num80 = 2;
                                        break;

                                    case 2:
                                        num81 = -2;
                                        break;

                                    case 3:
                                        num81 = 2;
                                        break;
                                }
                                vector9 = new Vector2();
                                this.spriteBatch.DrawString(fontDeathText, str10, new Vector2((float) (num76 + num80), (float) (num75 + num81)), color8, 0f, vector9, (float) 0.5f, SpriteEffects.None, 0f);
                            }
                        }
                        bool flag8 = false;
                        for (int num82 = 0; num82 < 2; num82++)
                        {
                            for (int num83 = 0; num83 < 2; num83++)
                            {
                                int num89;
                                int num84 = (num73 + (num83 * 30)) - 12;
                                int num85 = (360 + (screenWidth / 2)) - 400;
                                float num86 = 0.9f;
                                if (num82 == 0)
                                {
                                    num85 -= 70;
                                    num84 += 2;
                                }
                                else
                                {
                                    num85 -= 40;
                                }
                                str10 = "-";
                                if (num82 == 1)
                                {
                                    str10 = "+";
                                }
                                Vector2 vector5 = new Vector2(24f, 24f);
                                int num87 = 0x8e;
                                if (((mouseX <= num85) || (mouseX >= (num85 + vector5.X))) || ((mouseY <= (num84 + 13)) || (mouseY >= ((num84 + 13) + vector5.Y))))
                                {
                                    goto Label_43F2;
                                }
                                if (this.focusColor != ((num82 + 1) * (num83 + 10)))
                                {
                                    PlaySound(12, -1, -1, 1);
                                }
                                this.focusColor = (num82 + 1) * (num83 + 10);
                                flag8 = true;
                                num87 = 0xff;
                                if (!mouseLeft)
                                {
                                    goto Label_43EB;
                                }
                                if (this.colorDelay <= 1)
                                {
                                    if (this.colorDelay == 0)
                                    {
                                        this.colorDelay = 40;
                                    }
                                    else
                                    {
                                        this.colorDelay = 3;
                                    }
                                    int num88 = num82;
                                    if (num82 == 0)
                                    {
                                        num88 = -1;
                                    }
                                    switch (num83)
                                    {
                                        case 0:
                                            soundVolume += num88 * 0.01f;
                                            if (soundVolume > 1f)
                                            {
                                                soundVolume = 1f;
                                            }
                                            if (soundVolume < 0f)
                                            {
                                                soundVolume = 0f;
                                            }
                                            break;

                                        case 1:
                                            musicVolume += num88 * 0.01f;
                                            if (musicVolume > 1f)
                                            {
                                                musicVolume = 1f;
                                            }
                                            if (musicVolume < 0f)
                                            {
                                                musicVolume = 0f;
                                            }
                                            goto Label_43DB;
                                    }
                                }
                            Label_43DB:
                                this.colorDelay--;
                                goto Label_43F2;
                            Label_43EB:
                                this.colorDelay = 0;
                            Label_43F2:
                                num89 = 0;
                                while (num89 < 5)
                                {
                                    Color color9 = Color.Black;
                                    if (num89 == 4)
                                    {
                                        color9 = color;
                                        color9.R = (byte) ((0xff + color9.R) / 2);
                                        color9.G = (byte) ((0xff + color9.R) / 2);
                                        color9.B = (byte) ((0xff + color9.R) / 2);
                                    }
                                    int num90 = color9.R - (0xff - num87);
                                    if (num90 < 0)
                                    {
                                        num90 = 0;
                                    }
                                    color9 = new Color((int) ((byte) num90), (int) ((byte) num90), (int) ((byte) num90), (int) ((byte) num87));
                                    int num91 = 0;
                                    int num92 = 0;
                                    switch (num89)
                                    {
                                        case 0:
                                            num91 = -2;
                                            break;

                                        case 1:
                                            num91 = 2;
                                            break;

                                        case 2:
                                            num92 = -2;
                                            break;

                                        case 3:
                                            num92 = 2;
                                            break;
                                    }
                                    vector9 = new Vector2();
                                    this.spriteBatch.DrawString(fontDeathText, str10, new Vector2((float) (num85 + num91), (float) (num84 + num92)), color9, 0f, vector9, num86, SpriteEffects.None, 0f);
                                    num89++;
                                }
                            }
                        }
                        if (!flag8)
                        {
                            this.focusColor = 0;
                            this.colorDelay = 0;
                        }
                    }
                    for (int num93 = 0; num93 < 5; num93++)
                    {
                        Color hcColor = Color.Black;
                        if (num93 == 4)
                        {
                            hcColor = color;
                            if (buffer[m] == 2)
                            {
                                hcColor = Main.hcColor;
                            }
                            else if (buffer[m] == 1)
                            {
                                hcColor = mcColor;
                            }
                            hcColor.R = (byte) ((0xff + hcColor.R) / 2);
                            hcColor.G = (byte) ((0xff + hcColor.G) / 2);
                            hcColor.B = (byte) ((0xff + hcColor.B) / 2);
                        }
                        int num94 = (int) (255f * ((this.menuItemScale[m] * 2f) - 1f));
                        if (flagArray[m])
                        {
                            num94 = 0xff;
                        }
                        int num95 = hcColor.R - (0xff - num94);
                        if (num95 < 0)
                        {
                            num95 = 0;
                        }
                        int num96 = hcColor.G - (0xff - num94);
                        if (num96 < 0)
                        {
                            num96 = 0;
                        }
                        int num97 = hcColor.B - (0xff - num94);
                        if (num97 < 0)
                        {
                            num97 = 0;
                        }
                        hcColor = new Color((int) ((byte) num95), (int) ((byte) num96), (int) ((byte) num97), (int) ((byte) num94));
                        int num98 = 0;
                        int num99 = 0;
                        switch (num93)
                        {
                            case 0:
                                num98 = -2;
                                break;

                            case 1:
                                num98 = 2;
                                break;

                            case 2:
                                num99 = -2;
                                break;

                            case 3:
                                num99 = 2;
                                break;
                        }
                        Vector2 origin = fontDeathText.MeasureString(strArray[m]);
                        origin.X *= 0.5f;
                        origin.Y *= 0.5f;
                        float num100 = this.menuItemScale[m];
                        if ((Main.menuMode == 15) && (m == 0))
                        {
                            num100 *= 0.35f;
                        }
                        else if (netMode == 2)
                        {
                            num100 *= 0.5f;
                        }
                        num100 *= numArray3[m];
                        if (!flagArray3[m])
                        {
                            this.spriteBatch.DrawString(fontDeathText, strArray[m], new Vector2((float) ((num4 + num98) + numArray2[m]), (((num3 + (num5 * m)) + num99) + (origin.Y * numArray3[m])) + numArray[m]), hcColor, 0f, origin, num100, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            this.spriteBatch.DrawString(fontDeathText, strArray[m], new Vector2((float) ((num4 + num98) + numArray2[m]), (((num3 + (num5 * m)) + num99) + (origin.Y * numArray3[m])) + numArray[m]), hcColor, 0f, new Vector2(0f, origin.Y), num100, SpriteEffects.None, 0f);
                        }
                    }
                    if (!flagArray3[m])
                    {
                        if ((((mouseX > ((num4 - ((strArray[m].Length * 10) * numArray3[m])) + numArray2[m])) && (mouseX < ((num4 + ((strArray[m].Length * 10) * numArray3[m])) + numArray2[m]))) && ((mouseY > ((num3 + (num5 * m)) + numArray[m])) && (mouseY < (((num3 + (num5 * m)) + numArray[m]) + (50f * numArray3[m]))))) && hasFocus)
                        {
                            this.focusMenu = m;
                            if (flagArray[m] || flagArray2[m])
                            {
                                this.focusMenu = -1;
                            }
                            else
                            {
                                if (focusMenu != this.focusMenu)
                                {
                                    PlaySound(12, -1, -1, 1);
                                }
                                if (mouseLeftRelease && mouseLeft)
                                {
                                    this.selectedMenu = m;
                                }
                                if (mouseRightRelease && mouseRight)
                                {
                                    this.selectedMenu2 = m;
                                }
                            }
                        }
                    }
                    else if ((((mouseX > (num4 + numArray2[m])) && (mouseX < ((num4 + ((strArray[m].Length * 20) * numArray3[m])) + numArray2[m]))) && ((mouseY > ((num3 + (num5 * m)) + numArray[m])) && (mouseY < (((num3 + (num5 * m)) + numArray[m]) + (50f * numArray3[m]))))) && hasFocus)
                    {
                        this.focusMenu = m;
                        if (flagArray[m] || flagArray2[m])
                        {
                            this.focusMenu = -1;
                        }
                        else
                        {
                            if (focusMenu != this.focusMenu)
                            {
                                PlaySound(12, -1, -1, 1);
                            }
                            if (mouseLeftRelease && mouseLeft)
                            {
                                this.selectedMenu = m;
                            }
                            if (mouseRightRelease && mouseRight)
                            {
                                this.selectedMenu2 = m;
                            }
                        }
                    }
                }
            }
            for (int n = 0; n < maxMenuItems; n++)
            {
                if (n == this.focusMenu)
                {
                    if (this.menuItemScale[n] < 1f)
                    {
                        this.menuItemScale[n] += 0.02f;
                    }
                    if (this.menuItemScale[n] > 1f)
                    {
                        this.menuItemScale[n] = 1f;
                    }
                }
                else if (this.menuItemScale[n] > 0.8)
                {
                    this.menuItemScale[n] -= 0.02f;
                }
            }
            if (index >= 0)
            {
                loadPlayer[index].PlayerFrame();
                loadPlayer[index].position.X = num9 + screenPosition.X;
                loadPlayer[index].position.Y = num10 + screenPosition.Y;
                this.DrawPlayer(loadPlayer[index]);
            }
            for (int num102 = 0; num102 < 5; num102++)
            {
                Color color11 = Color.Black;
                if (num102 == 4)
                {
                    color11 = color;
                    color11.R = (byte) ((0xff + color11.R) / 2);
                    color11.G = (byte) ((0xff + color11.R) / 2);
                    color11.B = (byte) ((0xff + color11.R) / 2);
                }
                color11.A = (byte) (color11.A * 0.3f);
                int num103 = 0;
                int num104 = 0;
                switch (num102)
                {
                    case 0:
                        num103 = -2;
                        break;

                    case 1:
                        num103 = 2;
                        break;

                    case 2:
                        num104 = -2;
                        break;

                    case 3:
                        num104 = 2;
                        break;
                }
                string str11 = "Copyright \x00a9 2011 Re-Logic";
                Vector2 vector7 = fontMouseText.MeasureString(str11);
                vector7.X *= 0.5f;
                vector7.Y *= 0.5f;
                this.spriteBatch.DrawString(fontMouseText, str11, new Vector2(((screenWidth - vector7.X) + num103) - 10f, ((screenHeight - vector7.Y) + num104) - 2f), color11, 0f, vector7, (float) 1f, SpriteEffects.None, 0f);
            }
            for (int num105 = 0; num105 < 5; num105++)
            {
                Color color12 = Color.Black;
                if (num105 == 4)
                {
                    color12 = color;
                    color12.R = (byte) ((0xff + color12.R) / 2);
                    color12.G = (byte) ((0xff + color12.R) / 2);
                    color12.B = (byte) ((0xff + color12.R) / 2);
                }
                color12.A = (byte) (color12.A * 0.3f);
                int num106 = 0;
                int num107 = 0;
                switch (num105)
                {
                    case 0:
                        num106 = -2;
                        break;

                    case 1:
                        num106 = 2;
                        break;

                    case 2:
                        num107 = -2;
                        break;

                    case 3:
                        num107 = 2;
                        break;
                }
                Vector2 vector8 = fontMouseText.MeasureString(versionNumber);
                vector8.X *= 0.5f;
                vector8.Y *= 0.5f;
                this.spriteBatch.DrawString(fontMouseText, versionNumber, new Vector2((vector8.X + num106) + 10f, ((screenHeight - vector8.Y) + num107) - 2f), color12, 0f, vector8, (float) 1f, SpriteEffects.None, 0f);
            }
            vector9 = new Vector2();
            this.spriteBatch.Draw(cursorTexture, new Vector2((float) (mouseX + 1), (float) (mouseY + 1)), new Rectangle(0, 0, cursorTexture.Width, cursorTexture.Height), new Color((int) (cursorColor.R * 0.2f), (int) (cursorColor.G * 0.2f), (int) (cursorColor.B * 0.2f), (int) (cursorColor.A * 0.5f)), 0f, vector9, (float) (cursorScale * 1.1f), SpriteEffects.None, 0f);
            this.spriteBatch.Draw(cursorTexture, new Vector2((float) mouseX, (float) mouseY), new Rectangle(0, 0, cursorTexture.Width, cursorTexture.Height), cursorColor, 0f, new Vector2(), cursorScale, SpriteEffects.None, 0f);
            if (fadeCounter > 0)
            {
                Color white = Color.White;
                byte num108 = 0;
                fadeCounter--;
                float num109 = (((float) fadeCounter) / 75f) * 255f;
                num108 = (byte) num109;
                white = new Color((int) num108, (int) num108, (int) num108, (int) num108);
                this.spriteBatch.Draw(fadeTexture, new Rectangle(0, 0, screenWidth, screenHeight), white);
            }
            this.spriteBatch.End();
            if (mouseLeft)
            {
                mouseLeftRelease = false;
            }
            else
            {
                mouseLeftRelease = true;
            }
            if (mouseRight)
            {
                mouseRightRelease = false;
            }
            else
            {
                mouseRightRelease = true;
            }
        }

        protected void DrawNPCHouse()
        {
            for (int i = 0; i < 200; i++)
            {
                if (((!npc[i].active || !npc[i].townNPC) || (npc[i].homeless || (npc[i].homeTileX <= 0))) || ((npc[i].homeTileY <= 0) || (npc[i].type == 0x25)))
                {
                    continue;
                }
                int index = 1;
                int homeTileX = npc[i].homeTileX;
                int y = npc[i].homeTileY - 1;
                if (tile[homeTileX, y] != null)
                {
                    bool flag = false;
                    while (!tile[homeTileX, y].active || !tileSolid[tile[homeTileX, y].type])
                    {
                        y--;
                        if (y < 10)
                        {
                            break;
                        }
                        if (tile[homeTileX, y] == null)
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag)
                    {
                        int num5 = 8;
                        int num6 = 0x12;
                        if (tile[homeTileX, y].type == 0x13)
                        {
                            num6 -= 8;
                        }
                        y++;
                        this.spriteBatch.Draw(bannerTexture[index], new Vector2((float) (((homeTileX * 0x10) - ((int) screenPosition.X)) + num5), (float) (((y * 0x10) - ((int) screenPosition.Y)) + num6)), new Rectangle(0, 0, bannerTexture[index].Width, bannerTexture[index].Height), Lighting.GetColor(homeTileX, y), 0f, new Vector2((float) (bannerTexture[index].Width / 2), (float) (bannerTexture[index].Height / 2)), (float) 1f, SpriteEffects.None, 0f);
                        int num7 = NPC.TypeToNum(npc[i].type);
                        float scale = 1f;
                        float width = 0f;
                        if (npcHeadTexture[num7].Width > npcHeadTexture[num7].Height)
                        {
                            width = npcHeadTexture[num7].Width;
                        }
                        else
                        {
                            width = npcHeadTexture[num7].Height;
                        }
                        if (width > 24f)
                        {
                            scale = 24f / width;
                        }
                        this.spriteBatch.Draw(npcHeadTexture[num7], new Vector2((float) (((homeTileX * 0x10) - ((int) screenPosition.X)) + num5), (float) ((((y * 0x10) - ((int) screenPosition.Y)) + num6) + 2)), new Rectangle(0, 0, npcHeadTexture[num7].Width, npcHeadTexture[num7].Height), Lighting.GetColor(homeTileX, y), 0f, new Vector2((float) (npcHeadTexture[num7].Width / 2), (float) (npcHeadTexture[num7].Height / 2)), scale, SpriteEffects.None, 0f);
                        homeTileX = (((homeTileX * 0x10) - ((int) screenPosition.X)) + num5) - (bannerTexture[index].Width / 2);
                        y = (((y * 0x10) - ((int) screenPosition.Y)) + num6) - (bannerTexture[index].Height / 2);
                        if (((mouseX >= homeTileX) && (mouseX <= (homeTileX + bannerTexture[index].Width))) && ((mouseY >= y) && (mouseY <= (y + bannerTexture[index].Height))))
                        {
                            this.MouseText(npc[i].displayName + " the " + npc[i].name, 0, 0);
                            if (mouseRightRelease && mouseRight)
                            {
                                mouseRightRelease = false;
                                WorldGen.kickOut(i);
                                PlaySound(12, -1, -1, 1);
                            }
                        }
                    }
                }
            }
        }

        protected void DrawNPCs(bool behindTiles = false)
        {
            bool flag = false;
            Rectangle rectangle = new Rectangle(((int) screenPosition.X) - 300, ((int) screenPosition.Y) - 300, screenWidth + 600, screenHeight + 600);
            for (int i = 0xc7; i >= 0; i--)
            {
                if ((npc[i].active && (npc[i].type > 0)) && (npc[i].behindTiles == behindTiles))
                {
                    if (((npc[i].type == 0x7d) || (npc[i].type == 0x7e)) && !flag)
                    {
                        flag = true;
                        for (int j = 0; j < 200; j++)
                        {
                            if ((npc[j].active && (i != j)) && ((npc[j].type == 0x7d) || (npc[j].type == 0x7e)))
                            {
                                float num3 = npc[j].position.X + (npc[j].width * 0.5f);
                                float num4 = npc[j].position.Y + (npc[j].height * 0.5f);
                                Vector2 vector = new Vector2(npc[i].position.X + (npc[i].width * 0.5f), npc[i].position.Y + (npc[i].height * 0.5f));
                                float num5 = num3 - vector.X;
                                float num6 = num4 - vector.Y;
                                float rotation = ((float) Math.Atan2((double) num6, (double) num5)) - 1.57f;
                                bool flag2 = true;
                                float num8 = (float) Math.Sqrt((double) ((num5 * num5) + (num6 * num6)));
                                if (num8 > 2000f)
                                {
                                    flag2 = false;
                                }
                                while (flag2)
                                {
                                    num8 = (float) Math.Sqrt((double) ((num5 * num5) + (num6 * num6)));
                                    if (num8 < 40f)
                                    {
                                        flag2 = false;
                                    }
                                    else
                                    {
                                        num8 = ((float) chain12Texture.Height) / num8;
                                        num5 *= num8;
                                        num6 *= num8;
                                        vector.X += num5;
                                        vector.Y += num6;
                                        num5 = num3 - vector.X;
                                        num6 = num4 - vector.Y;
                                        Color color = Lighting.GetColor(((int) vector.X) / 0x10, (int) (vector.Y / 16f));
                                        this.spriteBatch.Draw(chain12Texture, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Rectangle(0, 0, chain12Texture.Width, chain12Texture.Height), color, rotation, new Vector2(chain12Texture.Width * 0.5f, chain12Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                    if (rectangle.Intersects(new Rectangle((int) npc[i].position.X, (int) npc[i].position.Y, npc[i].width, npc[i].height)))
                    {
                        Color color14;
                        if (npc[i].type == 0x65)
                        {
                            bool flag3 = true;
                            Vector2 vector2 = new Vector2(npc[i].position.X + (npc[i].width / 2), npc[i].position.Y + (npc[i].height / 2));
                            float num9 = ((npc[i].ai[0] * 16f) + 8f) - vector2.X;
                            float num10 = ((npc[i].ai[1] * 16f) + 8f) - vector2.Y;
                            float num11 = ((float) Math.Atan2((double) num10, (double) num9)) - 1.57f;
                            bool flag4 = true;
                            while (flag4)
                            {
                                float scale = 0.75f;
                                int height = 0x1c;
                                float num14 = (float) Math.Sqrt((double) ((num9 * num9) + (num10 * num10)));
                                if (num14 < (28f * scale))
                                {
                                    height = (((int) num14) - 40) + 0x1c;
                                    flag4 = false;
                                }
                                num14 = (20f * scale) / num14;
                                num9 *= num14;
                                num10 *= num14;
                                vector2.X += num9;
                                vector2.Y += num10;
                                num9 = ((npc[i].ai[0] * 16f) + 8f) - vector2.X;
                                num10 = ((npc[i].ai[1] * 16f) + 8f) - vector2.Y;
                                Color color2 = Lighting.GetColor(((int) vector2.X) / 0x10, (int) (vector2.Y / 16f));
                                if (!flag3)
                                {
                                    flag3 = true;
                                    this.spriteBatch.Draw(chain10Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Rectangle(0, 0, chain10Texture.Width, height), color2, num11, new Vector2(chain10Texture.Width * 0.5f, chain10Texture.Height * 0.5f), scale, SpriteEffects.None, 0f);
                                }
                                else
                                {
                                    flag3 = false;
                                    this.spriteBatch.Draw(chain11Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Rectangle(0, 0, chain10Texture.Width, height), color2, num11, new Vector2(chain10Texture.Width * 0.5f, chain10Texture.Height * 0.5f), scale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        else if (npc[i].aiStyle == 13)
                        {
                            Vector2 vector3 = new Vector2(npc[i].position.X + (npc[i].width / 2), npc[i].position.Y + (npc[i].height / 2));
                            float num15 = ((npc[i].ai[0] * 16f) + 8f) - vector3.X;
                            float num16 = ((npc[i].ai[1] * 16f) + 8f) - vector3.Y;
                            float num17 = ((float) Math.Atan2((double) num16, (double) num15)) - 1.57f;
                            bool flag5 = true;
                            while (flag5)
                            {
                                int num18 = 0x1c;
                                float num19 = (float) Math.Sqrt((double) ((num15 * num15) + (num16 * num16)));
                                if (num19 < 40f)
                                {
                                    num18 = (((int) num19) - 40) + 0x1c;
                                    flag5 = false;
                                }
                                num19 = 28f / num19;
                                num15 *= num19;
                                num16 *= num19;
                                vector3.X += num15;
                                vector3.Y += num16;
                                num15 = ((npc[i].ai[0] * 16f) + 8f) - vector3.X;
                                num16 = ((npc[i].ai[1] * 16f) + 8f) - vector3.Y;
                                Color color3 = Lighting.GetColor(((int) vector3.X) / 0x10, (int) (vector3.Y / 16f));
                                if (npc[i].type == 0x38)
                                {
                                    this.spriteBatch.Draw(chain5Texture, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Rectangle(0, 0, chain4Texture.Width, num18), color3, num17, new Vector2(chain4Texture.Width * 0.5f, chain4Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                                }
                                else
                                {
                                    this.spriteBatch.Draw(chain4Texture, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Rectangle(0, 0, chain4Texture.Width, num18), color3, num17, new Vector2(chain4Texture.Width * 0.5f, chain4Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (npc[i].type == 0x24)
                        {
                            Vector2 vector4 = new Vector2((npc[i].position.X + (npc[i].width * 0.5f)) - (5f * npc[i].ai[0]), npc[i].position.Y + 20f);
                            for (int k = 0; k < 2; k++)
                            {
                                float num21 = (npc[(int) npc[i].ai[1]].position.X + (npc[(int) npc[i].ai[1]].width / 2)) - vector4.X;
                                float num22 = (npc[(int) npc[i].ai[1]].position.Y + (npc[(int) npc[i].ai[1]].height / 2)) - vector4.Y;
                                float num23 = 0f;
                                if (k == 0)
                                {
                                    num21 -= 200f * npc[i].ai[0];
                                    num22 += 130f;
                                    num23 = (float) Math.Sqrt((double) ((num21 * num21) + (num22 * num22)));
                                    num23 = 92f / num23;
                                    vector4.X += num21 * num23;
                                    vector4.Y += num22 * num23;
                                }
                                else
                                {
                                    num21 -= 50f * npc[i].ai[0];
                                    num22 += 80f;
                                    num23 = (float) Math.Sqrt((double) ((num21 * num21) + (num22 * num22)));
                                    num23 = 60f / num23;
                                    vector4.X += num21 * num23;
                                    vector4.Y += num22 * num23;
                                }
                                float num24 = ((float) Math.Atan2((double) num22, (double) num21)) - 1.57f;
                                Color color4 = Lighting.GetColor(((int) vector4.X) / 0x10, (int) (vector4.Y / 16f));
                                this.spriteBatch.Draw(boneArmTexture, new Vector2(vector4.X - screenPosition.X, vector4.Y - screenPosition.Y), new Rectangle(0, 0, boneArmTexture.Width, boneArmTexture.Height), color4, num24, new Vector2(boneArmTexture.Width * 0.5f, boneArmTexture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                                if (k == 0)
                                {
                                    vector4.X += (num21 * num23) / 2f;
                                    vector4.Y += (num22 * num23) / 2f;
                                }
                                else if (base.IsActive)
                                {
                                    vector4.X += (num21 * num23) - 16f;
                                    vector4.Y += (num22 * num23) - 6f;
                                    color14 = new Color();
                                    int index = Dust.NewDust(new Vector2(vector4.X, vector4.Y), 30, 10, 5, num21 * 0.02f, num22 * 0.02f, 0, color14, 2f);
                                    dust[index].noGravity = true;
                                }
                            }
                        }
                        if ((npc[i].aiStyle >= 0x21) && (npc[i].aiStyle <= 0x24))
                        {
                            Vector2 vector5 = new Vector2((npc[i].position.X + (npc[i].width * 0.5f)) - (5f * npc[i].ai[0]), npc[i].position.Y + 20f);
                            for (int m = 0; m < 2; m++)
                            {
                                float num27 = (npc[(int) npc[i].ai[1]].position.X + (npc[(int) npc[i].ai[1]].width / 2)) - vector5.X;
                                float num28 = (npc[(int) npc[i].ai[1]].position.Y + (npc[(int) npc[i].ai[1]].height / 2)) - vector5.Y;
                                float num29 = 0f;
                                if (m == 0)
                                {
                                    num27 -= 200f * npc[i].ai[0];
                                    num28 += 130f;
                                    num29 = (float) Math.Sqrt((double) ((num27 * num27) + (num28 * num28)));
                                    num29 = 92f / num29;
                                    vector5.X += num27 * num29;
                                    vector5.Y += num28 * num29;
                                }
                                else
                                {
                                    num27 -= 50f * npc[i].ai[0];
                                    num28 += 80f;
                                    num29 = (float) Math.Sqrt((double) ((num27 * num27) + (num28 * num28)));
                                    num29 = 60f / num29;
                                    vector5.X += num27 * num29;
                                    vector5.Y += num28 * num29;
                                }
                                float num30 = ((float) Math.Atan2((double) num28, (double) num27)) - 1.57f;
                                Color color5 = Lighting.GetColor(((int) vector5.X) / 0x10, (int) (vector5.Y / 16f));
                                this.spriteBatch.Draw(boneArm2Texture, new Vector2(vector5.X - screenPosition.X, vector5.Y - screenPosition.Y), new Rectangle(0, 0, boneArmTexture.Width, boneArmTexture.Height), color5, num30, new Vector2(boneArmTexture.Width * 0.5f, boneArmTexture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                                if (m == 0)
                                {
                                    vector5.X += (num27 * num29) / 2f;
                                    vector5.Y += (num28 * num29) / 2f;
                                }
                                else if (base.IsActive)
                                {
                                    vector5.X += (num27 * num29) - 16f;
                                    vector5.Y += (num28 * num29) - 6f;
                                    color14 = new Color();
                                    int num31 = Dust.NewDust(new Vector2(vector5.X, vector5.Y), 30, 10, 6, num27 * 0.02f, num28 * 0.02f, 0, color14, 2.5f);
                                    dust[num31].noGravity = true;
                                }
                            }
                        }
                        if (npc[i].aiStyle == 20)
                        {
                            Vector2 vector6 = new Vector2(npc[i].position.X + (npc[i].width / 2), npc[i].position.Y + (npc[i].height / 2));
                            float num32 = npc[i].ai[1] - vector6.X;
                            float num33 = npc[i].ai[2] - vector6.Y;
                            float num34 = ((float) Math.Atan2((double) num33, (double) num32)) - 1.57f;
                            npc[i].rotation = num34;
                            bool flag6 = true;
                            while (flag6)
                            {
                                int num35 = 12;
                                float num36 = (float) Math.Sqrt((double) ((num32 * num32) + (num33 * num33)));
                                if (num36 < 20f)
                                {
                                    num35 = (((int) num36) - 20) + 12;
                                    flag6 = false;
                                }
                                num36 = 12f / num36;
                                num32 *= num36;
                                num33 *= num36;
                                vector6.X += num32;
                                vector6.Y += num33;
                                num32 = npc[i].ai[1] - vector6.X;
                                num33 = npc[i].ai[2] - vector6.Y;
                                Color color6 = Lighting.GetColor(((int) vector6.X) / 0x10, (int) (vector6.Y / 16f));
                                this.spriteBatch.Draw(chainTexture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Rectangle(0, 0, chainTexture.Width, num35), color6, num34, new Vector2(chainTexture.Width * 0.5f, chainTexture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                            }
                            this.spriteBatch.Draw(spikeBaseTexture, new Vector2(npc[i].ai[1] - screenPosition.X, npc[i].ai[2] - screenPosition.Y), new Rectangle(0, 0, spikeBaseTexture.Width, spikeBaseTexture.Height), Lighting.GetColor(((int) npc[i].ai[1]) / 0x10, (int) (npc[i].ai[2] / 16f)), num34 - 0.75f, new Vector2(spikeBaseTexture.Width * 0.5f, spikeBaseTexture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                        }
                        Color newColor = Lighting.GetColor(((int) (npc[i].position.X + (npc[i].width * 0.5))) / 0x10, (int) ((npc[i].position.Y + (npc[i].height * 0.5)) / 16.0));
                        if ((behindTiles && (npc[i].type != 0x71)) && (npc[i].type != 0x72))
                        {
                            int num37 = (int) ((npc[i].position.X - 8f) / 16f);
                            int num38 = (int) (((npc[i].position.X + npc[i].width) + 8f) / 16f);
                            int num39 = (int) ((npc[i].position.Y - 8f) / 16f);
                            int num40 = (int) (((npc[i].position.Y + npc[i].height) + 8f) / 16f);
                            for (int n = num37; n <= num38; n++)
                            {
                                for (int num42 = num39; num42 <= num40; num42++)
                                {
                                    if (Lighting.Brightness(n, num42) == 0f)
                                    {
                                        newColor = Color.Black;
                                    }
                                }
                            }
                        }
                        float r = 1f;
                        float g = 1f;
                        float b = 1f;
                        float a = 1f;
                        if (npc[i].poisoned)
                        {
                            if (rand.Next(30) == 0)
                            {
                                color14 = new Color();
                                int num47 = Dust.NewDust(npc[i].position, npc[i].width, npc[i].height, 0x2e, 0f, 0f, 120, color14, 0.2f);
                                dust[num47].noGravity = true;
                                dust[num47].fadeIn = 1.9f;
                            }
                            r *= 0.65f;
                            b *= 0.75f;
                            newColor = buffColor(newColor, r, g, b, a);
                        }
                        if (npc[i].onFire)
                        {
                            if (rand.Next(4) < 3)
                            {
                                color14 = new Color();
                                int num48 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y - 2f), npc[i].width + 4, npc[i].height + 4, 6, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, color14, 3.5f);
                                dust[num48].noGravity = true;
                                Dust dust1 = dust[num48];
                                dust1.velocity = (Vector2) (dust1.velocity * 1.8f);
                                dust[num48].velocity.Y -= 0.5f;
                                if (rand.Next(4) == 0)
                                {
                                    dust[num48].noGravity = false;
                                    Dust dust2 = dust[num48];
                                    dust2.scale *= 0.5f;
                                }
                            }
                            Lighting.addLight((int) (npc[i].position.X / 16f), (int) ((npc[i].position.Y / 16f) + 1f), 1f, 0.3f, 0.1f);
                        }
                        if (npc[i].onFire2)
                        {
                            if (rand.Next(4) < 3)
                            {
                                color14 = new Color();
                                int num49 = Dust.NewDust(new Vector2(npc[i].position.X - 2f, npc[i].position.Y - 2f), npc[i].width + 4, npc[i].height + 4, 0x4b, npc[i].velocity.X * 0.4f, npc[i].velocity.Y * 0.4f, 100, color14, 3.5f);
                                dust[num49].noGravity = true;
                                Dust dust3 = dust[num49];
                                dust3.velocity = (Vector2) (dust3.velocity * 1.8f);
                                dust[num49].velocity.Y -= 0.5f;
                                if (rand.Next(4) == 0)
                                {
                                    dust[num49].noGravity = false;
                                    Dust dust4 = dust[num49];
                                    dust4.scale *= 0.5f;
                                }
                            }
                            Lighting.addLight((int) (npc[i].position.X / 16f), (int) ((npc[i].position.Y / 16f) + 1f), 1f, 0.3f, 0.1f);
                        }
                        if (player[myPlayer].detectCreature && (npc[i].lifeMax > 1))
                        {
                            if (newColor.R < 150)
                            {
                                newColor.A = mouseTextColor;
                            }
                            if (newColor.R < 50)
                            {
                                newColor.R = 50;
                            }
                            if (newColor.G < 200)
                            {
                                newColor.G = 200;
                            }
                            if (newColor.B < 100)
                            {
                                newColor.B = 100;
                            }
                            if ((!gamePaused && base.IsActive) && (rand.Next(50) == 0))
                            {
                                color14 = new Color();
                                int num50 = Dust.NewDust(new Vector2(npc[i].position.X, npc[i].position.Y), npc[i].width, npc[i].height, 15, 0f, 0f, 150, color14, 0.8f);
                                Dust dust5 = dust[num50];
                                dust5.velocity = (Vector2) (dust5.velocity * 0.1f);
                                dust[num50].noLight = true;
                            }
                        }
                        if (npc[i].type == 50)
                        {
                            Vector2 vector7 = new Vector2();
                            float num51 = 0f;
                            vector7.Y -= npc[i].velocity.Y;
                            vector7.X -= npc[i].velocity.X * 2f;
                            num51 += npc[i].velocity.X * 0.05f;
                            if (npc[i].frame.Y == 120)
                            {
                                vector7.Y += 2f;
                            }
                            if (npc[i].frame.Y == 360)
                            {
                                vector7.Y -= 2f;
                            }
                            if (npc[i].frame.Y == 480)
                            {
                                vector7.Y -= 6f;
                            }
                            this.spriteBatch.Draw(ninjaTexture, new Vector2(((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) + vector7.X, ((npc[i].position.Y - screenPosition.Y) + (npc[i].height / 2)) + vector7.Y), new Rectangle(0, 0, ninjaTexture.Width, ninjaTexture.Height), newColor, num51, new Vector2((float) (ninjaTexture.Width / 2), (float) (ninjaTexture.Height / 2)), (float) 1f, SpriteEffects.None, 0f);
                        }
                        if (npc[i].type == 0x47)
                        {
                            Vector2 vector8 = new Vector2();
                            float num52 = 0f;
                            vector8.Y -= npc[i].velocity.Y * 0.3f;
                            vector8.X -= npc[i].velocity.X * 0.6f;
                            num52 += npc[i].velocity.X * 0.09f;
                            if (npc[i].frame.Y == 120)
                            {
                                vector8.Y += 2f;
                            }
                            if (npc[i].frame.Y == 360)
                            {
                                vector8.Y -= 2f;
                            }
                            if (npc[i].frame.Y == 480)
                            {
                                vector8.Y -= 6f;
                            }
                            this.spriteBatch.Draw(itemTexture[0x147], new Vector2(((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) + vector8.X, ((npc[i].position.Y - screenPosition.Y) + (npc[i].height / 2)) + vector8.Y), new Rectangle(0, 0, itemTexture[0x147].Width, itemTexture[0x147].Height), newColor, num52, new Vector2((float) (itemTexture[0x147].Width / 2), (float) (itemTexture[0x147].Height / 2)), (float) 1f, SpriteEffects.None, 0f);
                        }
                        if (npc[i].type == 0x45)
                        {
                            this.spriteBatch.Draw(antLionTexture, new Vector2((npc[i].position.X - screenPosition.X) + (npc[i].width / 2), ((npc[i].position.Y - screenPosition.Y) + npc[i].height) + 14f), new Rectangle(0, 0, antLionTexture.Width, antLionTexture.Height), newColor, -npc[i].rotation * 0.3f, new Vector2((float) (antLionTexture.Width / 2), (float) (antLionTexture.Height / 2)), (float) 1f, SpriteEffects.None, 0f);
                        }
                        float num53 = 0f;
                        float num54 = 0f;
                        Vector2 origin = new Vector2((float) (npcTexture[npc[i].type].Width / 2), (float) ((npcTexture[npc[i].type].Height / npcFrameCount[npc[i].type]) / 2));
                        if ((npc[i].type == 0x6c) || (npc[i].type == 0x7c))
                        {
                            num53 = 2f;
                        }
                        if (npc[i].type == 4)
                        {
                            origin = new Vector2(55f, 107f);
                        }
                        else if (npc[i].type == 0x7d)
                        {
                            origin = new Vector2(55f, 107f);
                            num54 = 30f;
                        }
                        else if (npc[i].type == 0x7e)
                        {
                            origin = new Vector2(55f, 107f);
                            num54 = 30f;
                        }
                        else if (npc[i].type == 6)
                        {
                            num54 = 26f;
                        }
                        else if (npc[i].type == 0x5e)
                        {
                            num54 = 14f;
                        }
                        else if (((npc[i].type == 7) || (npc[i].type == 8)) || (npc[i].type == 9))
                        {
                            num54 = 13f;
                        }
                        else if (((npc[i].type == 0x62) || (npc[i].type == 0x63)) || (npc[i].type == 100))
                        {
                            num54 = 13f;
                        }
                        else if (((npc[i].type == 0x5f) || (npc[i].type == 0x60)) || (npc[i].type == 0x61))
                        {
                            num54 = 13f;
                        }
                        else if (((npc[i].type == 10) || (npc[i].type == 11)) || (npc[i].type == 12))
                        {
                            num54 = 8f;
                        }
                        else if (((npc[i].type == 13) || (npc[i].type == 14)) || (npc[i].type == 15))
                        {
                            num54 = 26f;
                        }
                        else if (npc[i].type == 0x30)
                        {
                            num54 = 32f;
                        }
                        else if ((npc[i].type == 0x31) || (npc[i].type == 0x33))
                        {
                            num54 = 4f;
                        }
                        else if (npc[i].type == 60)
                        {
                            num54 = 10f;
                        }
                        else if ((npc[i].type == 0x3e) || (npc[i].type == 0x42))
                        {
                            num54 = 14f;
                        }
                        else if (((npc[i].type == 0x3f) || (npc[i].type == 0x40)) || (npc[i].type == 0x67))
                        {
                            num54 = 4f;
                            origin.Y += 4f;
                        }
                        else if (npc[i].type == 0x41)
                        {
                            num54 = 14f;
                        }
                        else if (npc[i].type == 0x45)
                        {
                            num54 = 4f;
                            origin.Y += 8f;
                        }
                        else if (npc[i].type == 70)
                        {
                            num54 = -4f;
                        }
                        else if (npc[i].type == 0x48)
                        {
                            num54 = -2f;
                        }
                        else if ((npc[i].type == 0x53) || (npc[i].type == 0x54))
                        {
                            num54 = 20f;
                        }
                        else if (((npc[i].type == 0x27) || (npc[i].type == 40)) || (npc[i].type == 0x29))
                        {
                            num54 = 26f;
                        }
                        else if ((npc[i].type >= 0x57) && (npc[i].type <= 0x5c))
                        {
                            num54 = 56f;
                        }
                        else if ((npc[i].type >= 0x86) && (npc[i].type <= 0x88))
                        {
                            num54 = 30f;
                        }
                        num54 *= npc[i].scale;
                        if ((npc[i].aiStyle == 10) || (npc[i].type == 0x48))
                        {
                            newColor = Color.White;
                        }
                        SpriteEffects none = SpriteEffects.None;
                        if (npc[i].spriteDirection == 1)
                        {
                            none = SpriteEffects.FlipHorizontally;
                        }
                        if ((npc[i].type == 0x53) || (npc[i].type == 0x54))
                        {
                            this.spriteBatch.Draw(npcTexture[npc[i].type], new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), Color.White, npc[i].rotation, origin, npc[i].scale, none, 0f);
                        }
                        else if ((npc[i].type >= 0x57) && (npc[i].type <= 0x5c))
                        {
                            Color alpha = npc[i].GetAlpha(newColor);
                            byte num55 = (byte) (((tileColor.R + tileColor.G) + tileColor.B) / 3);
                            if (alpha.R < num55)
                            {
                                alpha.R = num55;
                            }
                            if (alpha.G < num55)
                            {
                                alpha.G = num55;
                            }
                            if (alpha.B < num55)
                            {
                                alpha.B = num55;
                            }
                            this.spriteBatch.Draw(npcTexture[npc[i].type], new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), alpha, npc[i].rotation, origin, npc[i].scale, none, 0f);
                        }
                        else
                        {
                            if (npc[i].type == 0x5e)
                            {
                                for (int num56 = 1; num56 < 6; num56 += 2)
                                {
                                    Vector2 vector1 = npc[i].oldPos[num56];
                                    Color color9 = npc[i].GetAlpha(newColor);
                                    color9.R = (byte) ((color9.R * (10 - num56)) / 15);
                                    color9.G = (byte) ((color9.G * (10 - num56)) / 15);
                                    color9.B = (byte) ((color9.B * (10 - num56)) / 15);
                                    color9.A = (byte) ((color9.A * (10 - num56)) / 15);
                                    this.spriteBatch.Draw(npcTexture[npc[i].type], new Vector2((((npc[i].oldPos[num56].X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), (((((npc[i].oldPos[num56].Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54), new Rectangle?(npc[i].frame), color9, npc[i].rotation, origin, npc[i].scale, none, 0f);
                                }
                            }
                            if ((((npc[i].type == 0x7d) || (npc[i].type == 0x7e)) || ((npc[i].type == 0x7f) || (npc[i].type == 0x80))) || (((npc[i].type == 0x81) || (npc[i].type == 130)) || (((npc[i].type == 0x83) || (npc[i].type == 0x8b)) || (npc[i].type == 140))))
                            {
                                for (int num57 = 9; num57 >= 0; num57 -= 2)
                                {
                                    Vector2 vector10 = npc[i].oldPos[num57];
                                    Color color10 = npc[i].GetAlpha(newColor);
                                    color10.R = (byte) ((color10.R * (10 - num57)) / 20);
                                    color10.G = (byte) ((color10.G * (10 - num57)) / 20);
                                    color10.B = (byte) ((color10.B * (10 - num57)) / 20);
                                    color10.A = (byte) ((color10.A * (10 - num57)) / 20);
                                    this.spriteBatch.Draw(npcTexture[npc[i].type], new Vector2((((npc[i].oldPos[num57].X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), (((((npc[i].oldPos[num57].Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54), new Rectangle?(npc[i].frame), color10, npc[i].rotation, origin, npc[i].scale, none, 0f);
                                }
                            }
                            this.spriteBatch.Draw(npcTexture[npc[i].type], new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), npc[i].GetAlpha(newColor), npc[i].rotation, origin, npc[i].scale, none, 0f);
                            color14 = new Color();
                            if (npc[i].color != color14)
                            {
                                this.spriteBatch.Draw(npcTexture[npc[i].type], new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), npc[i].GetColor(newColor), npc[i].rotation, origin, npc[i].scale, none, 0f);
                            }
                            if (npc[i].confused)
                            {
                                this.spriteBatch.Draw(confuseTexture, new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53) - confuseTexture.Height) - 20f), new Rectangle(0, 0, confuseTexture.Width, confuseTexture.Height), new Color(250, 250, 250, 70), npc[i].velocity.X * -0.05f, new Vector2((float) (confuseTexture.Width / 2), (float) (confuseTexture.Height / 2)), (float) (essScale + 0.2f), SpriteEffects.None, 0f);
                            }
                            if (((npc[i].type >= 0x86) && (npc[i].type <= 0x88)) && (newColor != Color.Black))
                            {
                                this.spriteBatch.Draw(destTexture[npc[i].type - 0x86], new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), new Color(0xff, 0xff, 0xff, 0), npc[i].rotation, origin, npc[i].scale, none, 0f);
                            }
                            if (npc[i].type == 0x7d)
                            {
                                this.spriteBatch.Draw(EyeLaserTexture, new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), new Color(0xff, 0xff, 0xff, 0), npc[i].rotation, origin, npc[i].scale, none, 0f);
                            }
                            if (npc[i].type == 0x8b)
                            {
                                this.spriteBatch.Draw(probeTexture, new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), new Color(0xff, 0xff, 0xff, 0), npc[i].rotation, origin, npc[i].scale, none, 0f);
                            }
                            if (npc[i].type == 0x7f)
                            {
                                this.spriteBatch.Draw(BoneEyesTexture, new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), new Color(200, 200, 200, 0), npc[i].rotation, origin, npc[i].scale, none, 0f);
                            }
                            if (npc[i].type == 0x83)
                            {
                                this.spriteBatch.Draw(BoneLaserTexture, new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), ((((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) + num53), new Rectangle?(npc[i].frame), new Color(200, 200, 200, 0), npc[i].rotation, origin, npc[i].scale, none, 0f);
                            }
                            if (npc[i].type == 120)
                            {
                                for (int num58 = 1; num58 < npc[i].oldPos.Length; num58++)
                                {
                                    Vector2 vector11 = npc[i].oldPos[num58];
                                    Color color11 = new Color {
                                        R = (byte) ((150 * (10 - num58)) / 15),
                                        G = (byte) ((100 * (10 - num58)) / 15),
                                        B = (byte) ((150 * (10 - num58)) / 15),
                                        A = (byte) ((50 * (10 - num58)) / 15)
                                    };
                                    this.spriteBatch.Draw(chaosTexture, new Vector2((((npc[i].oldPos[num58].X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), (((((npc[i].oldPos[num58].Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54), new Rectangle?(npc[i].frame), color11, npc[i].rotation, origin, npc[i].scale, none, 0f);
                                }
                            }
                            else if ((npc[i].type == 0x89) || (npc[i].type == 0x8a))
                            {
                                for (int num59 = 1; num59 < npc[i].oldPos.Length; num59++)
                                {
                                    Vector2 vector12 = npc[i].oldPos[num59];
                                    Color color12 = new Color {
                                        R = (byte) ((150 * (10 - num59)) / 15),
                                        G = (byte) ((100 * (10 - num59)) / 15),
                                        B = (byte) ((150 * (10 - num59)) / 15),
                                        A = (byte) ((50 * (10 - num59)) / 15)
                                    };
                                    this.spriteBatch.Draw(npcTexture[npc[i].type], new Vector2((((npc[i].oldPos[num59].X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), (((((npc[i].oldPos[num59].Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54), new Rectangle?(npc[i].frame), color12, npc[i].rotation, origin, npc[i].scale, none, 0f);
                                }
                            }
                            else if (npc[i].type == 0x52)
                            {
                                this.spriteBatch.Draw(wraithEyeTexture, new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), (((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54), new Rectangle?(npc[i].frame), Color.White, npc[i].rotation, origin, npc[i].scale, none, 0f);
                                for (int num60 = 1; num60 < 10; num60++)
                                {
                                    Color color13 = new Color(110 - (num60 * 10), 110 - (num60 * 10), 110 - (num60 * 10), 110 - (num60 * 10));
                                    this.spriteBatch.Draw(wraithEyeTexture, new Vector2((((npc[i].position.X - screenPosition.X) + (npc[i].width / 2)) - ((npcTexture[npc[i].type].Width * npc[i].scale) / 2f)) + (origin.X * npc[i].scale), (((((npc[i].position.Y - screenPosition.Y) + npc[i].height) - ((npcTexture[npc[i].type].Height * npc[i].scale) / ((float) npcFrameCount[npc[i].type]))) + 4f) + (origin.Y * npc[i].scale)) + num54) - ((Vector2) ((npc[i].velocity * num60) * 0.5f)), new Rectangle?(npc[i].frame), color13, npc[i].rotation, origin, npc[i].scale, none, 0f);
                                }
                            }
                        }
                    }
                }
            }
        }

        protected void DrawPlayer(Player drawPlayer)
        {
            SpriteEffects none = SpriteEffects.None;
            SpriteEffects flipHorizontally = SpriteEffects.FlipHorizontally;
            Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.25)) / 16.0), Color.White));
            Color newColor = drawPlayer.GetImmuneAlpha(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.25)) / 16.0), drawPlayer.eyeColor));
            Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.25)) / 16.0), drawPlayer.hairColor));
            Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.25)) / 16.0), drawPlayer.skinColor));
            Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.5)) / 16.0), drawPlayer.skinColor));
            Color color = drawPlayer.GetImmuneAlpha(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.75)) / 16.0), drawPlayer.skinColor));
            Color color7 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.5)) / 16.0), drawPlayer.shirtColor));
            Color color8 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.5)) / 16.0), drawPlayer.underShirtColor));
            Color color9 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.75)) / 16.0), drawPlayer.pantsColor));
            Color color10 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.75)) / 16.0), drawPlayer.shoeColor));
            Color color11 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, ((int) (drawPlayer.position.Y + (drawPlayer.height * 0.25))) / 0x10, Color.White));
            Color color12 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, ((int) (drawPlayer.position.Y + (drawPlayer.height * 0.5))) / 0x10, Color.White));
            Color color13 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, ((int) (drawPlayer.position.Y + (drawPlayer.height * 0.75))) / 0x10, Color.White));
            if (drawPlayer.shadow > 0f)
            {
                color = new Color(0, 0, 0, 0);
                color5 = new Color(0, 0, 0, 0);
                color4 = new Color(0, 0, 0, 0);
                color3 = new Color(0, 0, 0, 0);
                newColor = new Color(0, 0, 0, 0);
                immuneAlpha = new Color(0, 0, 0, 0);
            }
            float r = 1f;
            float g = 1f;
            float b = 1f;
            float a = 1f;
            if (drawPlayer.poisoned)
            {
                if (rand.Next(50) == 0)
                {
                    int index = Dust.NewDust(drawPlayer.position, drawPlayer.width, drawPlayer.height, 0x2e, 0f, 0f, 150, new Color(), 0.2f);
                    dust[index].noGravity = true;
                    dust[index].fadeIn = 1.9f;
                }
                r *= 0.65f;
                b *= 0.75f;
            }
            if (drawPlayer.onFire)
            {
                if (rand.Next(4) == 0)
                {
                    int num6 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, new Color(), 3f);
                    dust[num6].noGravity = true;
                    Dust dust1 = dust[num6];
                    dust1.velocity = (Vector2) (dust1.velocity * 1.8f);
                    dust[num6].velocity.Y -= 0.5f;
                }
                b *= 0.6f;
                g *= 0.7f;
            }
            if (drawPlayer.onFire2)
            {
                if (rand.Next(4) == 0)
                {
                    int num7 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 0x4b, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, new Color(), 3f);
                    dust[num7].noGravity = true;
                    Dust dust2 = dust[num7];
                    dust2.velocity = (Vector2) (dust2.velocity * 1.8f);
                    dust[num7].velocity.Y -= 0.5f;
                }
                b *= 0.6f;
                g *= 0.7f;
            }
            if (drawPlayer.noItems)
            {
                g *= 0.8f;
                r *= 0.65f;
            }
            if (drawPlayer.blind)
            {
                g *= 0.65f;
                r *= 0.7f;
            }
            if (drawPlayer.bleed)
            {
                g *= 0.9f;
                b *= 0.9f;
                if (!drawPlayer.dead && (rand.Next(30) == 0))
                {
                    int num8 = Dust.NewDust(drawPlayer.position, drawPlayer.width, drawPlayer.height, 5, 0f, 0f, 0, new Color(), 1f);
                    dust[num8].velocity.Y += 0.5f;
                    Dust dust3 = dust[num8];
                    dust3.velocity = (Vector2) (dust3.velocity * 0.25f);
                }
            }
            if (((r != 1f) || (g != 1f)) || ((b != 1f) || (a != 1f)))
            {
                if (drawPlayer.onFire || drawPlayer.onFire2)
                {
                    immuneAlpha = drawPlayer.GetImmuneAlpha(Color.White);
                    newColor = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor);
                    color3 = drawPlayer.GetImmuneAlpha(drawPlayer.hairColor);
                    color4 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor);
                    color5 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor);
                    color7 = drawPlayer.GetImmuneAlpha(drawPlayer.shirtColor);
                    color8 = drawPlayer.GetImmuneAlpha(drawPlayer.underShirtColor);
                    color9 = drawPlayer.GetImmuneAlpha(drawPlayer.pantsColor);
                    color10 = drawPlayer.GetImmuneAlpha(drawPlayer.shoeColor);
                    color11 = drawPlayer.GetImmuneAlpha(Color.White);
                    color12 = drawPlayer.GetImmuneAlpha(Color.White);
                    color13 = drawPlayer.GetImmuneAlpha(Color.White);
                }
                else
                {
                    immuneAlpha = buffColor(immuneAlpha, r, g, b, a);
                    newColor = buffColor(newColor, r, g, b, a);
                    color3 = buffColor(color3, r, g, b, a);
                    color4 = buffColor(color4, r, g, b, a);
                    color5 = buffColor(color5, r, g, b, a);
                    color7 = buffColor(color7, r, g, b, a);
                    color8 = buffColor(color8, r, g, b, a);
                    color9 = buffColor(color9, r, g, b, a);
                    color10 = buffColor(color10, r, g, b, a);
                    color11 = buffColor(color11, r, g, b, a);
                    color12 = buffColor(color12, r, g, b, a);
                    color13 = buffColor(color13, r, g, b, a);
                }
            }
            if (drawPlayer.gravDir == 1f)
            {
                if (drawPlayer.direction == 1)
                {
                    none = SpriteEffects.None;
                    flipHorizontally = SpriteEffects.None;
                }
                else
                {
                    none = SpriteEffects.FlipHorizontally;
                    flipHorizontally = SpriteEffects.FlipHorizontally;
                }
                if (!drawPlayer.dead)
                {
                    drawPlayer.legPosition.Y = 0f;
                    drawPlayer.headPosition.Y = 0f;
                    drawPlayer.bodyPosition.Y = 0f;
                }
            }
            else
            {
                if (drawPlayer.direction == 1)
                {
                    none = SpriteEffects.FlipVertically;
                    flipHorizontally = SpriteEffects.FlipVertically;
                }
                else
                {
                    none = SpriteEffects.FlipVertically | SpriteEffects.FlipHorizontally;
                    flipHorizontally = SpriteEffects.FlipVertically | SpriteEffects.FlipHorizontally;
                }
                if (!drawPlayer.dead)
                {
                    drawPlayer.legPosition.Y = 6f;
                    drawPlayer.headPosition.Y = 6f;
                    drawPlayer.bodyPosition.Y = 6f;
                }
            }
            Vector2 origin = new Vector2(drawPlayer.legFrame.Width * 0.5f, drawPlayer.legFrame.Height * 0.75f);
            Vector2 vector2 = new Vector2(drawPlayer.legFrame.Width * 0.5f, drawPlayer.legFrame.Height * 0.5f);
            Vector2 vector3 = new Vector2(drawPlayer.legFrame.Width * 0.5f, drawPlayer.legFrame.Height * 0.4f);
            if (drawPlayer.merman)
            {
                drawPlayer.headRotation = (drawPlayer.velocity.Y * drawPlayer.direction) * 0.1f;
                if (drawPlayer.headRotation < -0.3)
                {
                    drawPlayer.headRotation = -0.3f;
                }
                if (drawPlayer.headRotation > 0.3)
                {
                    drawPlayer.headRotation = 0.3f;
                }
            }
            else if (!drawPlayer.dead)
            {
                drawPlayer.headRotation = 0f;
            }
            if (drawPlayer.wings > 0)
            {
                this.spriteBatch.Draw(wingsTexture[drawPlayer.wings], new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) + (drawPlayer.width / 2)) - (9 * drawPlayer.direction)), (float) ((int) (((drawPlayer.position.Y - screenPosition.Y) + (drawPlayer.height / 2)) + (2f * drawPlayer.gravDir)))), new Rectangle(0, (wingsTexture[drawPlayer.wings].Height / 4) * drawPlayer.wingFrame, wingsTexture[drawPlayer.wings].Width, wingsTexture[drawPlayer.wings].Height / 4), color12, drawPlayer.bodyRotation, new Vector2((float) (wingsTexture[drawPlayer.wings].Width / 2), (float) (wingsTexture[drawPlayer.wings].Height / 8)), (float) 1f, none, 0f);
            }
            if (!drawPlayer.invis)
            {
                this.spriteBatch.Draw(skinBodyTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                this.spriteBatch.Draw(skinLegsTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.legFrame), color, drawPlayer.legRotation, vector2, (float) 1f, none, 0f);
            }
            if ((drawPlayer.legs > 0) && (drawPlayer.legs < 0x18))
            {
                this.spriteBatch.Draw(armorLegTexture[drawPlayer.legs], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.legFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.legFrame.Height) + 4f))) + drawPlayer.legPosition) + origin, new Rectangle?(drawPlayer.legFrame), color13, drawPlayer.legRotation, origin, (float) 1f, none, 0f);
            }
            else if (!drawPlayer.invis)
            {
                if (!drawPlayer.male)
                {
                    this.spriteBatch.Draw(femalePantsTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.legFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.legFrame.Height) + 4f))) + drawPlayer.legPosition) + origin, new Rectangle?(drawPlayer.legFrame), color9, drawPlayer.legRotation, origin, (float) 1f, none, 0f);
                    this.spriteBatch.Draw(femaleShoesTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.legFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.legFrame.Height) + 4f))) + drawPlayer.legPosition) + origin, new Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, origin, (float) 1f, none, 0f);
                }
                else
                {
                    this.spriteBatch.Draw(playerPantsTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.legFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.legFrame.Height) + 4f))) + drawPlayer.legPosition) + origin, new Rectangle?(drawPlayer.legFrame), color9, drawPlayer.legRotation, origin, (float) 1f, none, 0f);
                    this.spriteBatch.Draw(playerShoesTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.legFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.legFrame.Height) + 4f))) + drawPlayer.legPosition) + origin, new Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, origin, (float) 1f, none, 0f);
                }
            }
            if ((drawPlayer.body > 0) && (drawPlayer.body < 0x19))
            {
                if (!drawPlayer.male)
                {
                    this.spriteBatch.Draw(femaleBodyTexture[drawPlayer.body], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
                else
                {
                    this.spriteBatch.Draw(armorBodyTexture[drawPlayer.body], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
                if (((((drawPlayer.body == 10) || (drawPlayer.body == 11)) || ((drawPlayer.body == 12) || (drawPlayer.body == 13))) || (((drawPlayer.body == 14) || (drawPlayer.body == 15)) || ((drawPlayer.body == 0x10) || (drawPlayer.body == 20)))) && !drawPlayer.invis)
                {
                    this.spriteBatch.Draw(playerHandsTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
            }
            else if (!drawPlayer.invis)
            {
                if (!drawPlayer.male)
                {
                    this.spriteBatch.Draw(femaleUnderShirtTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                    this.spriteBatch.Draw(femaleShirtTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
                else
                {
                    this.spriteBatch.Draw(playerUnderShirtTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                    this.spriteBatch.Draw(playerShirtTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
                this.spriteBatch.Draw(playerHandsTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
            }
            if (!drawPlayer.invis && (drawPlayer.head != 0x26))
            {
                this.spriteBatch.Draw(playerHeadTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
                this.spriteBatch.Draw(playerEyeWhitesTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(drawPlayer.bodyFrame), immuneAlpha, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
                this.spriteBatch.Draw(playerEyesTexture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(drawPlayer.bodyFrame), newColor, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
            }
            if (((drawPlayer.head == 10) || (drawPlayer.head == 12)) || (drawPlayer.head == 0x1c))
            {
                this.spriteBatch.Draw(armorHeadTexture[drawPlayer.head], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
                if (!drawPlayer.invis)
                {
                    Rectangle bodyFrame = drawPlayer.bodyFrame;
                    bodyFrame.Y -= 0x150;
                    if (bodyFrame.Y < 0)
                    {
                        bodyFrame.Y = 0;
                    }
                    this.spriteBatch.Draw(playerHairTexture[drawPlayer.hair], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(bodyFrame), color3, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
                }
            }
            if (drawPlayer.head == 0x17)
            {
                Rectangle rectangle2 = drawPlayer.bodyFrame;
                rectangle2.Y -= 0x150;
                if (rectangle2.Y < 0)
                {
                    rectangle2.Y = 0;
                }
                if (!drawPlayer.invis)
                {
                    this.spriteBatch.Draw(playerHairTexture[drawPlayer.hair], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(rectangle2), color3, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
                }
                this.spriteBatch.Draw(armorHeadTexture[drawPlayer.head], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
            }
            else if (drawPlayer.head == 14)
            {
                Rectangle rectangle3 = drawPlayer.bodyFrame;
                int num9 = 0;
                if (rectangle3.Y == (rectangle3.Height * 6))
                {
                    rectangle3.Height -= 2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 7))
                {
                    num9 = -2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 8))
                {
                    num9 = -2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 9))
                {
                    num9 = -2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 10))
                {
                    num9 = -2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 13))
                {
                    rectangle3.Height -= 2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 14))
                {
                    num9 = -2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 15))
                {
                    num9 = -2;
                }
                else if (rectangle3.Y == (rectangle3.Height * 0x10))
                {
                    num9 = -2;
                }
                rectangle3.Y += num9;
                this.spriteBatch.Draw(armorHeadTexture[drawPlayer.head], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) (((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f)) + num9)) + drawPlayer.headPosition) + vector3, new Rectangle?(rectangle3), color11, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
            }
            else if (((drawPlayer.head > 0) && (drawPlayer.head < 0x2c)) && (drawPlayer.head != 0x1c))
            {
                this.spriteBatch.Draw(armorHeadTexture[drawPlayer.head], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
            }
            else if (!drawPlayer.invis)
            {
                Rectangle rectangle4 = drawPlayer.bodyFrame;
                rectangle4.Y -= 0x150;
                if (rectangle4.Y < 0)
                {
                    rectangle4.Y = 0;
                }
                this.spriteBatch.Draw(playerHairTexture[drawPlayer.hair], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.headPosition) + vector3, new Rectangle?(rectangle4), color3, drawPlayer.headRotation, vector3, (float) 1f, none, 0f);
            }
            if (drawPlayer.heldProj >= 0)
            {
                this.DrawProj(drawPlayer.heldProj);
            }
            Color color14 = Lighting.GetColor(((int) (drawPlayer.position.X + (drawPlayer.width * 0.5))) / 0x10, (int) ((drawPlayer.position.Y + (drawPlayer.height * 0.5)) / 16.0));
            if (((drawPlayer.itemAnimation > 0) || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0)) && ((((drawPlayer.inventory[drawPlayer.selectedItem].type > 0) && !drawPlayer.dead) && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic) && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet)))
            {
                if (drawPlayer.inventory[drawPlayer.selectedItem].useStyle == 5)
                {
                    int num10 = 10;
                    Vector2 vector4 = new Vector2((float) (itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width / 2), (float) (itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
                    if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x5f)
                    {
                        num10 = 10;
                        vector4.Y += 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x60)
                    {
                        num10 = -5;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x62)
                    {
                        num10 = -5;
                        vector4.Y -= 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x216)
                    {
                        num10 = -2;
                        vector4.Y += 1f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x215)
                    {
                        num10 = -7;
                        vector4.Y -= 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1fa)
                    {
                        num10 = 0;
                        vector4.Y -= 2f * drawPlayer.gravDir;
                    }
                    else if ((drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1ee) || (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1fc))
                    {
                        num10 = -2;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1b2)
                    {
                        num10 = 0;
                        vector4.Y -= 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x202)
                    {
                        num10 = 0;
                        vector4.Y += 3f * drawPlayer.gravDir;
                    }
                    else if (((drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1b3) || (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1b4)) || ((drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1e1) || (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x242)))
                    {
                        num10 = -2;
                        vector4.Y -= 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0xc5)
                    {
                        num10 = -5;
                        vector4.Y += 4f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x7e)
                    {
                        num10 = 4;
                        vector4.Y += 4f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x7f)
                    {
                        num10 = 4;
                        vector4.Y += 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x9d)
                    {
                        num10 = 6;
                        vector4.Y += 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 160)
                    {
                        num10 = -8;
                    }
                    else if ((drawPlayer.inventory[drawPlayer.selectedItem].type == 0xa4) || (drawPlayer.inventory[drawPlayer.selectedItem].type == 0xdb))
                    {
                        num10 = 2;
                        vector4.Y += 4f * drawPlayer.gravDir;
                    }
                    else if ((drawPlayer.inventory[drawPlayer.selectedItem].type == 0xa5) || (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x110))
                    {
                        num10 = 4;
                        vector4.Y += 4f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x10a)
                    {
                        num10 = 0;
                        vector4.Y += 2f * drawPlayer.gravDir;
                    }
                    else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x119)
                    {
                        num10 = 6;
                        vector4.Y -= 6f * drawPlayer.gravDir;
                    }
                    Vector2 vector5 = new Vector2((float) -num10, (float) (itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
                    if (drawPlayer.direction == -1)
                    {
                        vector5 = new Vector2((float) (itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width + num10), (float) (itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
                    }
                    this.spriteBatch.Draw(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float) ((int) ((drawPlayer.itemLocation.X - screenPosition.X) + vector4.X)), (float) ((int) ((drawPlayer.itemLocation.Y - screenPosition.Y) + vector4.Y))), new Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color14), drawPlayer.itemRotation, vector5, drawPlayer.inventory[drawPlayer.selectedItem].scale, flipHorizontally, 0f);
                    if (drawPlayer.inventory[drawPlayer.selectedItem].color != new Color())
                    {
                        this.spriteBatch.Draw(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float) ((int) ((drawPlayer.itemLocation.X - screenPosition.X) + vector4.X)), (float) ((int) ((drawPlayer.itemLocation.Y - screenPosition.Y) + vector4.Y))), new Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color14), drawPlayer.itemRotation, vector5, drawPlayer.inventory[drawPlayer.selectedItem].scale, flipHorizontally, 0f);
                    }
                }
                else if (drawPlayer.gravDir == -1f)
                {
                    this.spriteBatch.Draw(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float) ((int) (drawPlayer.itemLocation.X - screenPosition.X)), (float) ((int) (drawPlayer.itemLocation.Y - screenPosition.Y))), new Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color14), drawPlayer.itemRotation, new Vector2((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) - ((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) * drawPlayer.direction), 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, flipHorizontally, 0f);
                    if (drawPlayer.inventory[drawPlayer.selectedItem].color != new Color())
                    {
                        this.spriteBatch.Draw(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float) ((int) (drawPlayer.itemLocation.X - screenPosition.X)), (float) ((int) (drawPlayer.itemLocation.Y - screenPosition.Y))), new Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color14), drawPlayer.itemRotation, new Vector2((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) - ((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) * drawPlayer.direction), 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, flipHorizontally, 0f);
                    }
                }
                else
                {
                    if ((drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1a9) || (drawPlayer.inventory[drawPlayer.selectedItem].type == 0x1fb))
                    {
                        if (drawPlayer.gravDir == 1f)
                        {
                            if (drawPlayer.direction == 1)
                            {
                                flipHorizontally = SpriteEffects.FlipVertically;
                            }
                            else
                            {
                                flipHorizontally = SpriteEffects.FlipVertically | SpriteEffects.FlipHorizontally;
                            }
                        }
                        else if (drawPlayer.direction == 1)
                        {
                            flipHorizontally = SpriteEffects.None;
                        }
                        else
                        {
                            flipHorizontally = SpriteEffects.FlipHorizontally;
                        }
                    }
                    this.spriteBatch.Draw(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float) ((int) (drawPlayer.itemLocation.X - screenPosition.X)), (float) ((int) (drawPlayer.itemLocation.Y - screenPosition.Y))), new Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color14), drawPlayer.itemRotation, new Vector2((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) - ((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) * drawPlayer.direction), (float) itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, flipHorizontally, 0f);
                    if (drawPlayer.inventory[drawPlayer.selectedItem].color != new Color())
                    {
                        this.spriteBatch.Draw(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float) ((int) (drawPlayer.itemLocation.X - screenPosition.X)), (float) ((int) (drawPlayer.itemLocation.Y - screenPosition.Y))), new Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color14), drawPlayer.itemRotation, new Vector2((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) - ((itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f) * drawPlayer.direction), (float) itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, flipHorizontally, 0f);
                    }
                }
            }
            if ((drawPlayer.body > 0) && (drawPlayer.body < 0x19))
            {
                this.spriteBatch.Draw(armorArmTexture[drawPlayer.body], (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                if (((((drawPlayer.body == 10) || (drawPlayer.body == 11)) || ((drawPlayer.body == 12) || (drawPlayer.body == 13))) || (((drawPlayer.body == 14) || (drawPlayer.body == 15)) || ((drawPlayer.body == 0x10) || (drawPlayer.body == 20)))) && !drawPlayer.invis)
                {
                    this.spriteBatch.Draw(playerHands2Texture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
            }
            else if (!drawPlayer.invis)
            {
                if (!drawPlayer.male)
                {
                    this.spriteBatch.Draw(femaleUnderShirt2Texture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                    this.spriteBatch.Draw(femaleShirt2Texture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
                else
                {
                    this.spriteBatch.Draw(playerUnderShirt2Texture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
                }
                this.spriteBatch.Draw(playerHands2Texture, (new Vector2((float) ((((int) (drawPlayer.position.X - screenPosition.X)) - (drawPlayer.bodyFrame.Width / 2)) + (drawPlayer.width / 2)), (float) ((int) ((((drawPlayer.position.Y - screenPosition.Y) + drawPlayer.height) - drawPlayer.bodyFrame.Height) + 4f))) + drawPlayer.bodyPosition) + new Vector2((float) (drawPlayer.bodyFrame.Width / 2), (float) (drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, vector2, (float) 1f, none, 0f);
            }
        }

        protected void DrawProj(int i)
        {
            if (projectile[i].type == 0x20)
            {
                Vector2 vector = new Vector2(projectile[i].position.X + (projectile[i].width * 0.5f), projectile[i].position.Y + (projectile[i].height * 0.5f));
                float num = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector.X;
                float num2 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector.Y;
                float rotation = ((float) Math.Atan2((double) num2, (double) num)) - 1.57f;
                bool flag = true;
                if ((num == 0f) && (num2 == 0f))
                {
                    flag = false;
                }
                else
                {
                    float num4 = (float) Math.Sqrt((double) ((num * num) + (num2 * num2)));
                    num4 = 8f / num4;
                    num *= num4;
                    num2 *= num4;
                    vector.X -= num;
                    vector.Y -= num2;
                    num = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector.X;
                    num2 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector.Y;
                }
                while (flag)
                {
                    float num5 = (float) Math.Sqrt((double) ((num * num) + (num2 * num2)));
                    if (num5 < 28f)
                    {
                        flag = false;
                    }
                    else
                    {
                        num5 = 28f / num5;
                        num *= num5;
                        num2 *= num5;
                        vector.X += num;
                        vector.Y += num2;
                        num = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector.X;
                        num2 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector.Y;
                        Color color = Lighting.GetColor(((int) vector.X) / 0x10, (int) (vector.Y / 16f));
                        this.spriteBatch.Draw(chain5Texture, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Rectangle(0, 0, chain5Texture.Width, chain5Texture.Height), color, rotation, new Vector2(chain5Texture.Width * 0.5f, chain5Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile[i].type == 0x49)
            {
                Vector2 vector2 = new Vector2(projectile[i].position.X + (projectile[i].width * 0.5f), projectile[i].position.Y + (projectile[i].height * 0.5f));
                float num6 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector2.X;
                float num7 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector2.Y;
                float num8 = ((float) Math.Atan2((double) num7, (double) num6)) - 1.57f;
                bool flag2 = true;
                while (flag2)
                {
                    float num9 = (float) Math.Sqrt((double) ((num6 * num6) + (num7 * num7)));
                    if (num9 < 25f)
                    {
                        flag2 = false;
                    }
                    else
                    {
                        num9 = 12f / num9;
                        num6 *= num9;
                        num7 *= num9;
                        vector2.X += num6;
                        vector2.Y += num7;
                        num6 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector2.X;
                        num7 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector2.Y;
                        Color color2 = Lighting.GetColor(((int) vector2.X) / 0x10, (int) (vector2.Y / 16f));
                        this.spriteBatch.Draw(chain8Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Rectangle(0, 0, chain8Texture.Width, chain8Texture.Height), color2, num8, new Vector2(chain8Texture.Width * 0.5f, chain8Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile[i].type == 0x4a)
            {
                Vector2 vector3 = new Vector2(projectile[i].position.X + (projectile[i].width * 0.5f), projectile[i].position.Y + (projectile[i].height * 0.5f));
                float num10 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector3.X;
                float num11 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector3.Y;
                float num12 = ((float) Math.Atan2((double) num11, (double) num10)) - 1.57f;
                bool flag3 = true;
                while (flag3)
                {
                    float num13 = (float) Math.Sqrt((double) ((num10 * num10) + (num11 * num11)));
                    if (num13 < 25f)
                    {
                        flag3 = false;
                    }
                    else
                    {
                        num13 = 12f / num13;
                        num10 *= num13;
                        num11 *= num13;
                        vector3.X += num10;
                        vector3.Y += num11;
                        num10 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector3.X;
                        num11 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector3.Y;
                        Color color3 = Lighting.GetColor(((int) vector3.X) / 0x10, (int) (vector3.Y / 16f));
                        this.spriteBatch.Draw(chain9Texture, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Rectangle(0, 0, chain8Texture.Width, chain8Texture.Height), color3, num12, new Vector2(chain8Texture.Width * 0.5f, chain8Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile[i].aiStyle == 7)
            {
                Vector2 vector4 = new Vector2(projectile[i].position.X + (projectile[i].width * 0.5f), projectile[i].position.Y + (projectile[i].height * 0.5f));
                float num14 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector4.X;
                float num15 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector4.Y;
                float num16 = ((float) Math.Atan2((double) num15, (double) num14)) - 1.57f;
                bool flag4 = true;
                while (flag4)
                {
                    float num17 = (float) Math.Sqrt((double) ((num14 * num14) + (num15 * num15)));
                    if (num17 < 25f)
                    {
                        flag4 = false;
                    }
                    else
                    {
                        num17 = 12f / num17;
                        num14 *= num17;
                        num15 *= num17;
                        vector4.X += num14;
                        vector4.Y += num15;
                        num14 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector4.X;
                        num15 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector4.Y;
                        Color color4 = Lighting.GetColor(((int) vector4.X) / 0x10, (int) (vector4.Y / 16f));
                        this.spriteBatch.Draw(chainTexture, new Vector2(vector4.X - screenPosition.X, vector4.Y - screenPosition.Y), new Rectangle(0, 0, chainTexture.Width, chainTexture.Height), color4, num16, new Vector2(chainTexture.Width * 0.5f, chainTexture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile[i].aiStyle == 13)
            {
                float num18 = projectile[i].position.X + 8f;
                float y = projectile[i].position.Y + 2f;
                float num20 = projectile[i].velocity.X;
                float num21 = projectile[i].velocity.Y;
                float num22 = (float) Math.Sqrt((double) ((num20 * num20) + (num21 * num21)));
                num22 = 20f / num22;
                if (projectile[i].ai[0] == 0f)
                {
                    num18 -= projectile[i].velocity.X * num22;
                    y -= projectile[i].velocity.Y * num22;
                }
                else
                {
                    num18 += projectile[i].velocity.X * num22;
                    y += projectile[i].velocity.Y * num22;
                }
                Vector2 vector5 = new Vector2(num18, y);
                num20 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector5.X;
                num21 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector5.Y;
                float num23 = ((float) Math.Atan2((double) num21, (double) num20)) - 1.57f;
                if (projectile[i].alpha == 0)
                {
                    int num24 = -1;
                    if ((projectile[i].position.X + (projectile[i].width / 2)) < (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)))
                    {
                        num24 = 1;
                    }
                    if (player[projectile[i].owner].direction == 1)
                    {
                        player[projectile[i].owner].itemRotation = (float) Math.Atan2((double) (num21 * num24), (double) (num20 * num24));
                    }
                    else
                    {
                        player[projectile[i].owner].itemRotation = (float) Math.Atan2((double) (num21 * num24), (double) (num20 * num24));
                    }
                }
                bool flag5 = true;
                while (flag5)
                {
                    float num25 = (float) Math.Sqrt((double) ((num20 * num20) + (num21 * num21)));
                    if (num25 < 25f)
                    {
                        flag5 = false;
                    }
                    else
                    {
                        num25 = 12f / num25;
                        num20 *= num25;
                        num21 *= num25;
                        vector5.X += num20;
                        vector5.Y += num21;
                        num20 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector5.X;
                        num21 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector5.Y;
                        Color color5 = Lighting.GetColor(((int) vector5.X) / 0x10, (int) (vector5.Y / 16f));
                        this.spriteBatch.Draw(chainTexture, new Vector2(vector5.X - screenPosition.X, vector5.Y - screenPosition.Y), new Rectangle(0, 0, chainTexture.Width, chainTexture.Height), color5, num23, new Vector2(chainTexture.Width * 0.5f, chainTexture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile[i].aiStyle == 15)
            {
                Vector2 vector6 = new Vector2(projectile[i].position.X + (projectile[i].width * 0.5f), projectile[i].position.Y + (projectile[i].height * 0.5f));
                float num26 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector6.X;
                float num27 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector6.Y;
                float num28 = ((float) Math.Atan2((double) num27, (double) num26)) - 1.57f;
                if (projectile[i].alpha == 0)
                {
                    int num29 = -1;
                    if ((projectile[i].position.X + (projectile[i].width / 2)) < (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)))
                    {
                        num29 = 1;
                    }
                    if (player[projectile[i].owner].direction == 1)
                    {
                        player[projectile[i].owner].itemRotation = (float) Math.Atan2((double) (num27 * num29), (double) (num26 * num29));
                    }
                    else
                    {
                        player[projectile[i].owner].itemRotation = (float) Math.Atan2((double) (num27 * num29), (double) (num26 * num29));
                    }
                }
                bool flag6 = true;
                while (flag6)
                {
                    float num30 = (float) Math.Sqrt((double) ((num26 * num26) + (num27 * num27)));
                    if (num30 < 25f)
                    {
                        flag6 = false;
                    }
                    else
                    {
                        num30 = 12f / num30;
                        num26 *= num30;
                        num27 *= num30;
                        vector6.X += num26;
                        vector6.Y += num27;
                        num26 = (player[projectile[i].owner].position.X + (player[projectile[i].owner].width / 2)) - vector6.X;
                        num27 = (player[projectile[i].owner].position.Y + (player[projectile[i].owner].height / 2)) - vector6.Y;
                        Color color6 = Lighting.GetColor(((int) vector6.X) / 0x10, (int) (vector6.Y / 16f));
                        if (projectile[i].type == 0x19)
                        {
                            this.spriteBatch.Draw(chain2Texture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Rectangle(0, 0, chain2Texture.Width, chain2Texture.Height), color6, num28, new Vector2(chain2Texture.Width * 0.5f, chain2Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                            continue;
                        }
                        if (projectile[i].type == 0x23)
                        {
                            this.spriteBatch.Draw(chain6Texture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Rectangle(0, 0, chain6Texture.Width, chain6Texture.Height), color6, num28, new Vector2(chain6Texture.Width * 0.5f, chain6Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                            continue;
                        }
                        if (projectile[i].type == 0x3f)
                        {
                            this.spriteBatch.Draw(chain7Texture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Rectangle(0, 0, chain7Texture.Width, chain7Texture.Height), color6, num28, new Vector2(chain7Texture.Width * 0.5f, chain7Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                            continue;
                        }
                        this.spriteBatch.Draw(chain3Texture, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Rectangle(0, 0, chain3Texture.Width, chain3Texture.Height), color6, num28, new Vector2(chain3Texture.Width * 0.5f, chain3Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            Color newColor = Lighting.GetColor(((int) (projectile[i].position.X + (projectile[i].width * 0.5))) / 0x10, (int) ((projectile[i].position.Y + (projectile[i].height * 0.5)) / 16.0));
            if (projectile[i].hide)
            {
                newColor = Lighting.GetColor(((int) (player[projectile[i].owner].position.X + (player[projectile[i].owner].width * 0.5))) / 0x10, (int) ((player[projectile[i].owner].position.Y + (player[projectile[i].owner].height * 0.5)) / 16.0));
            }
            if (projectile[i].type == 14)
            {
                newColor = Color.White;
            }
            int num31 = 0;
            int num32 = 0;
            if (projectile[i].type == 0x10)
            {
                num31 = 6;
            }
            if ((projectile[i].type == 0x11) || (projectile[i].type == 0x1f))
            {
                num31 = 2;
            }
            if (((projectile[i].type == 0x19) || (projectile[i].type == 0x1a)) || ((projectile[i].type == 0x23) || (projectile[i].type == 0x3f)))
            {
                num31 = 6;
                num32 -= 6;
            }
            if (((projectile[i].type == 0x1c) || (projectile[i].type == 0x25)) || (projectile[i].type == 0x4b))
            {
                num31 = 8;
            }
            if (projectile[i].type == 0x1d)
            {
                num31 = 11;
            }
            if (projectile[i].type == 0x2b)
            {
                num31 = 4;
            }
            if ((projectile[i].type == 0x45) || (projectile[i].type == 70))
            {
                num31 = 4;
                num32 = 4;
            }
            float x = ((projectileTexture[projectile[i].type].Width - projectile[i].width) * 0.5f) + (projectile[i].width * 0.5f);
            if ((projectile[i].type == 50) || (projectile[i].type == 0x35))
            {
                num32 = -8;
            }
            if (((projectile[i].type == 0x48) || (projectile[i].type == 0x56)) || (projectile[i].type == 0x57))
            {
                num32 = -16;
                num31 = 8;
            }
            if (projectile[i].type == 0x4a)
            {
                num32 = -6;
            }
            if (projectile[i].type == 0x63)
            {
                num31 = 1;
            }
            SpriteEffects none = SpriteEffects.None;
            if (projectile[i].spriteDirection == -1)
            {
                none = SpriteEffects.FlipHorizontally;
            }
            if (projFrames[projectile[i].type] > 1)
            {
                int height = projectileTexture[projectile[i].type].Height / projFrames[projectile[i].type];
                int num35 = height * projectile[i].frame;
                this.spriteBatch.Draw(projectileTexture[projectile[i].type], new Vector2(((projectile[i].position.X - screenPosition.X) + x) + num32, (projectile[i].position.Y - screenPosition.Y) + (projectile[i].height / 2)), new Rectangle(0, num35, projectileTexture[projectile[i].type].Width, height), projectile[i].GetAlpha(newColor), projectile[i].rotation, new Vector2(x, (float) ((projectile[i].height / 2) + num31)), projectile[i].scale, none, 0f);
            }
            else if (projectile[i].aiStyle == 0x13)
            {
                Vector2 origin = new Vector2(0f, 0f);
                if (projectile[i].spriteDirection == -1)
                {
                    origin.X = projectileTexture[projectile[i].type].Width;
                }
                this.spriteBatch.Draw(projectileTexture[projectile[i].type], new Vector2((projectile[i].position.X - screenPosition.X) + (projectile[i].width / 2), (projectile[i].position.Y - screenPosition.Y) + (projectile[i].height / 2)), new Rectangle(0, 0, projectileTexture[projectile[i].type].Width, projectileTexture[projectile[i].type].Height), projectile[i].GetAlpha(newColor), projectile[i].rotation, origin, projectile[i].scale, none, 0f);
            }
            else
            {
                if ((projectile[i].type == 0x5e) && (projectile[i].ai[1] > 6f))
                {
                    for (int j = 0; j < 10; j++)
                    {
                        Color alpha = projectile[i].GetAlpha(newColor);
                        float num37 = ((float) (9 - j)) / 9f;
                        alpha.R = (byte) (alpha.R * num37);
                        alpha.G = (byte) (alpha.G * num37);
                        alpha.B = (byte) (alpha.B * num37);
                        alpha.A = (byte) (alpha.A * num37);
                        float num38 = ((float) (9 - j)) / 9f;
                        this.spriteBatch.Draw(projectileTexture[projectile[i].type], new Vector2(((projectile[i].oldPos[j].X - screenPosition.X) + x) + num32, (projectile[i].oldPos[j].Y - screenPosition.Y) + (projectile[i].height / 2)), new Rectangle(0, 0, projectileTexture[projectile[i].type].Width, projectileTexture[projectile[i].type].Height), alpha, projectile[i].rotation, new Vector2(x, (float) ((projectile[i].height / 2) + num31)), (float) (num38 * projectile[i].scale), none, 0f);
                    }
                }
                this.spriteBatch.Draw(projectileTexture[projectile[i].type], new Vector2(((projectile[i].position.X - screenPosition.X) + x) + num32, (projectile[i].position.Y - screenPosition.Y) + (projectile[i].height / 2)), new Rectangle(0, 0, projectileTexture[projectile[i].type].Width, projectileTexture[projectile[i].type].Height), projectile[i].GetAlpha(newColor), projectile[i].rotation, new Vector2(x, (float) ((projectile[i].height / 2) + num31)), projectile[i].scale, none, 0f);
                if (projectile[i].type == 0x6a)
                {
                    this.spriteBatch.Draw(lightDiscTexture, new Vector2(((projectile[i].position.X - screenPosition.X) + x) + num32, (projectile[i].position.Y - screenPosition.Y) + (projectile[i].height / 2)), new Rectangle(0, 0, projectileTexture[projectile[i].type].Width, projectileTexture[projectile[i].type].Height), new Color(200, 200, 200, 0), projectile[i].rotation, new Vector2(x, (float) ((projectile[i].height / 2) + num31)), projectile[i].scale, none, 0f);
                }
            }
        }

        protected void DrawSplash(GameTime gameTime)
        {
            base.GraphicsDevice.Clear(Color.Black);
            base.Draw(gameTime);
            this.spriteBatch.Begin();
            this.splashCounter++;
            Color white = Color.White;
            byte num = 0;
            if (this.splashCounter <= 0x4b)
            {
                float num2 = (((float) this.splashCounter) / 75f) * 255f;
                num = (byte) num2;
            }
            else if (this.splashCounter <= 0x7d)
            {
                num = 0xff;
            }
            else if (this.splashCounter <= 200)
            {
                int num3 = 0x7d - this.splashCounter;
                float num4 = (((float) num3) / 75f) * 255f;
                num = (byte) num4;
            }
            else
            {
                showSplash = false;
                fadeCounter = 0x4b;
            }
            white = new Color((int) num, (int) num, (int) num, (int) num);
            this.spriteBatch.Draw(loTexture[lo], new Rectangle(0, 0, screenWidth, screenHeight), white);
            this.spriteBatch.End();
        }

        protected void DrawTiles(bool solidOnly = true)
        {
            Vector2 vector3;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            int num = (int) ((255f * (1f - gfxQuality)) + (30f * gfxQuality));
            int num2 = (int) ((50f * (1f - gfxQuality)) + (2f * gfxQuality));
            Vector2 vector = new Vector2((float) offScreenRange, (float) offScreenRange);
            if (drawToScreen)
            {
                vector = new Vector2();
            }
            int index = 0;
            int[] numArray = new int[0x3e8];
            int[] numArray2 = new int[0x3e8];
            int num4 = (int) (((screenPosition.X - vector.X) / 16f) - 1f);
            int maxTilesX = ((int) (((screenPosition.X + screenWidth) + vector.X) / 16f)) + 2;
            int num6 = (int) (((screenPosition.Y - vector.Y) / 16f) - 1f);
            int maxTilesY = ((int) (((screenPosition.Y + screenHeight) + vector.Y) / 16f)) + 5;
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Main.maxTilesX)
            {
                maxTilesX = Main.maxTilesX;
            }
            if (num6 < 0)
            {
                num6 = 0;
            }
            if (maxTilesY > Main.maxTilesY)
            {
                maxTilesY = Main.maxTilesY;
            }
            int height = 0x10;
            int width = 0x10;
            for (int i = num6; i < (maxTilesY + 4); i++)
            {
                for (int k = num4 - 2; k < (maxTilesX + 2); k++)
                {
                    if (tile[k, i] == null)
                    {
                        tile[k, i] = new Tile();
                    }
                    bool flag = tileSolid[tile[k, i].type];
                    if (tile[k, i].type == 11)
                    {
                        flag = true;
                    }
                    if (tile[k, i].active && (flag == solidOnly))
                    {
                        Color color8;
                        Color color = Lighting.GetColor(k, i);
                        int num12 = 0;
                        if ((tile[k, i].type == 0x4e) || (tile[k, i].type == 0x55))
                        {
                            num12 = 2;
                        }
                        if ((tile[k, i].type == 0x21) || (tile[k, i].type == 0x31))
                        {
                            num12 = -4;
                        }
                        if ((((tile[k, i].type == 3) || (tile[k, i].type == 4)) || ((tile[k, i].type == 5) || (tile[k, i].type == 0x18))) || (((tile[k, i].type == 0x21) || (tile[k, i].type == 0x31)) || (((tile[k, i].type == 0x3d) || (tile[k, i].type == 0x47)) || (tile[k, i].type == 110))))
                        {
                            height = 20;
                        }
                        else if (((((tile[k, i].type == 15) || (tile[k, i].type == 14)) || ((tile[k, i].type == 0x10) || (tile[k, i].type == 0x11))) || (((tile[k, i].type == 0x12) || (tile[k, i].type == 20)) || ((tile[k, i].type == 0x15) || (tile[k, i].type == 0x1a)))) || ((((tile[k, i].type == 0x1b) || (tile[k, i].type == 0x20)) || ((tile[k, i].type == 0x45) || (tile[k, i].type == 0x48))) || ((tile[k, i].type == 0x4d) || (tile[k, i].type == 80))))
                        {
                            height = 0x12;
                        }
                        else if (tile[k, i].type == 0x89)
                        {
                            height = 0x12;
                        }
                        else if (tile[k, i].type == 0x87)
                        {
                            num12 = 2;
                            height = 0x12;
                        }
                        else if (tile[k, i].type == 0x84)
                        {
                            num12 = 2;
                            height = 0x12;
                        }
                        else
                        {
                            height = 0x10;
                        }
                        if ((tile[k, i].type == 4) || (tile[k, i].type == 5))
                        {
                            width = 20;
                        }
                        else
                        {
                            width = 0x10;
                        }
                        if (((tile[k, i].type == 0x49) || (tile[k, i].type == 0x4a)) || (tile[k, i].type == 0x71))
                        {
                            num12 -= 12;
                            height = 0x20;
                        }
                        if (tile[k, i].type == 0x51)
                        {
                            num12 -= 8;
                            height = 0x1a;
                            width = 0x18;
                        }
                        if (tile[k, i].type == 0x69)
                        {
                            num12 = 2;
                        }
                        if (tile[k, i].type == 0x7c)
                        {
                            height = 0x12;
                        }
                        if (tile[k, i].type == 0x89)
                        {
                            height = 0x12;
                        }
                        if (tile[k, i].type == 0x8a)
                        {
                            height = 0x12;
                        }
                        if (((tile[k, i].type == 0x8b) || (tile[k, i].type == 0x8e)) || (tile[k, i].type == 0x8f))
                        {
                            num12 = 2;
                        }
                        if (player[myPlayer].findTreasure && ((((((tile[k, i].type == 6) || (tile[k, i].type == 7)) || ((tile[k, i].type == 8) || (tile[k, i].type == 9))) || (((tile[k, i].type == 12) || (tile[k, i].type == 0x15)) || ((tile[k, i].type == 0x16) || (tile[k, i].type == 0x1c)))) || ((((tile[k, i].type == 0x6b) || (tile[k, i].type == 0x6c)) || (tile[k, i].type == 0x6f)) || ((tile[k, i].type >= 0x3f) && (tile[k, i].type <= 0x44)))) || tileAlch[tile[k, i].type]))
                        {
                            if (color.R < (mouseTextColor / 2))
                            {
                                color.R = (byte) (mouseTextColor / 2);
                            }
                            if (color.G < 70)
                            {
                                color.G = 70;
                            }
                            if (color.B < 210)
                            {
                                color.B = 210;
                            }
                            color.A = mouseTextColor;
                            if ((!gamePaused && base.IsActive) && (rand.Next(150) == 0))
                            {
                                color8 = new Color();
                                int num13 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 15, 0f, 0f, 150, color8, 0.8f);
                                Dust dust1 = dust[num13];
                                dust1.velocity = (Vector2) (dust1.velocity * 0.1f);
                                dust[num13].noLight = true;
                            }
                        }
                        if (!gamePaused && base.IsActive)
                        {
                            if (((tile[k, i].type == 4) && (rand.Next(40) == 0)) && (tile[k, i].frameX < 0x42))
                            {
                                int type = tile[k, i].frameY / 0x16;
                                switch (type)
                                {
                                    case 0:
                                        type = 6;
                                        break;

                                    case 8:
                                        type = 0x4b;
                                        break;

                                    default:
                                        type = 0x3a + type;
                                        break;
                                }
                                if (tile[k, i].frameX == 0x16)
                                {
                                    color8 = new Color();
                                    Dust.NewDust(new Vector2((float) ((k * 0x10) + 6), (float) (i * 0x10)), 4, 4, type, 0f, 0f, 100, color8, 1f);
                                }
                                if (tile[k, i].frameX == 0x2c)
                                {
                                    color8 = new Color();
                                    Dust.NewDust(new Vector2((float) ((k * 0x10) + 2), (float) (i * 0x10)), 4, 4, type, 0f, 0f, 100, color8, 1f);
                                }
                                else
                                {
                                    color8 = new Color();
                                    Dust.NewDust(new Vector2((float) ((k * 0x10) + 4), (float) (i * 0x10)), 4, 4, type, 0f, 0f, 100, color8, 1f);
                                }
                            }
                            if (((tile[k, i].type == 0x21) && (rand.Next(40) == 0)) && (tile[k, i].frameX == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) ((k * 0x10) + 4), (float) ((i * 0x10) - 4)), 4, 4, 6, 0f, 0f, 100, color8, 1f);
                            }
                            if (((tile[k, i].type == 0x5d) && (rand.Next(40) == 0)) && ((tile[k, i].frameX == 0) && (tile[k, i].frameY == 0)))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) ((k * 0x10) + 4), (float) ((i * 0x10) + 2)), 4, 4, 6, 0f, 0f, 100, color8, 1f);
                            }
                            if (((tile[k, i].type == 100) && (rand.Next(40) == 0)) && ((tile[k, i].frameX < 0x24) && (tile[k, i].frameY == 0)))
                            {
                                if (tile[k, i].frameX == 0)
                                {
                                    if (rand.Next(3) == 0)
                                    {
                                        color8 = new Color();
                                        Dust.NewDust(new Vector2((float) ((k * 0x10) + 4), (float) ((i * 0x10) + 2)), 4, 4, 6, 0f, 0f, 100, color8, 1f);
                                    }
                                    else
                                    {
                                        color8 = new Color();
                                        Dust.NewDust(new Vector2((float) ((k * 0x10) + 14), (float) ((i * 0x10) + 2)), 4, 4, 6, 0f, 0f, 100, color8, 1f);
                                    }
                                }
                                else if (rand.Next(3) == 0)
                                {
                                    color8 = new Color();
                                    Dust.NewDust(new Vector2((float) ((k * 0x10) + 6), (float) ((i * 0x10) + 2)), 4, 4, 6, 0f, 0f, 100, color8, 1f);
                                }
                                else
                                {
                                    color8 = new Color();
                                    Dust.NewDust(new Vector2((float) (k * 0x10), (float) ((i * 0x10) + 2)), 4, 4, 6, 0f, 0f, 100, color8, 1f);
                                }
                            }
                            if (((tile[k, i].type == 0x62) && (rand.Next(40) == 0)) && ((tile[k, i].frameY == 0) && (tile[k, i].frameX == 0)))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) ((k * 0x10) + 12), (float) ((i * 0x10) + 2)), 4, 4, 6, 0f, 0f, 100, color8, 1f);
                            }
                            if ((tile[k, i].type == 0x31) && (rand.Next(20) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) ((k * 0x10) + 4), (float) ((i * 0x10) - 4)), 4, 4, 0x1d, 0f, 0f, 100, color8, 1f);
                            }
                            if ((((tile[k, i].type == 0x22) || (tile[k, i].type == 0x23)) || (tile[k, i].type == 0x24)) && ((((rand.Next(40) == 0) && (tile[k, i].frameX < 0x36)) && (tile[k, i].frameY == 0x12)) && ((tile[k, i].frameX == 0) || (tile[k, i].frameX == 0x24))))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) ((i * 0x10) + 2)), 14, 6, 6, 0f, 0f, 100, color8, 1f);
                            }
                            if ((tile[k, i].type == 0x16) && (rand.Next(400) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 14, 0f, 0f, 0, color8, 1f);
                            }
                            else if ((((tile[k, i].type == 0x17) || (tile[k, i].type == 0x18)) || (tile[k, i].type == 0x20)) && (rand.Next(500) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 14, 0f, 0f, 0, color8, 1f);
                            }
                            else if ((tile[k, i].type == 0x19) && (rand.Next(700) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 14, 0f, 0f, 0, color8, 1f);
                            }
                            else if ((tile[k, i].type == 0x70) && (rand.Next(700) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 14, 0f, 0f, 0, color8, 1f);
                            }
                            else if ((tile[k, i].type == 0x1f) && (rand.Next(20) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 14, 0f, 0f, 100, color8, 1f);
                            }
                            else if ((tile[k, i].type == 0x1a) && (rand.Next(20) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 14, 0f, 0f, 100, color8, 1f);
                            }
                            else if (((tile[k, i].type == 0x47) || (tile[k, i].type == 0x48)) && (rand.Next(500) == 0))
                            {
                                color8 = new Color();
                                Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 0x29, 0f, 0f, 250, color8, 0.8f);
                            }
                            else if ((((tile[k, i].type == 0x11) || (tile[k, i].type == 0x4d)) || (tile[k, i].type == 0x85)) && (rand.Next(40) == 0))
                            {
                                if ((tile[k, i].frameX == 0x12) & (tile[k, i].frameY == 0x12))
                                {
                                    color8 = new Color();
                                    Dust.NewDust(new Vector2((float) ((k * 0x10) + 2), (float) (i * 0x10)), 8, 6, 6, 0f, 0f, 100, color8, 1f);
                                }
                            }
                            else if ((tile[k, i].type == 0x25) && (rand.Next(250) == 0))
                            {
                                color8 = new Color();
                                int num15 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 6, 0f, 0f, 0, color8, (float) rand.Next(3));
                                if (dust[num15].scale > 1f)
                                {
                                    dust[num15].noGravity = true;
                                }
                            }
                            else if (((tile[k, i].type == 0x3a) || (tile[k, i].type == 0x4c)) && (rand.Next(250) == 0))
                            {
                                color8 = new Color();
                                int num16 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 6, 0f, 0f, 0, color8, (float) rand.Next(3));
                                if (dust[num16].scale > 1f)
                                {
                                    dust[num16].noGravity = true;
                                }
                                dust[num16].noLight = true;
                            }
                            else if (tile[k, i].type == 0x3d)
                            {
                                if (tile[k, i].frameX == 0x90)
                                {
                                    if (rand.Next(60) == 0)
                                    {
                                        color8 = new Color();
                                        int num17 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 0x2c, 0f, 0f, 250, color8, 0.4f);
                                        dust[num17].fadeIn = 0.7f;
                                    }
                                    color.A = (byte) (245f - (mouseTextColor * 1.5f));
                                    color.R = (byte) (245f - (mouseTextColor * 1.5f));
                                    color.B = (byte) (245f - (mouseTextColor * 1.5f));
                                    color.G = (byte) (245f - (mouseTextColor * 1.5f));
                                }
                            }
                            else if ((tileShine[tile[k, i].type] > 0) && (((color.R > 20) || (color.B > 20)) || (color.G > 20)))
                            {
                                int r = color.R;
                                if (color.G > r)
                                {
                                    r = color.G;
                                }
                                if (color.B > r)
                                {
                                    r = color.B;
                                }
                                r /= 30;
                                if ((rand.Next(tileShine[tile[k, i].type]) < r) && ((tile[k, i].type != 0x15) || ((tile[k, i].frameX >= 0x24) && (tile[k, i].frameX < 180))))
                                {
                                    color8 = new Color();
                                    int num19 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 0x2b, 0f, 0f, 0xfe, color8, 0.5f);
                                    Dust dust2 = dust[num19];
                                    dust2.velocity = (Vector2) (dust2.velocity * 0f);
                                }
                            }
                        }
                        if ((tile[k, i].type == 0x80) && (tile[k, i].frameX >= 100))
                        {
                            numArray[index] = k;
                            numArray2[index] = i;
                            index++;
                        }
                        if (((tile[k, i].type == 5) && (tile[k, i].frameY >= 0xc6)) && (tile[k, i].frameX >= 0x16))
                        {
                            numArray[index] = k;
                            numArray2[index] = i;
                            index++;
                        }
                        if ((tile[k, i].type == 0x48) && (tile[k, i].frameX >= 0x24))
                        {
                            int num20 = 0;
                            if (tile[k, i].frameY == 0x12)
                            {
                                num20 = 1;
                            }
                            else if (tile[k, i].frameY == 0x24)
                            {
                                num20 = 2;
                            }
                            vector3 = new Vector2();
                            this.spriteBatch.Draw(shroomCapTexture, new Vector2((float) (((k * 0x10) - ((int) screenPosition.X)) - 0x16), (float) (((i * 0x10) - ((int) screenPosition.Y)) - 0x1a)) + vector, new Rectangle(num20 * 0x3e, 0, 60, 0x2a), Lighting.GetColor(k, i), 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                        }
                        if (((color.R > 1) || (color.G > 1)) || (color.B > 1))
                        {
                            if (tile[k - 1, i] == null)
                            {
                                tile[k - 1, i] = new Tile();
                            }
                            if (tile[k + 1, i] == null)
                            {
                                tile[k + 1, i] = new Tile();
                            }
                            if (tile[k, i - 1] == null)
                            {
                                tile[k, i - 1] = new Tile();
                            }
                            if (tile[k, i + 1] == null)
                            {
                                tile[k, i + 1] = new Tile();
                            }
                            if (((solidOnly && flag) && !tileSolidTop[tile[k, i].type]) && (((tile[k - 1, i].liquid > 0) || (tile[k + 1, i].liquid > 0)) || ((tile[k, i - 1].liquid > 0) || (tile[k, i + 1].liquid > 0))))
                            {
                                Color color2 = Lighting.GetColor(k, i);
                                int liquid = 0;
                                bool flag2 = false;
                                bool flag3 = false;
                                bool flag4 = false;
                                bool flag5 = false;
                                int num22 = 0;
                                bool flag6 = false;
                                if (tile[k - 1, i].liquid > liquid)
                                {
                                    liquid = tile[k - 1, i].liquid;
                                    flag2 = true;
                                }
                                else if (tile[k - 1, i].liquid > 0)
                                {
                                    flag2 = true;
                                }
                                if (tile[k + 1, i].liquid > liquid)
                                {
                                    liquid = tile[k + 1, i].liquid;
                                    flag3 = true;
                                }
                                else if (tile[k + 1, i].liquid > 0)
                                {
                                    liquid = tile[k + 1, i].liquid;
                                    flag3 = true;
                                }
                                if (tile[k, i - 1].liquid > 0)
                                {
                                    flag4 = true;
                                }
                                if (tile[k, i + 1].liquid > 240)
                                {
                                    flag5 = true;
                                }
                                if (tile[k - 1, i].liquid > 0)
                                {
                                    if (tile[k - 1, i].lava)
                                    {
                                        num22 = 1;
                                    }
                                    else
                                    {
                                        flag6 = true;
                                    }
                                }
                                if (tile[k + 1, i].liquid > 0)
                                {
                                    if (tile[k + 1, i].lava)
                                    {
                                        num22 = 1;
                                    }
                                    else
                                    {
                                        flag6 = true;
                                    }
                                }
                                if (tile[k, i - 1].liquid > 0)
                                {
                                    if (tile[k, i - 1].lava)
                                    {
                                        num22 = 1;
                                    }
                                    else
                                    {
                                        flag6 = true;
                                    }
                                }
                                if (tile[k, i + 1].liquid > 0)
                                {
                                    if (tile[k, i + 1].lava)
                                    {
                                        num22 = 1;
                                    }
                                    else
                                    {
                                        flag6 = true;
                                    }
                                }
                                if (!flag6 || (num22 != 1))
                                {
                                    float num23 = 0f;
                                    Vector2 vector2 = new Vector2((float) (k * 0x10), (float) (i * 0x10));
                                    Rectangle rectangle = new Rectangle(0, 4, 0x10, 0x10);
                                    if (flag5 && (flag2 || flag3))
                                    {
                                        flag2 = true;
                                        flag3 = true;
                                    }
                                    if ((!flag4 || (!flag2 && !flag3)) && (!flag5 || !flag4))
                                    {
                                        if (flag4)
                                        {
                                            rectangle = new Rectangle(0, 4, 0x10, 4);
                                        }
                                        else if ((flag5 && !flag2) && !flag3)
                                        {
                                            vector2 = new Vector2((float) (k * 0x10), (float) ((i * 0x10) + 12));
                                            rectangle = new Rectangle(0, 4, 0x10, 4);
                                        }
                                        else
                                        {
                                            num23 = 0x100 - liquid;
                                            num23 /= 32f;
                                            if (flag2 && flag3)
                                            {
                                                vector2 = new Vector2((float) (k * 0x10), (float) ((i * 0x10) + (((int) num23) * 2)));
                                                rectangle = new Rectangle(0, 4, 0x10, 0x10 - (((int) num23) * 2));
                                            }
                                            else if (flag2)
                                            {
                                                vector2 = new Vector2((float) (k * 0x10), (float) ((i * 0x10) + (((int) num23) * 2)));
                                                rectangle = new Rectangle(0, 4, 4, 0x10 - (((int) num23) * 2));
                                            }
                                            else
                                            {
                                                vector2 = new Vector2((float) ((k * 0x10) + 12), (float) ((i * 0x10) + (((int) num23) * 2)));
                                                rectangle = new Rectangle(0, 4, 4, 0x10 - (((int) num23) * 2));
                                            }
                                        }
                                    }
                                    float num24 = 0.5f;
                                    if (num22 == 1)
                                    {
                                        num24 *= 1.6f;
                                    }
                                    if ((i < worldSurface) || (num24 > 1f))
                                    {
                                        num24 = 1f;
                                    }
                                    float num25 = color2.R * num24;
                                    float num26 = color2.G * num24;
                                    float num27 = color2.B * num24;
                                    float num28 = color2.A * num24;
                                    color2 = new Color((int) ((byte) num25), (int) ((byte) num26), (int) ((byte) num27), (int) ((byte) num28));
                                    vector3 = new Vector2();
                                    this.spriteBatch.Draw(liquidTexture[num22], (vector2 - screenPosition) + vector, new Rectangle?(rectangle), color2, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                            if (tile[k, i].type == 0x33)
                            {
                                Color color3 = Lighting.GetColor(k, i);
                                float num29 = 0.5f;
                                float num30 = color3.R * num29;
                                float num31 = color3.G * num29;
                                float num32 = color3.B * num29;
                                float num33 = color3.A * num29;
                                color3 = new Color((int) ((byte) num30), (int) ((byte) num31), (int) ((byte) num32), (int) ((byte) num33));
                                vector3 = new Vector2();
                                this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), color3, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                continue;
                            }
                            if (tile[k, i].type == 0x81)
                            {
                                vector3 = new Vector2();
                                this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), new Color(200, 200, 200, 0), 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                continue;
                            }
                            if (tileAlch[tile[k, i].type])
                            {
                                height = 20;
                                num12 = -1;
                                int num34 = tile[k, i].type;
                                int num35 = tile[k, i].frameX / 0x12;
                                if (num34 > 0x52)
                                {
                                    if ((num35 == 0) && dayTime)
                                    {
                                        num34 = 0x54;
                                    }
                                    if ((num35 == 1) && !dayTime)
                                    {
                                        num34 = 0x54;
                                    }
                                    if ((num35 == 3) && bloodMoon)
                                    {
                                        num34 = 0x54;
                                    }
                                }
                                if (num34 == 0x54)
                                {
                                    if ((num35 == 0) && (rand.Next(100) == 0))
                                    {
                                        color8 = new Color();
                                        int num36 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) ((i * 0x10) - 4)), 0x10, 0x10, 0x13, 0f, 0f, 160, color8, 0.1f);
                                        dust[num36].velocity.X /= 2f;
                                        dust[num36].velocity.Y /= 2f;
                                        dust[num36].noGravity = true;
                                        dust[num36].fadeIn = 1f;
                                    }
                                    if ((num35 == 1) && (rand.Next(100) == 0))
                                    {
                                        color8 = new Color();
                                        Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 0x29, 0f, 0f, 250, color8, 0.8f);
                                    }
                                    if (num35 == 3)
                                    {
                                        if (rand.Next(200) == 0)
                                        {
                                            color8 = new Color();
                                            int num37 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 14, 0f, 0f, 100, color8, 0.2f);
                                            dust[num37].fadeIn = 1.2f;
                                        }
                                        if (rand.Next(0x4b) == 0)
                                        {
                                            color8 = new Color();
                                            int num38 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 0x10, 0x1b, 0f, 0f, 100, color8, 1f);
                                            dust[num38].velocity.X /= 2f;
                                            dust[num38].velocity.Y /= 2f;
                                        }
                                    }
                                    if ((num35 == 4) && (rand.Next(150) == 0))
                                    {
                                        color8 = new Color();
                                        int num39 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) (i * 0x10)), 0x10, 8, 0x10, 0f, 0f, 0, color8, 1f);
                                        dust[num39].velocity.X /= 3f;
                                        dust[num39].velocity.Y /= 3f;
                                        dust[num39].velocity.Y -= 0.7f;
                                        dust[num39].alpha = 50;
                                        Dust dust3 = dust[num39];
                                        dust3.scale *= 0.1f;
                                        dust[num39].fadeIn = 0.9f;
                                        dust[num39].noGravity = true;
                                    }
                                    if (num35 == 5)
                                    {
                                        if (rand.Next(40) == 0)
                                        {
                                            color8 = new Color();
                                            int num40 = Dust.NewDust(new Vector2((float) (k * 0x10), (float) ((i * 0x10) - 6)), 0x10, 0x10, 6, 0f, 0f, 0, color8, 1.5f);
                                            dust[num40].velocity.Y -= 2f;
                                            dust[num40].noGravity = true;
                                        }
                                        color.A = (byte) (mouseTextColor / 2);
                                        color.G = mouseTextColor;
                                        color.B = mouseTextColor;
                                    }
                                }
                                vector3 = new Vector2();
                                this.spriteBatch.Draw(tileTexture[num34], new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                continue;
                            }
                            if (tile[k, i].type == 80)
                            {
                                bool flag7 = false;
                                bool flag8 = false;
                                int num41 = k;
                                if (tile[k, i].frameX == 0x24)
                                {
                                    num41--;
                                }
                                if (tile[k, i].frameX == 0x36)
                                {
                                    num41++;
                                }
                                if (tile[k, i].frameX == 0x6c)
                                {
                                    if (tile[k, i].frameY == 0x10)
                                    {
                                        num41--;
                                    }
                                    else
                                    {
                                        num41++;
                                    }
                                }
                                int num42 = i;
                                bool flag9 = false;
                                if ((tile[num41, num42].type == 80) && tile[num41, num42].active)
                                {
                                    flag9 = true;
                                }
                                while ((!tile[num41, num42].active || !tileSolid[tile[num41, num42].type]) || !flag9)
                                {
                                    if ((tile[num41, num42].type == 80) && tile[num41, num42].active)
                                    {
                                        flag9 = true;
                                    }
                                    num42++;
                                    if (num42 > (i + 20))
                                    {
                                        break;
                                    }
                                }
                                if (tile[num41, num42].type == 0x70)
                                {
                                    flag7 = true;
                                }
                                if (tile[num41, num42].type == 0x74)
                                {
                                    flag8 = true;
                                }
                                if (flag7)
                                {
                                    vector3 = new Vector2();
                                    this.spriteBatch.Draw(evilCactusTexture, new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                }
                                else if (flag8)
                                {
                                    vector3 = new Vector2();
                                    this.spriteBatch.Draw(goodCactusTexture, new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                }
                                else
                                {
                                    vector3 = new Vector2();
                                    this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                }
                                continue;
                            }
                            if (((Lighting.lightMode < 2) && tileSolid[tile[k, i].type]) && (tile[k, i].type != 0x89))
                            {
                                if (((color.R > num) || (color.G > (num * 1.1))) || (color.B > (num * 1.2)))
                                {
                                    for (int m = 0; m < 9; m++)
                                    {
                                        int num44 = 0;
                                        int num45 = 0;
                                        int num46 = 4;
                                        int num47 = 4;
                                        Color newColor = color;
                                        Color color5 = color;
                                        switch (m)
                                        {
                                            case 0:
                                                color5 = Lighting.GetColor(k - 1, i - 1);
                                                break;

                                            case 1:
                                                num46 = 8;
                                                num44 = 4;
                                                color5 = Lighting.GetColor(k, i - 1);
                                                break;

                                            case 2:
                                                color5 = Lighting.GetColor(k + 1, i - 1);
                                                num44 = 12;
                                                break;

                                            case 3:
                                                color5 = Lighting.GetColor(k - 1, i);
                                                num47 = 8;
                                                num45 = 4;
                                                break;

                                            case 4:
                                                num46 = 8;
                                                num47 = 8;
                                                num44 = 4;
                                                num45 = 4;
                                                break;

                                            case 5:
                                                num44 = 12;
                                                num45 = 4;
                                                num47 = 8;
                                                color5 = Lighting.GetColor(k + 1, i);
                                                break;

                                            case 6:
                                                color5 = Lighting.GetColor(k - 1, i + 1);
                                                num45 = 12;
                                                break;

                                            case 7:
                                                num46 = 8;
                                                num47 = 4;
                                                num44 = 4;
                                                num45 = 12;
                                                color5 = Lighting.GetColor(k, i + 1);
                                                break;

                                            case 8:
                                                color5 = Lighting.GetColor(k + 1, i + 1);
                                                num44 = 12;
                                                num45 = 12;
                                                break;
                                        }
                                        newColor.R = (byte) ((color.R + color5.R) / 2);
                                        newColor.G = (byte) ((color.G + color5.G) / 2);
                                        newColor.B = (byte) ((color.B + color5.B) / 2);
                                        if (tileShine2[tile[k, i].type])
                                        {
                                            newColor = shine(newColor, tile[k, i].type);
                                        }
                                        vector3 = new Vector2();
                                        this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2((((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f)) + num44, (float) ((((i * 0x10) - ((int) screenPosition.Y)) + num12) + num45)) + vector, new Rectangle(tile[k, i].frameX + num44, tile[k, i].frameY + num45, num46, num47), newColor, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                    }
                                }
                                else if (((color.R > num2) || (color.G > (num2 * 1.1))) || (color.B > (num2 * 1.2)))
                                {
                                    for (int n = 0; n < 4; n++)
                                    {
                                        int num49 = 0;
                                        int num50 = 0;
                                        Color color6 = color;
                                        Color color7 = color;
                                        switch (n)
                                        {
                                            case 0:
                                                if (Lighting.Brighter(k, i - 1, k - 1, i))
                                                {
                                                    color7 = Lighting.GetColor(k - 1, i);
                                                }
                                                else
                                                {
                                                    color7 = Lighting.GetColor(k, i - 1);
                                                }
                                                break;

                                            case 1:
                                                if (Lighting.Brighter(k, i - 1, k + 1, i))
                                                {
                                                    color7 = Lighting.GetColor(k + 1, i);
                                                }
                                                else
                                                {
                                                    color7 = Lighting.GetColor(k, i - 1);
                                                }
                                                num49 = 8;
                                                break;

                                            case 2:
                                                if (Lighting.Brighter(k, i + 1, k - 1, i))
                                                {
                                                    color7 = Lighting.GetColor(k - 1, i);
                                                }
                                                else
                                                {
                                                    color7 = Lighting.GetColor(k, i + 1);
                                                }
                                                num50 = 8;
                                                break;

                                            case 3:
                                                if (Lighting.Brighter(k, i + 1, k + 1, i))
                                                {
                                                    color7 = Lighting.GetColor(k + 1, i);
                                                }
                                                else
                                                {
                                                    color7 = Lighting.GetColor(k, i + 1);
                                                }
                                                num49 = 8;
                                                num50 = 8;
                                                break;
                                        }
                                        color6.R = (byte) ((color.R + color7.R) / 2);
                                        color6.G = (byte) ((color.G + color7.G) / 2);
                                        color6.B = (byte) ((color.B + color7.B) / 2);
                                        if (tileShine2[tile[k, i].type])
                                        {
                                            color6 = shine(color6, tile[k, i].type);
                                        }
                                        vector3 = new Vector2();
                                        this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2((((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f)) + num49, (float) ((((i * 0x10) - ((int) screenPosition.Y)) + num12) + num50)) + vector, new Rectangle(tile[k, i].frameX + num49, tile[k, i].frameY + num50, 8, 8), color6, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                    }
                                }
                                else
                                {
                                    if (tileShine2[tile[k, i].type])
                                    {
                                        color = shine(color, tile[k, i].type);
                                    }
                                    vector3 = new Vector2();
                                    this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                            else
                            {
                                if ((Lighting.lightMode < 2) && tileShine2[tile[k, i].type])
                                {
                                    if (tile[k, i].type == 0x15)
                                    {
                                        if ((tile[k, i].frameX >= 0x24) && (tile[k, i].frameX < 0xb2))
                                        {
                                            color = shine(color, tile[k, i].type);
                                        }
                                    }
                                    else
                                    {
                                        color = shine(color, tile[k, i].type);
                                    }
                                }
                                if (tile[k, i].type == 0x80)
                                {
                                    int frameX = tile[k, i].frameX;
                                    while (frameX >= 100)
                                    {
                                        frameX -= 100;
                                    }
                                    vector3 = new Vector2();
                                    this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(frameX, tile[k, i].frameY, width, height), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                }
                                else
                                {
                                    vector3 = new Vector2();
                                    this.spriteBatch.Draw(tileTexture[tile[k, i].type], new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                    if (tile[k, i].type == 0x8b)
                                    {
                                        vector3 = new Vector2();
                                        this.spriteBatch.Draw(MusicBoxTexture, new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), new Color(200, 200, 200, 0), 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                    }
                                    if (tile[k, i].type == 0x90)
                                    {
                                        vector3 = new Vector2();
                                        this.spriteBatch.Draw(timerTexture, new Vector2(((k * 0x10) - ((int) screenPosition.X)) - ((width - 16f) / 2f), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num12)) + vector, new Rectangle(tile[k, i].frameX, tile[k, i].frameY, width, height), new Color(200, 200, 200, 0), 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (int j = 0; j < index; j++)
            {
                int x = numArray[j];
                int y = numArray2[j];
                if ((tile[x, y].type == 0x80) && (tile[x, y].frameX >= 100))
                {
                    int num55 = tile[x, y].frameY / 0x12;
                    int num56 = tile[x, y].frameX;
                    int num57 = 0;
                    while (num56 >= 100)
                    {
                        num57++;
                        num56 -= 100;
                    }
                    int num58 = -4;
                    SpriteEffects flipHorizontally = SpriteEffects.FlipHorizontally;
                    if (num56 >= 0x24)
                    {
                        flipHorizontally = SpriteEffects.None;
                        num58 = -4;
                    }
                    switch (num55)
                    {
                        case 0:
                            vector3 = new Vector2();
                            this.spriteBatch.Draw(armorHeadTexture[num57], new Vector2((float) (((x * 0x10) - ((int) screenPosition.X)) + num58), (float) (((y * 0x10) - ((int) screenPosition.Y)) - 12)) + vector, new Rectangle(0, 0, 40, 0x24), Lighting.GetColor(x, y), 0f, vector3, (float) 1f, flipHorizontally, 0f);
                            break;

                        case 1:
                            vector3 = new Vector2();
                            this.spriteBatch.Draw(armorBodyTexture[num57], new Vector2((float) (((x * 0x10) - ((int) screenPosition.X)) + num58), (float) (((y * 0x10) - ((int) screenPosition.Y)) - 0x1c)) + vector, new Rectangle(0, 0, 40, 0x36), Lighting.GetColor(x, y), 0f, vector3, (float) 1f, flipHorizontally, 0f);
                            break;

                        case 2:
                            vector3 = new Vector2();
                            this.spriteBatch.Draw(armorLegTexture[num57], new Vector2((float) (((x * 0x10) - ((int) screenPosition.X)) + num58), (float) (((y * 0x10) - ((int) screenPosition.Y)) - 0x2c)) + vector, new Rectangle(0, 0, 40, 0x36), Lighting.GetColor(x, y), 0f, vector3, (float) 1f, flipHorizontally, 0f);
                            break;
                    }
                }
                if (((tile[x, y].type == 5) && (tile[x, y].frameY >= 0xc6)) && (tile[x, y].frameX >= 0x16))
                {
                    int num59 = 0;
                    if (tile[x, y].frameX == 0x16)
                    {
                        if (tile[x, y].frameY == 220)
                        {
                            num59 = 1;
                        }
                        else if (tile[x, y].frameY == 0xf2)
                        {
                            num59 = 2;
                        }
                        int num60 = 0;
                        int num61 = 80;
                        int num62 = 80;
                        int num63 = 0x20;
                        int num64 = 0;
                        for (int num65 = y; num65 < (y + 100); num65++)
                        {
                            if (tile[x, num65].type == 2)
                            {
                                num60 = 0;
                                break;
                            }
                            if (tile[x, num65].type == 0x17)
                            {
                                num60 = 1;
                                break;
                            }
                            if (tile[x, num65].type == 60)
                            {
                                num60 = 2;
                                num61 = 0x72;
                                num62 = 0x60;
                                num63 = 0x30;
                                break;
                            }
                            if (tile[x, num65].type == 0x6d)
                            {
                                num60 = 3;
                                num62 = 140;
                                if ((x % 3) == 1)
                                {
                                    num59 += 3;
                                }
                                else if ((x % 3) == 2)
                                {
                                    num59 += 6;
                                }
                                break;
                            }
                        }
                        vector3 = new Vector2();
                        this.spriteBatch.Draw(treeTopTexture[num60], new Vector2((float) (((x * 0x10) - ((int) screenPosition.X)) - num63), (float) (((((y * 0x10) - ((int) screenPosition.Y)) - num62) + 0x10) + num64)) + vector, new Rectangle(num59 * (num61 + 2), 0, num61, num62), Lighting.GetColor(x, y), 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                        continue;
                    }
                    if (tile[x, y].frameX == 0x2c)
                    {
                        if (tile[x, y].frameY == 220)
                        {
                            num59 = 1;
                        }
                        else if (tile[x, y].frameY == 0xf2)
                        {
                            num59 = 2;
                        }
                        int num66 = 0;
                        for (int num67 = y; num67 < (y + 100); num67++)
                        {
                            if (tile[x + 1, num67].type == 2)
                            {
                                num66 = 0;
                                break;
                            }
                            if (tile[x + 1, num67].type == 0x17)
                            {
                                num66 = 1;
                                break;
                            }
                            if (tile[x + 1, num67].type == 60)
                            {
                                num66 = 2;
                                break;
                            }
                            if (tile[x + 1, num67].type == 0x6d)
                            {
                                num66 = 3;
                                if ((x % 3) == 1)
                                {
                                    num59 += 3;
                                }
                                else if ((x % 3) == 2)
                                {
                                    num59 += 6;
                                }
                                break;
                            }
                        }
                        vector3 = new Vector2();
                        this.spriteBatch.Draw(treeBranchTexture[num66], new Vector2((float) (((x * 0x10) - ((int) screenPosition.X)) - 0x18), (float) (((y * 0x10) - ((int) screenPosition.Y)) - 12)) + vector, new Rectangle(0, num59 * 0x2a, 40, 40), Lighting.GetColor(x, y), 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                        continue;
                    }
                    if (tile[x, y].frameX == 0x42)
                    {
                        if (tile[x, y].frameY == 220)
                        {
                            num59 = 1;
                        }
                        else if (tile[x, y].frameY == 0xf2)
                        {
                            num59 = 2;
                        }
                        int num68 = 0;
                        for (int num69 = y; num69 < (y + 100); num69++)
                        {
                            if (tile[x - 1, num69].type == 2)
                            {
                                num68 = 0;
                                break;
                            }
                            if (tile[x - 1, num69].type == 0x17)
                            {
                                num68 = 1;
                                break;
                            }
                            if (tile[x - 1, num69].type == 60)
                            {
                                num68 = 2;
                                break;
                            }
                            if (tile[x - 1, num69].type == 0x6d)
                            {
                                num68 = 3;
                                if ((x % 3) == 1)
                                {
                                    num59 += 3;
                                }
                                else if ((x % 3) == 2)
                                {
                                    num59 += 6;
                                }
                                break;
                            }
                        }
                        vector3 = new Vector2();
                        this.spriteBatch.Draw(treeBranchTexture[num68], new Vector2((float) ((x * 0x10) - ((int) screenPosition.X)), (float) (((y * 0x10) - ((int) screenPosition.Y)) - 12)) + vector, new Rectangle(0x2a, num59 * 0x2a, 40, 40), Lighting.GetColor(x, y), 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            if (solidOnly)
            {
                renderTimer[0] = stopwatch.ElapsedMilliseconds;
            }
            else
            {
                renderTimer[1] = stopwatch.ElapsedMilliseconds;
            }
        }

        protected void DrawWalls()
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            int num = (int) ((255f * (1f - gfxQuality)) + (100f * gfxQuality));
            int num2 = (int) ((120f * (1f - gfxQuality)) + (40f * gfxQuality));
            Vector2 vector = new Vector2((float) offScreenRange, (float) offScreenRange);
            if (drawToScreen)
            {
                vector = new Vector2();
            }
            int num3 = ((tileColor.R + tileColor.G) + tileColor.B) / 3;
            float num4 = ((float) (num3 * 0.53)) / 255f;
            if (Lighting.lightMode >= 2)
            {
                num4 = ((float) (tileColor.R - 12)) / 255f;
            }
            int num5 = (int) (((screenPosition.X - vector.X) / 16f) - 1f);
            int num6 = ((int) (((screenPosition.X + screenWidth) + vector.X) / 16f)) + 2;
            int num7 = (int) (((screenPosition.Y - vector.Y) / 16f) - 1f);
            int num8 = ((int) (((screenPosition.Y + screenHeight) + vector.Y) / 16f)) + 5;
            int num9 = offScreenRange / 0x10;
            int num10 = offScreenRange / 0x10;
            if ((num5 - num9) < 0)
            {
                num5 = num9;
            }
            if ((num6 + num9) > maxTilesX)
            {
                num6 = maxTilesX - num9;
            }
            if ((num7 - num10) < 0)
            {
                num7 = num10;
            }
            if ((num8 + num10) > maxTilesY)
            {
                num8 = maxTilesY - num10;
            }
            for (int i = num7 - num10; i < (num8 + num10); i++)
            {
                if (i <= worldSurface)
                {
                    for (int k = num5 - num9; k < (num6 + num9); k++)
                    {
                        if (tile[k, i] == null)
                        {
                            tile[k, i] = new Tile();
                        }
                        if ((Lighting.Brightness(k, i) < num4) && (((tile[k, i].liquid < 250) || WorldGen.SolidTile(k, i)) || ((tile[k, i].liquid > 250) && (Lighting.Brightness(k, i) == 0f))))
                        {
                            this.spriteBatch.Draw(blackTileTexture, new Vector2((float) ((k * 0x10) - ((int) screenPosition.X)), (float) ((i * 0x10) - ((int) screenPosition.Y))) + vector, Lighting.GetBlackness(k, i));
                        }
                    }
                }
            }
            for (int j = num7 - num10; j < (num8 + num10); j++)
            {
                for (int m = num5 - num9; m < (num6 + num9); m++)
                {
                    if (tile[m, j] == null)
                    {
                        tile[m, j] = new Tile();
                    }
                    if (((tile[m, j].wall > 0) && (Lighting.Brightness(m, j) > 0f)) && !this.FullTile(m, j))
                    {
                        Rectangle rectangle;
                        Color color = Lighting.GetColor(m, j);
                        if (((Lighting.lightMode < 2) && (tile[m, j].wall != 0x15)) && !WorldGen.SolidTile(m, j))
                        {
                            if (((color.R > num) || (color.G > (num * 1.1))) || (color.B > (num * 1.2)))
                            {
                                for (int n = 0; n < 9; n++)
                                {
                                    int num16 = 0;
                                    int num17 = 0;
                                    int width = 12;
                                    int height = 12;
                                    Color color2 = color;
                                    Color color3 = color;
                                    switch (n)
                                    {
                                        case 0:
                                            color3 = Lighting.GetColor(m - 1, j - 1);
                                            break;

                                        case 1:
                                            width = 8;
                                            num16 = 12;
                                            color3 = Lighting.GetColor(m, j - 1);
                                            break;

                                        case 2:
                                            color3 = Lighting.GetColor(m + 1, j - 1);
                                            num16 = 20;
                                            break;

                                        case 3:
                                            color3 = Lighting.GetColor(m - 1, j);
                                            height = 8;
                                            num17 = 12;
                                            break;

                                        case 4:
                                            width = 8;
                                            height = 8;
                                            num16 = 12;
                                            num17 = 12;
                                            break;

                                        case 5:
                                            num16 = 20;
                                            num17 = 12;
                                            height = 8;
                                            color3 = Lighting.GetColor(m + 1, j);
                                            break;

                                        case 6:
                                            color3 = Lighting.GetColor(m - 1, j + 1);
                                            num17 = 20;
                                            break;

                                        case 7:
                                            width = 12;
                                            num16 = 12;
                                            num17 = 20;
                                            color3 = Lighting.GetColor(m, j + 1);
                                            break;

                                        case 8:
                                            color3 = Lighting.GetColor(m + 1, j + 1);
                                            num16 = 20;
                                            num17 = 20;
                                            break;
                                    }
                                    color2.R = (byte) ((color.R + color3.R) / 2);
                                    color2.G = (byte) ((color.G + color3.G) / 2);
                                    color2.B = (byte) ((color.B + color3.B) / 2);
                                    Vector2 origin = new Vector2();
                                    this.spriteBatch.Draw(wallTexture[tile[m, j].wall], new Vector2((float) ((((m * 0x10) - ((int) screenPosition.X)) - 8) + num16), (float) ((((j * 0x10) - ((int) screenPosition.Y)) - 8) + num17)) + vector, new Rectangle((tile[m, j].wallFrameX * 2) + num16, (tile[m, j].wallFrameY * 2) + num17, width, height), color2, 0f, origin, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                            else if (((color.R > num2) || (color.G > (num2 * 1.1))) || (color.B > (num2 * 1.2)))
                            {
                                for (int num20 = 0; num20 < 4; num20++)
                                {
                                    int num21 = 0;
                                    int num22 = 0;
                                    Color color4 = color;
                                    Color color5 = color;
                                    switch (num20)
                                    {
                                        case 0:
                                            if (Lighting.Brighter(m, j - 1, m - 1, j))
                                            {
                                                color5 = Lighting.GetColor(m - 1, j);
                                            }
                                            else
                                            {
                                                color5 = Lighting.GetColor(m, j - 1);
                                            }
                                            break;

                                        case 1:
                                            if (Lighting.Brighter(m, j - 1, m + 1, j))
                                            {
                                                color5 = Lighting.GetColor(m + 1, j);
                                            }
                                            else
                                            {
                                                color5 = Lighting.GetColor(m, j - 1);
                                            }
                                            num21 = 0x10;
                                            break;

                                        case 2:
                                            if (Lighting.Brighter(m, j + 1, m - 1, j))
                                            {
                                                color5 = Lighting.GetColor(m - 1, j);
                                            }
                                            else
                                            {
                                                color5 = Lighting.GetColor(m, j + 1);
                                            }
                                            num22 = 0x10;
                                            break;

                                        case 3:
                                            if (Lighting.Brighter(m, j + 1, m + 1, j))
                                            {
                                                color5 = Lighting.GetColor(m + 1, j);
                                            }
                                            else
                                            {
                                                color5 = Lighting.GetColor(m, j + 1);
                                            }
                                            num21 = 0x10;
                                            num22 = 0x10;
                                            break;
                                    }
                                    color4.R = (byte) ((color.R + color5.R) / 2);
                                    color4.G = (byte) ((color.G + color5.G) / 2);
                                    color4.B = (byte) ((color.B + color5.B) / 2);
                                    Vector2 vector3 = new Vector2();
                                    this.spriteBatch.Draw(wallTexture[tile[m, j].wall], new Vector2((float) ((((m * 0x10) - ((int) screenPosition.X)) - 8) + num21), (float) ((((j * 0x10) - ((int) screenPosition.Y)) - 8) + num22)) + vector, new Rectangle((tile[m, j].wallFrameX * 2) + num21, (tile[m, j].wallFrameY * 2) + num22, 0x10, 0x10), color4, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                            else
                            {
                                rectangle = new Rectangle(tile[m, j].wallFrameX * 2, tile[m, j].wallFrameY * 2, 0x20, 0x20);
                                Vector2 vector4 = new Vector2();
                                this.spriteBatch.Draw(wallTexture[tile[m, j].wall], new Vector2((float) (((m * 0x10) - ((int) screenPosition.X)) - 8), (float) (((j * 0x10) - ((int) screenPosition.Y)) - 8)) + vector, new Rectangle?(rectangle), Lighting.GetColor(m, j), 0f, vector4, (float) 1f, SpriteEffects.None, 0f);
                            }
                        }
                        else
                        {
                            rectangle = new Rectangle(tile[m, j].wallFrameX * 2, tile[m, j].wallFrameY * 2, 0x20, 0x20);
                            Vector2 vector5 = new Vector2();
                            this.spriteBatch.Draw(wallTexture[tile[m, j].wall], new Vector2((float) (((m * 0x10) - ((int) screenPosition.X)) - 8), (float) (((j * 0x10) - ((int) screenPosition.Y)) - 8)) + vector, new Rectangle?(rectangle), Lighting.GetColor(m, j), 0f, vector5, (float) 1f, SpriteEffects.None, 0f);
                        }
                        if (((color.R > (num2 * 0.4)) || (color.G > (num2 * 0.35))) || (color.B > (num2 * 0.3)))
                        {
                            bool flag = false;
                            if ((tile[m - 1, j].wall > 0) && (wallBlend[tile[m - 1, j].wall] != wallBlend[tile[m, j].wall]))
                            {
                                flag = true;
                            }
                            bool flag2 = false;
                            if ((tile[m + 1, j].wall > 0) && (wallBlend[tile[m + 1, j].wall] != wallBlend[tile[m, j].wall]))
                            {
                                flag2 = true;
                            }
                            bool flag3 = false;
                            if ((tile[m, j - 1].wall > 0) && (wallBlend[tile[m, j - 1].wall] != wallBlend[tile[m, j].wall]))
                            {
                                flag3 = true;
                            }
                            bool flag4 = false;
                            if ((tile[m, j + 1].wall > 0) && (wallBlend[tile[m, j + 1].wall] != wallBlend[tile[m, j].wall]))
                            {
                                flag4 = true;
                            }
                            if (flag)
                            {
                                Vector2 vector6 = new Vector2();
                                this.spriteBatch.Draw(wallOutlineTexture, new Vector2((float) ((m * 0x10) - ((int) screenPosition.X)), (float) ((j * 0x10) - ((int) screenPosition.Y))) + vector, new Rectangle(0, 0, 2, 0x10), Lighting.GetColor(m, j), 0f, vector6, (float) 1f, SpriteEffects.None, 0f);
                            }
                            if (flag2)
                            {
                                Vector2 vector7 = new Vector2();
                                this.spriteBatch.Draw(wallOutlineTexture, new Vector2((float) (((m * 0x10) - ((int) screenPosition.X)) + 14), (float) ((j * 0x10) - ((int) screenPosition.Y))) + vector, new Rectangle(14, 0, 2, 0x10), Lighting.GetColor(m, j), 0f, vector7, (float) 1f, SpriteEffects.None, 0f);
                            }
                            if (flag3)
                            {
                                Vector2 vector8 = new Vector2();
                                this.spriteBatch.Draw(wallOutlineTexture, new Vector2((float) ((m * 0x10) - ((int) screenPosition.X)), (float) ((j * 0x10) - ((int) screenPosition.Y))) + vector, new Rectangle(0, 0, 0x10, 2), Lighting.GetColor(m, j), 0f, vector8, (float) 1f, SpriteEffects.None, 0f);
                            }
                            if (flag4)
                            {
                                Vector2 vector9 = new Vector2();
                                this.spriteBatch.Draw(wallOutlineTexture, new Vector2((float) ((m * 0x10) - ((int) screenPosition.X)), (float) (((j * 0x10) - ((int) screenPosition.Y)) + 14)) + vector, new Rectangle(0, 14, 0x10, 2), Lighting.GetColor(m, j), 0f, vector9, (float) 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
            }
            renderTimer[2] = stopwatch.ElapsedMilliseconds;
        }

        protected void DrawWater(bool bg = false)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            Vector2 vector = new Vector2((float) offScreenRange, (float) offScreenRange);
            if (drawToScreen)
            {
                vector = new Vector2();
            }
            int num = (int) ((255f * (1f - gfxQuality)) + (40f * gfxQuality));
            int num2 = (int) ((255f * (1f - gfxQuality)) + (140f * gfxQuality));
            float num3 = ((float) evilTiles) / 350f;
            if (num3 > 1f)
            {
                num3 = 1f;
            }
            if (num3 < 0f)
            {
                num3 = 0f;
            }
            float num4 = (255f - (100f * num3)) / 255f;
            float num5 = (255f - (50f * num3)) / 255f;
            int num6 = (int) (((screenPosition.X - vector.X) / 16f) - 1f);
            int num7 = ((int) (((screenPosition.X + screenWidth) + vector.X) / 16f)) + 2;
            int num8 = (int) (((screenPosition.Y - vector.Y) / 16f) - 1f);
            int num9 = ((int) (((screenPosition.Y + screenHeight) + vector.Y) / 16f)) + 5;
            if (num6 < 5)
            {
                num6 = 5;
            }
            if (num7 > (maxTilesX - 5))
            {
                num7 = maxTilesX - 5;
            }
            if (num8 < 5)
            {
                num8 = 5;
            }
            if (num9 > (maxTilesY - 5))
            {
                num9 = maxTilesY - 5;
            }
            for (int i = num8; i < (num9 + 4); i++)
            {
                for (int j = num6 - 2; j < (num7 + 2); j++)
                {
                    if (tile[j, i] == null)
                    {
                        tile[j, i] = new Tile();
                    }
                    if (((tile[j, i].liquid > 0) && ((!tile[j, i].active || !tileSolid[tile[j, i].type]) || tileSolidTop[tile[j, i].type])) && ((Lighting.Brightness(j, i) > 0f) || bg))
                    {
                        Color color = Lighting.GetColor(j, i);
                        float num12 = 0x100 - tile[j, i].liquid;
                        num12 /= 32f;
                        int index = 0;
                        if (tile[j, i].lava)
                        {
                            index = 1;
                        }
                        float num14 = 0.5f;
                        if (bg)
                        {
                            num14 = 1f;
                        }
                        Vector2 vector2 = new Vector2((float) (j * 0x10), (float) ((i * 0x10) + (((int) num12) * 2)));
                        Rectangle rectangle = new Rectangle(0, 0, 0x10, 0x10 - (((int) num12) * 2));
                        if ((tile[j, i + 1].liquid < 0xf5) && ((!tile[j, i + 1].active || !tileSolid[tile[j, i + 1].type]) || tileSolidTop[tile[j, i + 1].type]))
                        {
                            float num15 = 0x100 - tile[j, i + 1].liquid;
                            num15 /= 32f;
                            num14 = (0.5f * (8f - num12)) / 4f;
                            if (num14 > 0.55)
                            {
                                num14 = 0.55f;
                            }
                            if (num14 < 0.35)
                            {
                                num14 = 0.35f;
                            }
                            float num16 = num12 / 2f;
                            if (tile[j, i + 1].liquid < 200)
                            {
                                if (bg)
                                {
                                    continue;
                                }
                                if ((tile[j, i - 1].liquid > 0) && (tile[j, i - 1].liquid > 0))
                                {
                                    rectangle = new Rectangle(0, 4, 0x10, 0x10);
                                    num14 = 0.5f;
                                }
                                else if (tile[j, i - 1].liquid > 0)
                                {
                                    vector2 = new Vector2((float) (j * 0x10), (float) ((i * 0x10) + 4));
                                    rectangle = new Rectangle(0, 4, 0x10, 12);
                                    num14 = 0.5f;
                                }
                                else if (tile[j, i + 1].liquid > 0)
                                {
                                    vector2 = new Vector2((float) (j * 0x10), (float) (((i * 0x10) + (((int) num12) * 2)) + (((int) num15) * 2)));
                                    rectangle = new Rectangle(0, 4, 0x10, 0x10 - (((int) num12) * 2));
                                }
                                else
                                {
                                    vector2 = new Vector2((float) ((j * 0x10) + ((int) num16)), (float) (((i * 0x10) + (((int) num16) * 2)) + (((int) num15) * 2)));
                                    rectangle = new Rectangle(0, 4, 0x10 - (((int) num16) * 2), 0x10 - (((int) num16) * 2));
                                }
                            }
                            else
                            {
                                num14 = 0.5f;
                                rectangle = new Rectangle(0, 4, 0x10, (0x10 - (((int) num12) * 2)) + (((int) num15) * 2));
                            }
                        }
                        else if (tile[j, i - 1].liquid > 0x20)
                        {
                            rectangle = new Rectangle(0, 4, rectangle.Width, rectangle.Height);
                        }
                        else if (((num12 < 1f) && tile[j, i - 1].active) && (tileSolid[tile[j, i - 1].type] && !tileSolidTop[tile[j, i - 1].type]))
                        {
                            vector2 = new Vector2((float) (j * 0x10), (float) (i * 0x10));
                            rectangle = new Rectangle(0, 4, 0x10, 0x10);
                        }
                        else
                        {
                            bool flag = true;
                            for (int k = i + 1; k < (i + 6); k++)
                            {
                                if ((tile[j, k].active && tileSolid[tile[j, k].type]) && !tileSolidTop[tile[j, k].type])
                                {
                                    break;
                                }
                                if (tile[j, k].liquid < 200)
                                {
                                    flag = false;
                                    break;
                                }
                            }
                            if (!flag)
                            {
                                num14 = 0.5f;
                                rectangle = new Rectangle(0, 4, 0x10, 0x10);
                            }
                            else if (tile[j, i - 1].liquid > 0)
                            {
                                rectangle = new Rectangle(0, 2, rectangle.Width, rectangle.Height);
                            }
                        }
                        if (tile[j, i].lava)
                        {
                            num14 *= 1.8f;
                            if (num14 > 1f)
                            {
                                num14 = 1f;
                            }
                            if ((base.IsActive && !gamePaused) && (Dust.lavaBubbles < 200))
                            {
                                if ((tile[j, i].liquid > 200) && (rand.Next(700) == 0))
                                {
                                    Color newColor = new Color();
                                    Dust.NewDust(new Vector2((float) (j * 0x10), (float) (i * 0x10)), 0x10, 0x10, 0x23, 0f, 0f, 0, newColor, 1f);
                                }
                                if ((rectangle.Y == 0) && (rand.Next(350) == 0))
                                {
                                    Color color6 = new Color();
                                    int num18 = Dust.NewDust(new Vector2((float) (j * 0x10), ((i * 0x10) + (num12 * 2f)) - 8f), 0x10, 8, 0x23, 0f, 0f, 50, color6, 1.5f);
                                    Dust dust1 = dust[num18];
                                    dust1.velocity = (Vector2) (dust1.velocity * 0.8f);
                                    dust[num18].velocity.X *= 2f;
                                    dust[num18].velocity.Y -= rand.Next(1, 7) * 0.1f;
                                    if (rand.Next(10) == 0)
                                    {
                                        dust[num18].velocity.Y *= rand.Next(2, 5);
                                    }
                                    dust[num18].noGravity = true;
                                }
                            }
                        }
                        float num19 = color.R * num14;
                        float num20 = color.G * num14;
                        float num21 = color.B * num14;
                        float num22 = color.A * num14;
                        if (index == 0)
                        {
                            num21 *= num4;
                        }
                        else
                        {
                            num19 *= num5;
                        }
                        color = new Color((int) ((byte) num19), (int) ((byte) num20), (int) ((byte) num21), (int) ((byte) num22));
                        if ((Lighting.lightMode < 2) && !bg)
                        {
                            Color color2 = color;
                            if (((index == 0) && (((color2.R > num) || (color2.G > (num * 1.1))) || (color2.B > (num * 1.2)))) || (((color2.R > num2) || (color2.G > (num2 * 1.1))) || (color2.B > (num2 * 1.2))))
                            {
                                for (int m = 0; m < 4; m++)
                                {
                                    int num24 = 0;
                                    int num25 = 0;
                                    int width = 8;
                                    int height = 8;
                                    Color color3 = color2;
                                    Color color4 = Lighting.GetColor(j, i);
                                    switch (m)
                                    {
                                        case 0:
                                            if (Lighting.Brighter(j, i - 1, j - 1, i))
                                            {
                                                if (!tile[j - 1, i].active)
                                                {
                                                    color4 = Lighting.GetColor(j - 1, i);
                                                }
                                                else if (!tile[j, i - 1].active)
                                                {
                                                    color4 = Lighting.GetColor(j, i - 1);
                                                }
                                            }
                                            if (rectangle.Height < 8)
                                            {
                                                height = rectangle.Height;
                                            }
                                            break;

                                        case 1:
                                            if (Lighting.Brighter(j, i - 1, j + 1, i))
                                            {
                                                if (!tile[j + 1, i].active)
                                                {
                                                    color4 = Lighting.GetColor(j + 1, i);
                                                }
                                                else if (!tile[j, i - 1].active)
                                                {
                                                    color4 = Lighting.GetColor(j, i - 1);
                                                }
                                            }
                                            num24 = 8;
                                            if (rectangle.Height < 8)
                                            {
                                                height = rectangle.Height;
                                            }
                                            break;

                                        case 2:
                                            if (Lighting.Brighter(j, i + 1, j - 1, i))
                                            {
                                                if (!tile[j - 1, i].active)
                                                {
                                                    color4 = Lighting.GetColor(j - 1, i);
                                                }
                                                else if (!tile[j, i + 1].active)
                                                {
                                                    color4 = Lighting.GetColor(j, i + 1);
                                                }
                                            }
                                            num25 = 8;
                                            height = 8 - (0x10 - rectangle.Height);
                                            break;

                                        case 3:
                                            if (Lighting.Brighter(j, i + 1, j + 1, i))
                                            {
                                                if (!tile[j + 1, i].active)
                                                {
                                                    color4 = Lighting.GetColor(j + 1, i);
                                                }
                                                else if (!tile[j, i + 1].active)
                                                {
                                                    color4 = Lighting.GetColor(j, i + 1);
                                                }
                                            }
                                            num24 = 8;
                                            num25 = 8;
                                            height = 8 - (0x10 - rectangle.Height);
                                            break;
                                    }
                                    num19 = color4.R * num14;
                                    num20 = color4.G * num14;
                                    num21 = color4.B * num14;
                                    num22 = color4.A * num14;
                                    color4 = new Color((int) ((byte) num19), (int) ((byte) num20), (int) ((byte) num21), (int) ((byte) num22));
                                    color3.R = (byte) ((color2.R + color4.R) / 2);
                                    color3.G = (byte) ((color2.G + color4.G) / 2);
                                    color3.B = (byte) ((color2.B + color4.B) / 2);
                                    color3.A = (byte) ((color2.A + color4.A) / 2);
                                    Vector2 origin = new Vector2();
                                    this.spriteBatch.Draw(liquidTexture[index], ((vector2 - screenPosition) + new Vector2((float) num24, (float) num25)) + vector, new Rectangle(rectangle.X + num24, rectangle.Y + num25, width, height), color3, 0f, origin, (float) 1f, SpriteEffects.None, 0f);
                                }
                            }
                            else
                            {
                                Vector2 vector4 = new Vector2();
                                this.spriteBatch.Draw(liquidTexture[index], (vector2 - screenPosition) + vector, new Rectangle?(rectangle), color, 0f, vector4, (float) 1f, SpriteEffects.None, 0f);
                            }
                        }
                        else
                        {
                            Vector2 vector5 = new Vector2();
                            this.spriteBatch.Draw(liquidTexture[index], (vector2 - screenPosition) + vector, new Rectangle?(rectangle), color, 0f, vector5, (float) 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
            }
            if (!bg)
            {
                renderTimer[4] = stopwatch.ElapsedMilliseconds;
            }
        }

        protected void DrawWires()
        {
            int num = (int) ((50f * (1f - gfxQuality)) + (2f * gfxQuality));
            Vector2 vector = new Vector2((float) offScreenRange, (float) offScreenRange);
            if (drawToScreen)
            {
                vector = new Vector2();
            }
            int num2 = (int) (((screenPosition.X - vector.X) / 16f) - 1f);
            int maxTilesX = ((int) (((screenPosition.X + screenWidth) + vector.X) / 16f)) + 2;
            int num4 = (int) (((screenPosition.Y - vector.Y) / 16f) - 1f);
            int maxTilesY = ((int) (((screenPosition.Y + screenHeight) + vector.Y) / 16f)) + 5;
            if (num2 < 0)
            {
                num2 = 0;
            }
            if (maxTilesX > Main.maxTilesX)
            {
                maxTilesX = Main.maxTilesX;
            }
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesY > Main.maxTilesY)
            {
                maxTilesY = Main.maxTilesY;
            }
            for (int i = num4; i < maxTilesY; i++)
            {
                for (int j = num2; j < maxTilesX; j++)
                {
                    if (tile[j, i].wire && (Lighting.Brightness(j, i) > 0f))
                    {
                        Rectangle rectangle = new Rectangle(0, 0, 0x10, 0x10);
                        bool wire = tile[j, i - 1].wire;
                        bool flag2 = tile[j, i + 1].wire;
                        bool flag3 = tile[j - 1, i].wire;
                        bool flag4 = tile[j + 1, i].wire;
                        if (wire)
                        {
                            if (flag2)
                            {
                                if (flag3)
                                {
                                    if (flag4)
                                    {
                                        rectangle = new Rectangle(0x12, 0x12, 0x10, 0x10);
                                    }
                                    else
                                    {
                                        rectangle = new Rectangle(0x36, 0, 0x10, 0x10);
                                    }
                                }
                                else if (flag4)
                                {
                                    rectangle = new Rectangle(0x24, 0, 0x10, 0x10);
                                }
                                else
                                {
                                    rectangle = new Rectangle(0, 0, 0x10, 0x10);
                                }
                            }
                            else if (flag3)
                            {
                                if (flag4)
                                {
                                    rectangle = new Rectangle(0, 0x12, 0x10, 0x10);
                                }
                                else
                                {
                                    rectangle = new Rectangle(0x36, 0x12, 0x10, 0x10);
                                }
                            }
                            else if (flag4)
                            {
                                rectangle = new Rectangle(0x24, 0x12, 0x10, 0x10);
                            }
                            else
                            {
                                rectangle = new Rectangle(0x24, 0x24, 0x10, 0x10);
                            }
                        }
                        else if (flag2)
                        {
                            if (flag3)
                            {
                                if (flag4)
                                {
                                    rectangle = new Rectangle(0x48, 0, 0x10, 0x10);
                                }
                                else
                                {
                                    rectangle = new Rectangle(0x48, 0x12, 0x10, 0x10);
                                }
                            }
                            else if (flag4)
                            {
                                rectangle = new Rectangle(0, 0x24, 0x10, 0x10);
                            }
                            else
                            {
                                rectangle = new Rectangle(0x12, 0x24, 0x10, 0x10);
                            }
                        }
                        else if (flag3)
                        {
                            if (flag4)
                            {
                                rectangle = new Rectangle(0x12, 0, 0x10, 0x10);
                            }
                            else
                            {
                                rectangle = new Rectangle(0x36, 0x24, 0x10, 0x10);
                            }
                        }
                        else if (flag4)
                        {
                            rectangle = new Rectangle(0x48, 0x24, 0x10, 0x10);
                        }
                        else
                        {
                            rectangle = new Rectangle(0, 0x36, 0x10, 0x10);
                        }
                        Color color = Lighting.GetColor(j, i);
                        if ((Lighting.lightMode < 2) && (((color.R > num) || (color.G > (num * 1.1))) || (color.B > (num * 1.2))))
                        {
                            for (int k = 0; k < 4; k++)
                            {
                                int num9 = 0;
                                int num10 = 0;
                                Color color2 = color;
                                Color color3 = color;
                                switch (k)
                                {
                                    case 0:
                                        if (Lighting.Brighter(j, i - 1, j - 1, i))
                                        {
                                            color3 = Lighting.GetColor(j - 1, i);
                                        }
                                        else
                                        {
                                            color3 = Lighting.GetColor(j, i - 1);
                                        }
                                        break;

                                    case 1:
                                        if (Lighting.Brighter(j, i - 1, j + 1, i))
                                        {
                                            color3 = Lighting.GetColor(j + 1, i);
                                        }
                                        else
                                        {
                                            color3 = Lighting.GetColor(j, i - 1);
                                        }
                                        num9 = 8;
                                        break;

                                    case 2:
                                        if (Lighting.Brighter(j, i + 1, j - 1, i))
                                        {
                                            color3 = Lighting.GetColor(j - 1, i);
                                        }
                                        else
                                        {
                                            color3 = Lighting.GetColor(j, i + 1);
                                        }
                                        num10 = 8;
                                        break;

                                    case 3:
                                        if (Lighting.Brighter(j, i + 1, j + 1, i))
                                        {
                                            color3 = Lighting.GetColor(j + 1, i);
                                        }
                                        else
                                        {
                                            color3 = Lighting.GetColor(j, i + 1);
                                        }
                                        num9 = 8;
                                        num10 = 8;
                                        break;
                                }
                                color2.R = (byte) ((color.R + color3.R) / 2);
                                color2.G = (byte) ((color.G + color3.G) / 2);
                                color2.B = (byte) ((color.B + color3.B) / 2);
                                Vector2 origin = new Vector2();
                                this.spriteBatch.Draw(wireTexture, new Vector2((float) (((j * 0x10) - ((int) screenPosition.X)) + num9), (float) (((i * 0x10) - ((int) screenPosition.Y)) + num10)) + vector, new Rectangle(rectangle.X + num9, rectangle.Y + num10, 8, 8), color2, 0f, origin, (float) 1f, SpriteEffects.None, 0f);
                            }
                        }
                        else
                        {
                            Vector2 vector3 = new Vector2();
                            this.spriteBatch.Draw(wireTexture, new Vector2((float) ((j * 0x10) - ((int) screenPosition.X)), (float) ((i * 0x10) - ((int) screenPosition.Y))) + vector, new Rectangle?(rectangle), color, 0f, vector3, (float) 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
            }
        }

        protected void DrawWoF()
        {
            if ((wof >= 0) && player[myPlayer].gross)
            {
                for (int i = 0; i < 0xff; i++)
                {
                    if ((player[i].active && player[i].tongued) && !player[i].dead)
                    {
                        float num2 = npc[wof].position.X + (npc[wof].width / 2);
                        float num3 = npc[wof].position.Y + (npc[wof].height / 2);
                        Vector2 vector = new Vector2(player[i].position.X + (player[i].width * 0.5f), player[i].position.Y + (player[i].height * 0.5f));
                        float num4 = num2 - vector.X;
                        float num5 = num3 - vector.Y;
                        float rotation = ((float) Math.Atan2((double) num5, (double) num4)) - 1.57f;
                        bool flag = true;
                        while (flag)
                        {
                            float num7 = (float) Math.Sqrt((double) ((num4 * num4) + (num5 * num5)));
                            if (num7 < 40f)
                            {
                                flag = false;
                            }
                            else
                            {
                                num7 = ((float) chain12Texture.Height) / num7;
                                num4 *= num7;
                                num5 *= num7;
                                vector.X += num4;
                                vector.Y += num5;
                                num4 = num2 - vector.X;
                                num5 = num3 - vector.Y;
                                Color color = Lighting.GetColor(((int) vector.X) / 0x10, (int) (vector.Y / 16f));
                                this.spriteBatch.Draw(chain12Texture, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Rectangle(0, 0, chain12Texture.Width, chain12Texture.Height), color, rotation, new Vector2(chain12Texture.Width * 0.5f, chain12Texture.Height * 0.5f), (float) 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
                for (int j = 0; j < 200; j++)
                {
                    if (npc[j].active && (npc[j].aiStyle == 0x1d))
                    {
                        float num9 = npc[wof].position.X + (npc[wof].width / 2);
                        float y = npc[wof].position.Y;
                        float num11 = Main.wofB - Main.wofT;
                        bool flag2 = false;
                        if (npc[j].frameCounter > 7.0)
                        {
                            flag2 = true;
                        }
                        y = Main.wofT + (num11 * npc[j].ai[0]);
                        Vector2 vector2 = new Vector2(npc[j].position.X + (npc[j].width / 2), npc[j].position.Y + (npc[j].height / 2));
                        float num12 = num9 - vector2.X;
                        float num13 = y - vector2.Y;
                        float num14 = ((float) Math.Atan2((double) num13, (double) num12)) - 1.57f;
                        bool flag3 = true;
                        while (flag3)
                        {
                            SpriteEffects flipHorizontally = SpriteEffects.None;
                            if (flag2)
                            {
                                flipHorizontally = SpriteEffects.FlipHorizontally;
                                flag2 = false;
                            }
                            else
                            {
                                flag2 = true;
                            }
                            int height = 0x1c;
                            float num16 = (float) Math.Sqrt((double) ((num12 * num12) + (num13 * num13)));
                            if (num16 < 40f)
                            {
                                height = (((int) num16) - 40) + 0x1c;
                                flag3 = false;
                            }
                            num16 = 28f / num16;
                            num12 *= num16;
                            num13 *= num16;
                            vector2.X += num12;
                            vector2.Y += num13;
                            num12 = num9 - vector2.X;
                            num13 = y - vector2.Y;
                            Color color2 = Lighting.GetColor(((int) vector2.X) / 0x10, (int) (vector2.Y / 16f));
                            this.spriteBatch.Draw(chain12Texture, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Rectangle(0, 0, chain4Texture.Width, height), color2, num14, new Vector2(chain4Texture.Width * 0.5f, chain4Texture.Height * 0.5f), (float) 1f, flipHorizontally, 0f);
                        }
                    }
                }
                int num17 = 140;
                float wofT = Main.wofT;
                float wofB = Main.wofB;
                wofB = screenPosition.Y + screenHeight;
                float num20 = ((int) ((wofT - screenPosition.Y) / ((float) num17))) + 1;
                num20 *= num17;
                if (num20 > 0f)
                {
                    wofT -= num20;
                }
                float num21 = wofT;
                float x = npc[wof].position.X;
                float num23 = wofB - wofT;
                bool flag4 = true;
                SpriteEffects none = SpriteEffects.None;
                if (npc[wof].spriteDirection == 1)
                {
                    none = SpriteEffects.FlipHorizontally;
                }
                if (npc[wof].direction > 0)
                {
                    x -= 80f;
                }
                int num24 = 0;
                if (!gamePaused)
                {
                    wofF++;
                }
                if (wofF > 12)
                {
                    num24 = 280;
                    if (wofF > 0x11)
                    {
                        wofF = 0;
                    }
                }
                else if (wofF > 6)
                {
                    num24 = 140;
                }
                while (flag4)
                {
                    num23 = wofB - num21;
                    if (num23 > num17)
                    {
                        num23 = num17;
                    }
                    bool flag5 = true;
                    int num25 = 0;
                    while (flag5)
                    {
                        int num26 = (((int) x) + (wofTexture.Width / 2)) / 0x10;
                        int num27 = (((int) num21) + num25) / 0x10;
                        Vector2 origin = new Vector2();
                        this.spriteBatch.Draw(wofTexture, new Vector2(x - screenPosition.X, (num21 + num25) - screenPosition.Y), new Rectangle(0, num24 + num25, wofTexture.Width, 0x10), Lighting.GetColor(num26, num27), 0f, origin, (float) 1f, none, 0f);
                        num25 += 0x10;
                        if (num25 >= num23)
                        {
                            flag5 = false;
                        }
                    }
                    num21 += num17;
                    if (num21 >= wofB)
                    {
                        flag4 = false;
                    }
                }
            }
        }

        private static void ErasePlayer(int i)
        {
            try
            {
                File.Delete(loadPlayerPath[i]);
                File.Delete(loadPlayerPath[i] + ".bak");
                LoadPlayers();
            }
            catch
            {
            }
        }

        private static void EraseWorld(int i)
        {
            try
            {
                File.Delete(loadWorldPath[i]);
                File.Delete(loadWorldPath[i] + ".bak");
                LoadWorlds();
            }
            catch
            {
            }
        }

        [DllImport("user32.dll")]
        public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        protected bool FullTile(int x, int y)
        {
            if (((tile[x, y].active && tileSolid[tile[x, y].type]) && (!tileSolidTop[tile[x, y].type] && (tile[x, y].type != 10))) && (tile[x, y].type != 0x8a))
            {
                int frameX = tile[x, y].frameX;
                int frameY = tile[x, y].frameY;
                if (frameY == 0x12)
                {
                    if ((frameX >= 0x12) && (frameX <= 0x36))
                    {
                        return true;
                    }
                    if ((frameX >= 0x6c) && (frameX <= 0x90))
                    {
                        return true;
                    }
                }
                else if ((frameY >= 90) && (frameY <= 0xc4))
                {
                    if (frameX <= 70)
                    {
                        return true;
                    }
                    if ((frameX >= 0x90) && (frameX <= 0xe8))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public static string GetInputText(string oldString)
        {
            if (!hasFocus)
            {
                return oldString;
            }
            //BlueFly - Start
            if ((keyState.IsKeyDown(Keys.LeftControl) || keyState.IsKeyDown(Keys.RightControl)) && keyState.IsKeyDown(Keys.V))
            {
                if (togglepaste)
                {
                     oldString += Program.getClipboardText();
                }
                togglepaste = false;
                return oldString;
            }
            else
            {
                togglepaste = true;
            }
            //BlueFly - End
            inputTextEnter = false;
            string str = oldString;
            if (str == null)
            {
                str = "";
            }
            oldInputText = inputText;
            inputText = Keyboard.GetState();
            bool flag = (((ushort) GetKeyState(20)) & 0xffff) != 0;
            bool flag2 = false;
            if (inputText.IsKeyDown(Keys.LeftShift) || inputText.IsKeyDown(Keys.RightShift))
            {
                flag2 = true;
            }
            Keys[] pressedKeys = inputText.GetPressedKeys();
            Keys[] keysArray2 = oldInputText.GetPressedKeys();
            bool flag3 = false;
            if (inputText.IsKeyDown(Keys.Back) && oldInputText.IsKeyDown(Keys.Back))
            {
                if (backSpaceCount == 0)
                {
                    backSpaceCount = 7;
                    flag3 = true;
                }
                backSpaceCount--;
            }
            else
            {
                backSpaceCount = 15;
            }
            for (int i = 0; i < pressedKeys.Length; i++)
            {
                bool flag4 = true;
                for (int j = 0; j < keysArray2.Length; j++)
                {
                    if (pressedKeys[i] == keysArray2[j])
                    {
                        flag4 = false;
                    }
                }
                string str2 = pressedKeys[i].ToString();
                if ((str2 == "Back") && (flag4 || flag3))
                {
                    if (str.Length > 0)
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                else if (flag4)
                {
                    if (str2 == "Space")
                    {
                        str2 = " ";
                    }
                    else if (str2.Length == 1)
                    {
                        int num3 = Convert.ToInt32(Convert.ToChar(str2));
                        if (((num3 >= 0x41) && (num3 <= 90)) && ((!flag2 && !flag) || (flag2 && flag)))
                        {
                            num3 += 0x20;
                            str2 = Convert.ToChar(num3).ToString();
                        }
                    }
                    else if ((str2.Length == 2) && (str2.Substring(0, 1) == "D"))
                    {
                        str2 = str2.Substring(1, 1);
                        if (flag2)
                        {
                            switch (str2)
                            {
                                case "1":
                                    str2 = "!";
                                    break;

                                case "2":
                                    str2 = "@";
                                    break;

                                case "3":
                                    str2 = "#";
                                    break;

                                case "4":
                                    str2 = "$";
                                    break;

                                case "5":
                                    str2 = "%";
                                    break;

                                case "6":
                                    str2 = "^";
                                    break;

                                case "7":
                                    str2 = "&";
                                    break;

                                case "8":
                                    str2 = "*";
                                    break;

                                case "9":
                                    str2 = "(";
                                    break;

                                case "0":
                                    str2 = ")";
                                    break;
                            }
                        }
                    }
                    else if ((str2.Length == 7) && (str2.Substring(0, 6) == "NumPad"))
                    {
                        str2 = str2.Substring(6, 1);
                    }
                    else if (str2 == "Divide")
                    {
                        str2 = "/";
                    }
                    else if (str2 == "Multiply")
                    {
                        str2 = "*";
                    }
                    else if (str2 == "Subtract")
                    {
                        str2 = "-";
                    }
                    else if (str2 == "Add")
                    {
                        str2 = "+";
                    }
                    else if (str2 == "Decimal")
                    {
                        str2 = ".";
                    }
                    else
                    {
                        if (str2 == "OemSemicolon")
                        {
                            str2 = ";";
                        }
                        else if (str2 == "OemPlus")
                        {
                            str2 = "=";
                        }
                        else if (str2 == "OemComma")
                        {
                            str2 = ",";
                        }
                        else if (str2 == "OemMinus")
                        {
                            str2 = "-";
                        }
                        else if (str2 == "OemPeriod")
                        {
                            str2 = ".";
                        }
                        else if (str2 == "OemQuestion")
                        {
                            str2 = "/";
                        }
                        else if (str2 == "OemTilde")
                        {
                            str2 = "`";
                        }
                        else if (str2 == "OemOpenBrackets")
                        {
                            str2 = "[";
                        }
                        else if (str2 == "OemPipe")
                        {
                            str2 = @"\";
                        }
                        else if (str2 == "OemCloseBrackets")
                        {
                            str2 = "]";
                        }
                        else if (str2 == "OemQuotes")
                        {
                            str2 = "'";
                        }
                        else if (str2 == "OemBackslash")
                        {
                            str2 = @"\";
                        }
                        if (flag2)
                        {
                            if (str2 == ";")
                            {
                                str2 = ":";
                            }
                            else if (str2 == "=")
                            {
                                str2 = "+";
                            }
                            else if (str2 == ",")
                            {
                                str2 = "<";
                            }
                            else if (str2 == "-")
                            {
                                str2 = "_";
                            }
                            else if (str2 == ".")
                            {
                                str2 = ">";
                            }
                            else if (str2 == "/")
                            {
                                str2 = "?";
                            }
                            else if (str2 == "`")
                            {
                                str2 = "~";
                            }
                            else if (str2 == "[")
                            {
                                str2 = "{";
                            }
                            else if (str2 == @"\")
                            {
                                str2 = "|";
                            }
                            else if (str2 == "]")
                            {
                                str2 = "}";
                            }
                            else if (str2 == "'")
                            {
                                str2 = "\"";
                            }
                        }
                    }
                    if (str2 == "Enter")
                    {
                        inputTextEnter = true;
                    }
                    if (str2.Length == 1)
                    {
                        str = str + str2;
                    }
                }
            }
            return str;
        }

        [DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)]
        public static extern short GetKeyState(int keyCode);
        [DllImport("User32")]
        private static extern int GetMenuItemCount(IntPtr hWnd);
        [DllImport("User32")]
        private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
        private static void HelpText()
        {
            bool flag = false;
            if (player[myPlayer].statLifeMax > 100)
            {
                flag = true;
            }
            bool flag2 = false;
            if (player[myPlayer].statManaMax > 0)
            {
                flag2 = true;
            }
            bool flag3 = true;
            bool flag4 = false;
            bool flag5 = false;
            bool flag6 = false;
            bool flag7 = false;
            bool flag8 = false;
            bool flag9 = false;
            for (int i = 0; i < 0x30; i++)
            {
                if ((player[myPlayer].inventory[i].pick > 0) && (player[myPlayer].inventory[i].name != "Copper Pickaxe"))
                {
                    flag3 = false;
                }
                if ((player[myPlayer].inventory[i].axe > 0) && (player[myPlayer].inventory[i].name != "Copper Axe"))
                {
                    flag3 = false;
                }
                if (player[myPlayer].inventory[i].hammer > 0)
                {
                    flag3 = false;
                }
                if (((player[myPlayer].inventory[i].type == 11) || (player[myPlayer].inventory[i].type == 12)) || ((player[myPlayer].inventory[i].type == 13) || (player[myPlayer].inventory[i].type == 14)))
                {
                    flag4 = true;
                }
                if (((player[myPlayer].inventory[i].type == 0x13) || (player[myPlayer].inventory[i].type == 20)) || ((player[myPlayer].inventory[i].type == 0x15) || (player[myPlayer].inventory[i].type == 0x16)))
                {
                    flag5 = true;
                }
                if (player[myPlayer].inventory[i].type == 0x4b)
                {
                    flag6 = true;
                }
                if (player[myPlayer].inventory[i].type == 0x4b)
                {
                    flag7 = true;
                }
                if ((player[myPlayer].inventory[i].type == 0x44) || (player[myPlayer].inventory[i].type == 70))
                {
                    flag8 = true;
                }
                if (player[myPlayer].inventory[i].type == 0x54)
                {
                    flag9 = true;
                }
            }
            bool flag10 = false;
            bool flag11 = false;
            bool flag12 = false;
            bool flag13 = false;
            bool flag14 = false;
            bool flag15 = false;
            bool flag16 = false;
            bool flag17 = false;
            bool flag18 = false;
            for (int j = 0; j < 200; j++)
            {
                if (npc[j].active)
                {
                    if (npc[j].type == 0x11)
                    {
                        flag10 = true;
                    }
                    if (npc[j].type == 0x12)
                    {
                        flag11 = true;
                    }
                    if (npc[j].type == 0x13)
                    {
                        flag13 = true;
                    }
                    if (npc[j].type == 20)
                    {
                        flag12 = true;
                    }
                    if (npc[j].type == 0x36)
                    {
                        flag18 = true;
                    }
                    if (npc[j].type == 0x7c)
                    {
                        flag15 = true;
                    }
                    if (npc[j].type == 0x6b)
                    {
                        flag14 = true;
                    }
                    if (npc[j].type == 0x6c)
                    {
                        flag16 = true;
                    }
                    if (npc[j].type == 0x26)
                    {
                        flag17 = true;
                    }
                }
            }
        Label_0370:
            helpText++;
            if (flag3)
            {
                if (helpText == 1)
                {
                    npcChatText = "You can use your pickaxe to dig through dirt, and your axe to chop down trees. Just place your cursor over the tile and click!";
                    return;
                }
                if (helpText == 2)
                {
                    npcChatText = "If you want to survive, you will need to create weapons and shelter. Start by chopping down trees and gathering wood.";
                    return;
                }
                if (helpText == 3)
                {
                    npcChatText = "Press ESC to access your crafting menu. When you have enough wood, create a workbench. This will allow you to create more complicated things, as long as you are standing close to it.";
                    return;
                }
                if (helpText == 4)
                {
                    npcChatText = "You can build a shelter by placing wood or other blocks in the world. Don't forget to create and place walls.";
                    return;
                }
                if (helpText == 5)
                {
                    npcChatText = "Once you have a wooden sword, you might try to gather some gel from the slimes. Combine wood and gel to make a torch!";
                    return;
                }
                if (helpText == 6)
                {
                    npcChatText = "To interact with backgrounds and placed objects, use a hammer!";
                    return;
                }
            }
            if ((flag3 && !flag4) && (!flag5 && (helpText == 11)))
            {
                npcChatText = "You should do some mining to find metal ore. You can craft very useful things with it.";
            }
            else
            {
                if ((flag3 && flag4) && !flag5)
                {
                    if (helpText == 0x15)
                    {
                        npcChatText = "Now that you have some ore, you will need to turn it into a bar in order to make items with it. This requires a furnace!";
                        return;
                    }
                    if (helpText == 0x16)
                    {
                        npcChatText = "You can create a furnace out of torches, wood, and stone. Make sure you are standing near a work bench.";
                        return;
                    }
                }
                if (flag3 && flag5)
                {
                    if (helpText == 0x1f)
                    {
                        npcChatText = "You will need an anvil to make most things out of metal bars.";
                        return;
                    }
                    if (helpText == 0x20)
                    {
                        npcChatText = "Anvils can be crafted out of iron, or purchased from a merchant.";
                        return;
                    }
                }
                if (!flag && (helpText == 0x29))
                {
                    npcChatText = "Underground are crystal hearts that can be used to increase your max life. You will need a hammer to obtain them.";
                }
                else if (!flag2 && (helpText == 0x2a))
                {
                    npcChatText = "If you gather 10 fallen stars, they can be combined to create an item that will increase your magic capacity.";
                }
                else if ((!flag2 && !flag6) && (helpText == 0x2b))
                {
                    npcChatText = "Stars fall all over the world at night. They can be used for all sorts of usefull things. If you see one, be sure to grab it because they disappear after sunrise.";
                }
                else
                {
                    if (!flag10 && !flag11)
                    {
                        if (helpText == 0x33)
                        {
                            npcChatText = "There are many different ways you can attract people to move in to our town. They will of course need a home to live in.";
                            return;
                        }
                        if (helpText == 0x34)
                        {
                            npcChatText = "In order for a room to be considered a home, it needs to have a door, chair, table, and a light source.  Make sure the house has walls as well.";
                            return;
                        }
                        if (helpText == 0x35)
                        {
                            npcChatText = "Two people will not live in the same home. Also, if their home is destroyed, they will look for a new place to live.";
                            return;
                        }
                        if (helpText == 0x36)
                        {
                            npcChatText = "You can use the housing interface to assign and view housing. Open you inventory and click the house icon.";
                            return;
                        }
                    }
                    if (!flag10 && (helpText == 0x3d))
                    {
                        npcChatText = "If you want a merchant to move in, you will need to gather plenty of money. 50 silver coins should do the trick!";
                    }
                    else if (!flag11 && (helpText == 0x3e))
                    {
                        npcChatText = "For a nurse to move in, you might want to increase your maximum life.";
                    }
                    else if (!flag13 && (helpText == 0x3f))
                    {
                        npcChatText = "If you had a gun, I bet an arms dealer might show up to sell you some ammo!";
                    }
                    else if (!flag12 && (helpText == 0x40))
                    {
                        npcChatText = "You should prove yourself by defeating a strong monster. That will get the attention of a dryad.";
                    }
                    else if ((!flag15 && (helpText == 0x41)) && NPC.downedBoss3)
                    {
                        npcChatText = "Make sure to explore the dungeon thoroughly. There may be prisoners held deep within.";
                    }
                    else if ((!flag18 && (helpText == 0x42)) && NPC.downedBoss3)
                    {
                        npcChatText = "Perhaps the old man by the dungeon would like to join us now that his curse has been lifted.";
                    }
                    else if (!flag14 && (helpText == 0x43))
                    {
                        npcChatText = "Hang on to any bombs you might find. A demolitionist may want to have a look at them.";
                    }
                    else if ((!flag17 && NPC.downedBoss2) && (helpText == 0x44))
                    {
                        npcChatText = "Are goblins really so different from us that we couldn't live together peacefully?";
                    }
                    else if ((!flag16 && hardMode) && (helpText == 0x45))
                    {
                        npcChatText = "I heard there was a powerfully wizard who lives in these parts.  Make sure to keep an eye out for him next time you go underground.";
                    }
                    else if (flag7 && (helpText == 0x47))
                    {
                        npcChatText = "If you combine lenses at a demon altar, you might be able to find a way to summon a powerful monster. You will want to wait until night before using it, though.";
                    }
                    else if (flag8 && (helpText == 0x48))
                    {
                        npcChatText = "You can create worm bait with rotten chunks and vile powder. Make sure you are in a corrupt area before using it.";
                    }
                    else if ((flag7 || flag8) && (helpText == 80))
                    {
                        npcChatText = "Demonic altars can usually be found in the corruption. You will need to be near them to craft some items.";
                    }
                    else if (((!flag9 && (helpText == 0xc9)) && (!hardMode && !NPC.downedBoss3)) && !NPC.downedBoss2)
                    {
                        npcChatText = "You can make a grappling hook from a hook and 3 chains. Skeletons found deep underground usually carry hooks, and chains can be made from iron bars.";
                    }
                    else if (((helpText == 0x3e8) && !NPC.downedBoss1) && !NPC.downedBoss2)
                    {
                        npcChatText = "If you see a pot, be sure to smash it open. They contain all sorts of useful supplies.";
                    }
                    else if (((helpText == 0x3e9) && !NPC.downedBoss1) && !NPC.downedBoss2)
                    {
                        npcChatText = "There is treasure hidden all over the world. Some amazing things can be found deep underground!";
                    }
                    else if ((helpText == 0x3ea) && !NPC.downedBoss3)
                    {
                        npcChatText = "Smashing a shadow orb will sometimes cause a meteor to fall out of the sky. Shadow orbs can usually be found in the chasms around corrupt areas.";
                    }
                    else if (((helpText == 0x41a) && !NPC.downedBoss1) && (player[myPlayer].statLifeMax < 200))
                    {
                        npcChatText = "You should focus on gathering more heart crystals to increase your maximum life.";
                    }
                    else if (((helpText == 0x41b) && !NPC.downedBoss1) && (player[myPlayer].statDefense <= 10))
                    {
                        npcChatText = "Your current equipment simply won't do. You need to make better armor.";
                    }
                    else if (((helpText == 0x41c) && !NPC.downedBoss1) && ((player[myPlayer].statLifeMax >= 200) && (player[myPlayer].statDefense > 10)))
                    {
                        npcChatText = "I think you are ready for your first major battle. Gather some lenses from the eyeballs at night and take them to a demon altar.";
                    }
                    else if (((helpText == 0x41d) && NPC.downedBoss1) && (!NPC.downedBoss2 && (player[myPlayer].statLifeMax < 300)))
                    {
                        npcChatText = "You wil want to increase your life before facing your next challenge. Fifteen hearts should be enough.";
                    }
                    else if (((helpText == 0x41e) && NPC.downedBoss1) && (!NPC.downedBoss2 && (player[myPlayer].statLifeMax >= 300)))
                    {
                        npcChatText = "The ebonstone in the corruption can be purified using some powder from a dryad, or it can be destroyed with explosives.";
                    }
                    else if (((helpText == 0x41f) && NPC.downedBoss1) && (!NPC.downedBoss2 && (player[myPlayer].statLifeMax >= 300)))
                    {
                        npcChatText = "Your next step should be to explore the corrupt chasms.  Find and destroy any shadow orb you find.";
                    }
                    else if (((helpText == 0x420) && NPC.downedBoss1) && (NPC.downedBoss2 && !NPC.downedBoss3))
                    {
                        npcChatText = "There is a old dungeon not far from here. Now would be a good time to go check it out.";
                    }
                    else if ((((helpText == 0x421) && NPC.downedBoss1) && (NPC.downedBoss2 && NPC.downedBoss3)) && (!hardMode && (player[myPlayer].statLifeMax < 400)))
                    {
                        npcChatText = "You should make an attempt to max out your available life. Try to gather twenty hearts.";
                    }
                    else if ((((helpText == 0x422) && NPC.downedBoss1) && (NPC.downedBoss2 && NPC.downedBoss3)) && (!hardMode && (player[myPlayer].statLifeMax >= 400)))
                    {
                        npcChatText = "There are many treasures to be discovered in the jungle, if you are willing to dig deep enough.";
                    }
                    else if ((((helpText == 0x423) && NPC.downedBoss1) && (NPC.downedBoss2 && NPC.downedBoss3)) && (!hardMode && (player[myPlayer].statLifeMax >= 400)))
                    {
                        npcChatText = "The underworld is made of a material called hellstone. It's perfect for making weapons and armor.";
                    }
                    else if ((((helpText == 0x424) && NPC.downedBoss1) && (NPC.downedBoss2 && NPC.downedBoss3)) && (!hardMode && (player[myPlayer].statLifeMax >= 400)))
                    {
                        npcChatText = "When you are ready to challenge the keeper of the underworld, you will have to make a living sacrifice. Everything you need for it can be found in the underworld.";
                    }
                    else if ((helpText == 0x425) && hardMode)
                    {
                        npcChatText = "Make sure to smash any demon altar you can find. Something good is bound to happen if you do!";
                    }
                    else if ((helpText == 0x426) && hardMode)
                    {
                        npcChatText = "Souls can sometimes be gathered from fallen creatures in places of extreme light or dark.";
                    }
                    else
                    {
                        if (helpText > 0x44c)
                        {
                            helpText = 0;
                        }
                        goto Label_0370;
                    }
                }
            }
        }

        protected override void Initialize()
        {
            NPC.clrNames();
            NPC.setNames();
            bgAlpha[0] = 1f;
            bgAlpha2[0] = 1f;
            for (int i = 0; i < 0x6d; i++)
            {
                projFrames[i] = 1;
            }
            projFrames[0x48] = 4;
            projFrames[0x56] = 4;
            projFrames[0x57] = 4;
            projFrames[0x66] = 2;
            debuff[20] = true;
            debuff[0x15] = true;
            debuff[0x16] = true;
            debuff[0x17] = true;
            debuff[0x18] = true;
            debuff[0x19] = true;
            debuff[0x1c] = true;
            debuff[30] = true;
            debuff[0x1f] = true;
            debuff[0x20] = true;
            debuff[0x21] = true;
            debuff[0x22] = true;
            debuff[0x23] = true;
            debuff[0x24] = true;
            debuff[0x25] = true;
            debuff[0x26] = true;
            debuff[0x27] = true;
            buffName[1] = "Obsidian Skin";
            buffTip[1] = "Immune to lava";
            buffName[2] = "Regeneration";
            buffTip[2] = "Provides life regeneration";
            buffName[3] = "Swiftness";
            buffTip[3] = "25% increased movement speed";
            buffName[4] = "Gills";
            buffTip[4] = "Breathe water instead of air";
            buffName[5] = "Ironskin";
            buffTip[5] = "Increase defense by 8";
            buffName[6] = "Mana Regeneration";
            buffTip[6] = "Increased mana regeneration";
            buffName[7] = "Magic Power";
            buffTip[7] = "20% increased magic damage";
            buffName[8] = "Featherfall";
            buffTip[8] = "Press UP or DOWN to control speed of descent";
            buffName[9] = "Spelunker";
            buffTip[9] = "Shows the location of treasure and ore";
            buffName[10] = "Invisibility";
            buffTip[10] = "Grants invisibility";
            buffName[11] = "Shine";
            buffTip[11] = "Emitting light";
            buffName[12] = "Night Owl";
            buffTip[12] = "Increased night vision";
            buffName[13] = "Battle";
            buffTip[13] = "Increased enemy spawn rate";
            buffName[14] = "Thorns";
            buffTip[14] = "Attackers also take damage";
            buffName[15] = "Water Walking";
            buffTip[15] = "Press DOWN to enter water";
            buffName[0x10] = "Archery";
            buffTip[0x10] = "20% increased arrow damage and speed";
            buffName[0x11] = "Hunter";
            buffTip[0x11] = "Shows the location of enemies";
            buffName[0x12] = "Gravitation";
            buffTip[0x12] = "Press UP or DOWN to reverse gravity";
            buffName[0x13] = "Orb of Light";
            buffTip[0x13] = "A magical orb that provides light";
            buffName[20] = "Poisoned";
            buffTip[20] = "Slowly losing life";
            buffName[0x15] = "Potion Sickness";
            buffTip[0x15] = "Cannot consume anymore healing items";
            buffName[0x16] = "Darkness";
            buffTip[0x16] = "Decreased light vision";
            buffName[0x17] = "Cursed";
            buffTip[0x17] = "Cannot use any items";
            buffName[0x18] = "On Fire!";
            buffTip[0x18] = "Slowly losing life";
            buffName[0x19] = "Tipsy";
            buffTip[0x19] = "Increased melee abilities, lowered defense";
            buffName[0x1a] = "Well Fed";
            buffTip[0x1a] = "Minor improvements to all stats";
            buffName[0x1b] = "Fairy";
            buffTip[0x1b] = "A fairy is following you";
            buffName[0x1c] = "Werewolf";
            buffTip[0x1c] = "Physical abilities are increased";
            buffName[0x1d] = "Clairvoyance";
            buffTip[0x1d] = "Magic powers are increased";
            buffName[30] = "Bleeding";
            buffTip[30] = "Cannot regenerate life";
            buffName[0x1f] = "Confused";
            buffTip[0x1f] = "Movement is reversed";
            buffName[0x20] = "Slow";
            buffTip[0x20] = "Movement speed is reduced";
            buffName[0x21] = "Weak";
            buffTip[0x21] = "Physical abilities are decreased";
            buffName[0x22] = "Merfolk";
            buffTip[0x22] = "Can breathe and move easily underwater";
            buffName[0x23] = "Silenced";
            buffTip[0x23] = "Cannot use items that require mana";
            buffName[0x24] = "Broken Armor";
            buffTip[0x24] = "Defense is cut in half";
            buffName[0x25] = "Horrified";
            buffTip[0x25] = "You have seen something nasty, there is no escape.";
            buffName[0x26] = "The Tongue";
            buffTip[0x26] = "You are being sucked into the mouth";
            buffName[0x27] = "Cursed Inferno";
            buffTip[0x27] = "Losing life";
            for (int j = 0; j < 10; j++)
            {
                recentWorld[j] = "";
                recentIP[j] = "";
                recentPort[j] = 0;
            }
            if (rand == null)
            {
                rand = new Random((int) DateTime.Now.Ticks);
            }
            if (WorldGen.genRand == null)
            {
                WorldGen.genRand = new Random((int) DateTime.Now.Ticks);
            }
            switch (rand.Next(15))
            {
                case 0:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Dig Peon, Dig!";
                    break;

                case 1:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Epic Dirt";
                    break;

                case 2:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Hey Guys!";
                    break;

                case 3:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Sand is Overpowered";
                    break;

                case 4:
                    base.Window.Title = "Terraria Part 3: The Return of the Guide";
                    break;

                case 5:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): A Bunnies Tale";
                    break;

                case 6:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Dr. Bones and The Temple of Blood Moon";
                    break;

                case 7:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Slimeassic Park";
                    break;

                case 8:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): The Grass is Greener on This Side";
                    break;

                case 9:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Small Blocks, Not for Children Under the Age of 5";
                    break;

                case 10:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Digger T' Blocks";
                    break;

                case 11:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): There is No Cow Layer";
                    break;

                case 12:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Suspicous Looking Eyeballs";
                    break;

                case 13:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Purple Grass!";
                    break;

                case 14:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Noone Dug Behind!";
                    break;

                default:
                    base.Window.Title = "Terraria (ZidoMod, by Zidonuke): Shut Up and Dig Gaiden!";
                    break;
            }
            lo = rand.Next(6);
            tileShine2[6] = true;
            tileShine2[7] = true;
            tileShine2[8] = true;
            tileShine2[9] = true;
            tileShine2[12] = true;
            tileShine2[0x15] = true;
            tileShine2[0x16] = true;
            tileShine2[0x19] = true;
            tileShine2[0x2d] = true;
            tileShine2[0x2e] = true;
            tileShine2[0x2f] = true;
            tileShine2[0x3f] = true;
            tileShine2[0x40] = true;
            tileShine2[0x41] = true;
            tileShine2[0x42] = true;
            tileShine2[0x43] = true;
            tileShine2[0x44] = true;
            tileShine2[0x6b] = true;
            tileShine2[0x6c] = true;
            tileShine2[0x6f] = true;
            tileShine2[0x79] = true;
            tileShine2[0x7a] = true;
            tileShine2[0x75] = true;
            tileShine[0x81] = 300;
            tileHammer[0x8d] = true;
            tileHammer[4] = true;
            tileHammer[10] = true;
            tileHammer[11] = true;
            tileHammer[12] = true;
            tileHammer[13] = true;
            tileHammer[14] = true;
            tileHammer[15] = true;
            tileHammer[0x10] = true;
            tileHammer[0x11] = true;
            tileHammer[0x12] = true;
            tileHammer[0x13] = true;
            tileHammer[0x15] = true;
            tileHammer[0x1a] = true;
            tileHammer[0x1c] = true;
            tileHammer[0x1d] = true;
            tileHammer[0x1f] = true;
            tileHammer[0x21] = true;
            tileHammer[0x22] = true;
            tileHammer[0x23] = true;
            tileHammer[0x24] = true;
            tileHammer[0x2a] = true;
            tileHammer[0x30] = true;
            tileHammer[0x31] = true;
            tileHammer[50] = true;
            tileHammer[0x36] = true;
            tileHammer[0x37] = true;
            tileHammer[0x4d] = true;
            tileHammer[0x4e] = true;
            tileHammer[0x4f] = true;
            tileHammer[0x51] = true;
            tileHammer[0x55] = true;
            tileHammer[0x56] = true;
            tileHammer[0x57] = true;
            tileHammer[0x58] = true;
            tileHammer[0x59] = true;
            tileHammer[90] = true;
            tileHammer[0x5b] = true;
            tileHammer[0x5c] = true;
            tileHammer[0x5d] = true;
            tileHammer[0x5e] = true;
            tileHammer[0x5f] = true;
            tileHammer[0x60] = true;
            tileHammer[0x61] = true;
            tileHammer[0x62] = true;
            tileHammer[0x63] = true;
            tileHammer[100] = true;
            tileHammer[0x65] = true;
            tileHammer[0x66] = true;
            tileHammer[0x67] = true;
            tileHammer[0x68] = true;
            tileHammer[0x69] = true;
            tileHammer[0x6a] = true;
            tileHammer[0x72] = true;
            tileHammer[0x7d] = true;
            tileHammer[0x7e] = true;
            tileHammer[0x80] = true;
            tileHammer[0x81] = true;
            tileHammer[0x84] = true;
            tileHammer[0x85] = true;
            tileHammer[0x86] = true;
            tileHammer[0x87] = true;
            tileHammer[0x88] = true;
            tileFrameImportant[0x8b] = true;
            tileHammer[0x8b] = true;
            tileFrameImportant[0x8e] = true;
            tileHammer[0x8e] = true;
            tileFrameImportant[0x8f] = true;
            tileHammer[0x8f] = true;
            tileFrameImportant[0x90] = true;
            tileHammer[0x90] = true;
            tileStone[0x83] = true;
            tileFrameImportant[0x88] = true;
            tileFrameImportant[0x89] = true;
            tileFrameImportant[0x8a] = true;
            tileBlockLight[0x89] = true;
            tileSolid[0x89] = true;
            tileBlockLight[0x8a] = true;
            tileSolid[0x8a] = true;
            tileBlockLight[140] = true;
            tileSolid[140] = true;
            tileAxe[5] = true;
            tileAxe[30] = true;
            tileAxe[0x48] = true;
            tileAxe[80] = true;
            tileAxe[0x7c] = true;
            tileShine[0x16] = 0x47e;
            tileShine[6] = 0x47e;
            tileShine[7] = 0x44c;
            tileShine[8] = 0x3e8;
            tileShine[9] = 0x41a;
            tileShine[12] = 0x3e8;
            tileShine[0x15] = 0x4b0;
            tileShine[0x3f] = 900;
            tileShine[0x40] = 900;
            tileShine[0x41] = 900;
            tileShine[0x42] = 900;
            tileShine[0x43] = 900;
            tileShine[0x44] = 900;
            tileShine[0x2d] = 0x76c;
            tileShine[0x2e] = 0x7d0;
            tileShine[0x2f] = 0x834;
            tileShine[0x7a] = 0x708;
            tileShine[0x79] = 0x73a;
            tileShine[0x7d] = 600;
            tileShine[0x6d] = 0x2328;
            tileShine[110] = 0x2328;
            tileShine[0x74] = 0x2328;
            tileShine[0x75] = 0x2328;
            tileShine[0x76] = 0x1f40;
            tileShine[0x6b] = 950;
            tileShine[0x6c] = 900;
            tileShine[0x6f] = 850;
            tileLighted[4] = true;
            tileLighted[0x11] = true;
            tileLighted[0x85] = true;
            tileLighted[0x1f] = true;
            tileLighted[0x21] = true;
            tileLighted[0x22] = true;
            tileLighted[0x23] = true;
            tileLighted[0x24] = true;
            tileLighted[0x25] = true;
            tileLighted[0x2a] = true;
            tileLighted[0x31] = true;
            tileLighted[0x3a] = true;
            tileLighted[0x3d] = true;
            tileLighted[70] = true;
            tileLighted[0x47] = true;
            tileLighted[0x48] = true;
            tileLighted[0x4c] = true;
            tileLighted[0x4d] = true;
            tileLighted[0x13] = true;
            tileLighted[0x16] = true;
            tileLighted[0x1a] = true;
            tileLighted[0x53] = true;
            tileLighted[0x54] = true;
            tileLighted[0x5c] = true;
            tileLighted[0x5d] = true;
            tileLighted[0x5f] = true;
            tileLighted[0x62] = true;
            tileLighted[100] = true;
            tileLighted[0x6d] = true;
            tileLighted[0x7d] = true;
            tileLighted[0x7e] = true;
            tileLighted[0x81] = true;
            tileLighted[140] = true;
            tileMergeDirt[1] = true;
            tileMergeDirt[6] = true;
            tileMergeDirt[7] = true;
            tileMergeDirt[8] = true;
            tileMergeDirt[9] = true;
            tileMergeDirt[0x16] = true;
            tileMergeDirt[0x19] = true;
            tileMergeDirt[30] = true;
            tileMergeDirt[0x25] = true;
            tileMergeDirt[0x26] = true;
            tileMergeDirt[40] = true;
            tileMergeDirt[0x35] = true;
            tileMergeDirt[0x38] = true;
            tileMergeDirt[0x6b] = true;
            tileMergeDirt[0x6c] = true;
            tileMergeDirt[0x6f] = true;
            tileMergeDirt[0x70] = true;
            tileMergeDirt[0x74] = true;
            tileMergeDirt[0x75] = true;
            tileMergeDirt[0x7b] = true;
            tileMergeDirt[140] = true;
            tileMergeDirt[0x27] = true;
            tileMergeDirt[0x7a] = true;
            tileMergeDirt[0x79] = true;
            tileMergeDirt[120] = true;
            tileMergeDirt[0x77] = true;
            tileMergeDirt[0x76] = true;
            tileMergeDirt[0x2f] = true;
            tileMergeDirt[0x2e] = true;
            tileMergeDirt[0x2d] = true;
            tileMergeDirt[0x2c] = true;
            tileMergeDirt[0x2b] = true;
            tileMergeDirt[0x29] = true;
            tileFrameImportant[3] = true;
            tileFrameImportant[4] = true;
            tileFrameImportant[5] = true;
            tileFrameImportant[10] = true;
            tileFrameImportant[11] = true;
            tileFrameImportant[12] = true;
            tileFrameImportant[13] = true;
            tileFrameImportant[14] = true;
            tileFrameImportant[15] = true;
            tileFrameImportant[0x10] = true;
            tileFrameImportant[0x11] = true;
            tileFrameImportant[0x12] = true;
            tileFrameImportant[20] = true;
            tileFrameImportant[0x15] = true;
            tileFrameImportant[0x18] = true;
            tileFrameImportant[0x1a] = true;
            tileFrameImportant[0x1b] = true;
            tileFrameImportant[0x1c] = true;
            tileFrameImportant[0x1d] = true;
            tileFrameImportant[0x1f] = true;
            tileFrameImportant[0x21] = true;
            tileFrameImportant[0x22] = true;
            tileFrameImportant[0x23] = true;
            tileFrameImportant[0x24] = true;
            tileFrameImportant[0x2a] = true;
            tileFrameImportant[50] = true;
            tileFrameImportant[0x37] = true;
            tileFrameImportant[0x3d] = true;
            tileFrameImportant[0x47] = true;
            tileFrameImportant[0x48] = true;
            tileFrameImportant[0x49] = true;
            tileFrameImportant[0x4a] = true;
            tileFrameImportant[0x4d] = true;
            tileFrameImportant[0x4e] = true;
            tileFrameImportant[0x4f] = true;
            tileFrameImportant[0x51] = true;
            tileFrameImportant[0x52] = true;
            tileFrameImportant[0x53] = true;
            tileFrameImportant[0x54] = true;
            tileFrameImportant[0x55] = true;
            tileFrameImportant[0x56] = true;
            tileFrameImportant[0x57] = true;
            tileFrameImportant[0x58] = true;
            tileFrameImportant[0x59] = true;
            tileFrameImportant[90] = true;
            tileFrameImportant[0x5b] = true;
            tileFrameImportant[0x5c] = true;
            tileFrameImportant[0x5d] = true;
            tileFrameImportant[0x5e] = true;
            tileFrameImportant[0x5f] = true;
            tileFrameImportant[0x60] = true;
            tileFrameImportant[0x61] = true;
            tileFrameImportant[0x62] = true;
            tileFrameImportant[0x63] = true;
            tileFrameImportant[0x65] = true;
            tileFrameImportant[0x66] = true;
            tileFrameImportant[0x67] = true;
            tileFrameImportant[0x68] = true;
            tileFrameImportant[0x69] = true;
            tileFrameImportant[100] = true;
            tileFrameImportant[0x6a] = true;
            tileFrameImportant[110] = true;
            tileFrameImportant[0x71] = true;
            tileFrameImportant[0x72] = true;
            tileFrameImportant[0x7d] = true;
            tileFrameImportant[0x7e] = true;
            tileFrameImportant[0x80] = true;
            tileFrameImportant[0x81] = true;
            tileFrameImportant[0x84] = true;
            tileFrameImportant[0x85] = true;
            tileFrameImportant[0x86] = true;
            tileFrameImportant[0x87] = true;
            tileFrameImportant[0x8d] = true;
            tileCut[3] = true;
            tileCut[0x18] = true;
            tileCut[0x1c] = true;
            tileCut[0x20] = true;
            tileCut[0x33] = true;
            tileCut[0x34] = true;
            tileCut[0x3d] = true;
            tileCut[0x3e] = true;
            tileCut[0x45] = true;
            tileCut[0x47] = true;
            tileCut[0x49] = true;
            tileCut[0x4a] = true;
            tileCut[0x52] = true;
            tileCut[0x53] = true;
            tileCut[0x54] = true;
            tileCut[110] = true;
            tileCut[0x71] = true;
            tileCut[0x73] = true;
            tileAlch[0x52] = true;
            tileAlch[0x53] = true;
            tileAlch[0x54] = true;
            tileLavaDeath[0x68] = true;
            tileLavaDeath[110] = true;
            tileLavaDeath[0x71] = true;
            tileLavaDeath[0x73] = true;
            tileSolid[0x7f] = true;
            tileSolid[130] = true;
            tileBlockLight[130] = true;
            tileBlockLight[0x83] = true;
            tileSolid[0x6b] = true;
            tileBlockLight[0x6b] = true;
            tileSolid[0x6c] = true;
            tileBlockLight[0x6c] = true;
            tileSolid[0x6f] = true;
            tileBlockLight[0x6f] = true;
            tileSolid[0x6d] = true;
            tileBlockLight[0x6d] = true;
            tileSolid[110] = false;
            tileNoAttach[110] = true;
            tileNoFail[110] = true;
            tileSolid[0x70] = true;
            tileBlockLight[0x70] = true;
            tileSolid[0x74] = true;
            tileBlockLight[0x74] = true;
            tileSolid[0x75] = true;
            tileBlockLight[0x75] = true;
            tileSolid[0x7b] = true;
            tileBlockLight[0x7b] = true;
            tileSolid[0x76] = true;
            tileBlockLight[0x76] = true;
            tileSolid[0x77] = true;
            tileBlockLight[0x77] = true;
            tileSolid[120] = true;
            tileBlockLight[120] = true;
            tileSolid[0x79] = true;
            tileBlockLight[0x79] = true;
            tileSolid[0x7a] = true;
            tileBlockLight[0x7a] = true;
            tileBlockLight[0x73] = true;
            tileSolid[0] = true;
            tileBlockLight[0] = true;
            tileSolid[1] = true;
            tileBlockLight[1] = true;
            tileSolid[2] = true;
            tileBlockLight[2] = true;
            tileSolid[3] = false;
            tileNoAttach[3] = true;
            tileNoFail[3] = true;
            tileSolid[4] = false;
            tileNoAttach[4] = true;
            tileNoFail[4] = true;
            tileNoFail[0x18] = true;
            tileSolid[5] = false;
            tileSolid[6] = true;
            tileBlockLight[6] = true;
            tileSolid[7] = true;
            tileBlockLight[7] = true;
            tileSolid[8] = true;
            tileBlockLight[8] = true;
            tileSolid[9] = true;
            tileBlockLight[9] = true;
            tileBlockLight[10] = true;
            tileSolid[10] = true;
            tileNoAttach[10] = true;
            tileBlockLight[10] = true;
            tileSolid[11] = false;
            tileSolidTop[0x13] = true;
            tileSolid[0x13] = true;
            tileSolid[0x16] = true;
            tileSolid[0x17] = true;
            tileSolid[0x19] = true;
            tileSolid[30] = true;
            tileNoFail[0x20] = true;
            tileBlockLight[0x20] = true;
            tileSolid[0x25] = true;
            tileBlockLight[0x25] = true;
            tileSolid[0x26] = true;
            tileBlockLight[0x26] = true;
            tileSolid[0x27] = true;
            tileBlockLight[0x27] = true;
            tileSolid[40] = true;
            tileBlockLight[40] = true;
            tileSolid[0x29] = true;
            tileBlockLight[0x29] = true;
            tileSolid[0x2b] = true;
            tileBlockLight[0x2b] = true;
            tileSolid[0x2c] = true;
            tileBlockLight[0x2c] = true;
            tileSolid[0x2d] = true;
            tileBlockLight[0x2d] = true;
            tileSolid[0x2e] = true;
            tileBlockLight[0x2e] = true;
            tileSolid[0x2f] = true;
            tileBlockLight[0x2f] = true;
            tileSolid[0x30] = true;
            tileBlockLight[0x30] = true;
            tileSolid[0x35] = true;
            tileBlockLight[0x35] = true;
            tileSolid[0x36] = true;
            tileBlockLight[0x34] = true;
            tileSolid[0x38] = true;
            tileBlockLight[0x38] = true;
            tileSolid[0x39] = true;
            tileBlockLight[0x39] = true;
            tileSolid[0x3a] = true;
            tileBlockLight[0x3a] = true;
            tileSolid[0x3b] = true;
            tileBlockLight[0x3b] = true;
            tileSolid[60] = true;
            tileBlockLight[60] = true;
            tileSolid[0x3f] = true;
            tileBlockLight[0x3f] = true;
            tileStone[0x3f] = true;
            tileStone[130] = true;
            tileSolid[0x40] = true;
            tileBlockLight[0x40] = true;
            tileStone[0x40] = true;
            tileSolid[0x41] = true;
            tileBlockLight[0x41] = true;
            tileStone[0x41] = true;
            tileSolid[0x42] = true;
            tileBlockLight[0x42] = true;
            tileStone[0x42] = true;
            tileSolid[0x43] = true;
            tileBlockLight[0x43] = true;
            tileStone[0x43] = true;
            tileSolid[0x44] = true;
            tileBlockLight[0x44] = true;
            tileStone[0x44] = true;
            tileSolid[0x4b] = true;
            tileBlockLight[0x4b] = true;
            tileSolid[0x4c] = true;
            tileBlockLight[0x4c] = true;
            tileSolid[70] = true;
            tileBlockLight[70] = true;
            tileNoFail[50] = true;
            tileNoAttach[50] = true;
            tileDungeon[0x29] = true;
            tileDungeon[0x2b] = true;
            tileDungeon[0x2c] = true;
            tileBlockLight[30] = true;
            tileBlockLight[0x19] = true;
            tileBlockLight[0x17] = true;
            tileBlockLight[0x16] = true;
            tileBlockLight[0x3e] = true;
            tileSolidTop[0x12] = true;
            tileSolidTop[14] = true;
            tileSolidTop[0x10] = true;
            tileSolidTop[0x72] = true;
            tileNoAttach[20] = true;
            tileNoAttach[0x13] = true;
            tileNoAttach[13] = true;
            tileNoAttach[14] = true;
            tileNoAttach[15] = true;
            tileNoAttach[0x10] = true;
            tileNoAttach[0x11] = true;
            tileNoAttach[0x12] = true;
            tileNoAttach[0x13] = true;
            tileNoAttach[0x15] = true;
            tileNoAttach[0x1b] = true;
            tileNoAttach[0x72] = true;
            tileTable[14] = true;
            tileTable[0x12] = true;
            tileTable[0x13] = true;
            tileTable[0x72] = true;
            tileNoAttach[0x56] = true;
            tileNoAttach[0x57] = true;
            tileNoAttach[0x58] = true;
            tileNoAttach[0x59] = true;
            tileNoAttach[90] = true;
            tileLavaDeath[0x56] = true;
            tileLavaDeath[0x57] = true;
            tileLavaDeath[0x58] = true;
            tileLavaDeath[0x59] = true;
            tileLavaDeath[0x7d] = true;
            tileLavaDeath[0x7e] = true;
            tileLavaDeath[0x65] = true;
            tileTable[0x65] = true;
            tileNoAttach[0x65] = true;
            tileLavaDeath[0x66] = true;
            tileNoAttach[0x66] = true;
            tileNoAttach[0x5e] = true;
            tileNoAttach[0x5f] = true;
            tileNoAttach[0x60] = true;
            tileNoAttach[0x61] = true;
            tileNoAttach[0x62] = true;
            tileNoAttach[0x63] = true;
            tileLavaDeath[0x5e] = true;
            tileLavaDeath[0x5f] = true;
            tileLavaDeath[0x60] = true;
            tileLavaDeath[0x61] = true;
            tileLavaDeath[0x62] = true;
            tileLavaDeath[0x63] = true;
            tileLavaDeath[100] = true;
            tileLavaDeath[0x67] = true;
            tileTable[0x57] = true;
            tileTable[0x58] = true;
            tileSolidTop[0x57] = true;
            tileSolidTop[0x58] = true;
            tileSolidTop[0x65] = true;
            tileNoAttach[0x5b] = true;
            tileLavaDeath[0x5b] = true;
            tileNoAttach[0x5c] = true;
            tileLavaDeath[0x5c] = true;
            tileNoAttach[0x5d] = true;
            tileLavaDeath[0x5d] = true;
            tileWaterDeath[4] = true;
            tileWaterDeath[0x33] = true;
            tileWaterDeath[0x5d] = true;
            tileWaterDeath[0x62] = true;
            tileLavaDeath[3] = true;
            tileLavaDeath[5] = true;
            tileLavaDeath[10] = true;
            tileLavaDeath[11] = true;
            tileLavaDeath[12] = true;
            tileLavaDeath[13] = true;
            tileLavaDeath[14] = true;
            tileLavaDeath[15] = true;
            tileLavaDeath[0x10] = true;
            tileLavaDeath[0x11] = true;
            tileLavaDeath[0x12] = true;
            tileLavaDeath[0x13] = true;
            tileLavaDeath[20] = true;
            tileLavaDeath[0x1b] = true;
            tileLavaDeath[0x1c] = true;
            tileLavaDeath[0x1d] = true;
            tileLavaDeath[0x20] = true;
            tileLavaDeath[0x21] = true;
            tileLavaDeath[0x22] = true;
            tileLavaDeath[0x23] = true;
            tileLavaDeath[0x24] = true;
            tileLavaDeath[0x2a] = true;
            tileLavaDeath[0x31] = true;
            tileLavaDeath[50] = true;
            tileLavaDeath[0x34] = true;
            tileLavaDeath[0x37] = true;
            tileLavaDeath[0x3d] = true;
            tileLavaDeath[0x3e] = true;
            tileLavaDeath[0x45] = true;
            tileLavaDeath[0x47] = true;
            tileLavaDeath[0x48] = true;
            tileLavaDeath[0x49] = true;
            tileLavaDeath[0x4a] = true;
            tileLavaDeath[0x4f] = true;
            tileLavaDeath[80] = true;
            tileLavaDeath[0x51] = true;
            tileLavaDeath[0x6a] = true;
            wallHouse[1] = true;
            wallHouse[4] = true;
            wallHouse[5] = true;
            wallHouse[6] = true;
            wallHouse[10] = true;
            wallHouse[11] = true;
            wallHouse[12] = true;
            wallHouse[0x10] = true;
            wallHouse[0x11] = true;
            wallHouse[0x12] = true;
            wallHouse[0x13] = true;
            wallHouse[20] = true;
            wallHouse[0x15] = true;
            wallHouse[0x16] = true;
            wallHouse[0x17] = true;
            wallHouse[0x18] = true;
            wallHouse[0x19] = true;
            wallHouse[0x1a] = true;
            wallHouse[0x1b] = true;
            for (int k = 0; k < 0x1d; k++)
            {
                switch (k)
                {
                    case 20:
                        wallBlend[k] = 14;
                        break;

                    case 0x13:
                        wallBlend[k] = 9;
                        break;

                    case 0x12:
                        wallBlend[k] = 8;
                        break;

                    case 0x11:
                        wallBlend[k] = 7;
                        break;

                    case 0x10:
                        wallBlend[k] = 2;
                        break;

                    default:
                        wallBlend[k] = k;
                        break;
                }
            }
            tileNoFail[0x20] = true;
            tileNoFail[0x3d] = true;
            tileNoFail[0x45] = true;
            tileNoFail[0x49] = true;
            tileNoFail[0x4a] = true;
            tileNoFail[0x52] = true;
            tileNoFail[0x53] = true;
            tileNoFail[0x54] = true;
            tileNoFail[110] = true;
            tileNoFail[0x71] = true;
            for (int m = 0; m < 0x91; m++)
            {
                tileName[m] = "";
                if (tileSolid[m])
                {
                    tileNoSunLight[m] = true;
                }
            }
            tileNoSunLight[0x13] = false;
            tileNoSunLight[11] = true;
            tileName[13] = "Bottle";
            tileName[14] = "Table";
            tileName[15] = "Chair";
            tileName[0x10] = "Anvil";
            tileName[0x11] = "Furnace";
            tileName[0x12] = "Workbench";
            tileName[0x1a] = "Demon Altar";
            tileName[0x4d] = "Hellforge";
            tileName[0x56] = "Loom";
            tileName[0x5e] = "Keg";
            tileName[0x60] = "Cooking Pot";
            tileName[0x65] = "Bookcase";
            tileName[0x6a] = "Sawmill";
            tileName[0x72] = "Tinkerer's Workshop";
            tileName[0x85] = "Adamantite Forge";
            tileName[0x86] = "Mythril Anvil";
            for (int n = 0; n < maxMenuItems; n++)
            {
                this.menuItemScale[n] = 0.8f;
            }
            for (int num7 = 0; num7 < 0x7d1; num7++)
            {
                dust[num7] = new Dust();
            }
            for (int num8 = 0; num8 < 0xc9; num8++)
            {
                Main.item[num8] = new Item();
            }
            for (int num9 = 0; num9 < 0xc9; num9++)
            {
                npc[num9] = new NPC();
                npc[num9].whoAmI = num9;
            }
            for (int num10 = 0; num10 < 0x100; num10++)
            {
                player[num10] = new Player();
            }
            for (int num11 = 0; num11 < 0x3e9; num11++)
            {
                projectile[num11] = new Projectile();
            }
            for (int num12 = 0; num12 < 0xc9; num12++)
            {
                gore[num12] = new Gore();
            }
            for (int num13 = 0; num13 < 100; num13++)
            {
                cloud[num13] = new Cloud();
            }
            for (int num14 = 0; num14 < 100; num14++)
            {
                combatText[num14] = new CombatText();
            }
            for (int num15 = 0; num15 < 20; num15++)
            {
                itemText[num15] = new ItemText();
            }
            for (int num16 = 0; num16 < 0x24a; num16++)
            {
                Item item = new Item();
                item.SetDefaults(num16, false);
                itemName[num16] = item.name;
                if (item.headSlot > 0)
                {
                    Item.headType[item.headSlot] = item.type;
                }
                if (item.bodySlot > 0)
                {
                    Item.bodyType[item.bodySlot] = item.type;
                }
                if (item.legSlot > 0)
                {
                    Item.legType[item.legSlot] = item.type;
                }
            }
            for (int num17 = 0; num17 < Recipe.maxRecipes; num17++)
            {
                recipe[num17] = new Recipe();
                availableRecipeY[num17] = 0x41 * num17;
            }
            Recipe.SetupRecipes();
            for (int num18 = 0; num18 < numChatLines; num18++)
            {
                chatLine[num18] = new ChatLine();
            }
            for (int num19 = 0; num19 < Liquid.resLiquid; num19++)
            {
                liquid[num19] = new Liquid();
            }
            for (int num20 = 0; num20 < 0x2710; num20++)
            {
                liquidBuffer[num20] = new LiquidBuffer();
            }
            this.shop[0] = new Chest();
            this.shop[1] = new Chest();
            this.shop[1].SetupShop(1);
            this.shop[2] = new Chest();
            this.shop[2].SetupShop(2);
            this.shop[3] = new Chest();
            this.shop[3].SetupShop(3);
            this.shop[4] = new Chest();
            this.shop[4].SetupShop(4);
            this.shop[5] = new Chest();
            this.shop[5].SetupShop(5);
            this.shop[6] = new Chest();
            this.shop[6].SetupShop(6);
            this.shop[7] = new Chest();
            this.shop[7].SetupShop(7);
            this.shop[8] = new Chest();
            this.shop[8].SetupShop(8);
            teamColor[0] = Color.White;
            teamColor[1] = new Color(230, 40, 20);
            teamColor[2] = new Color(20, 200, 30);
            teamColor[3] = new Color(0x4b, 90, 0xff);
            teamColor[4] = new Color(200, 180, 0);
            if (menuMode == 1)
            {
                LoadPlayers();
            }
            Netplay.Init();
            if (skipMenu)
            {
                WorldGen.clearWorld();
                gameMenu = false;
                LoadPlayers();
                player[myPlayer] = (Player) loadPlayer[0].Clone();
                PlayerPath = loadPlayerPath[0];
                LoadWorlds();
                WorldGen.generateWorld(-1);
                WorldGen.EveryTileFrame();
                player[myPlayer].Spawn();
            }
            else
            {
                IntPtr systemMenu = GetSystemMenu(base.Window.Handle, false);
                int menuItemCount = GetMenuItemCount(systemMenu);
                RemoveMenu(systemMenu, menuItemCount - 1, 0x400);
            }
            if (!dedServ)
            {
                this.graphics.PreferredBackBufferWidth = screenWidth;
                this.graphics.PreferredBackBufferHeight = screenHeight;
                this.graphics.ApplyChanges();
                base.Initialize();
                base.Window.AllowUserResizing = true;
                this.OpenSettings();
                this.loadBindings();//BlueFly
                this.OpenZidoSettings();//BlueFly
                this.OpenRecent();
                Star.SpawnStars();
                foreach (DisplayMode mode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
                {
                    if (((mode.Width < minScreenW) || (mode.Height < minScreenH)) || ((mode.Width > maxScreenW) || (mode.Height > maxScreenH)))
                    {
                        continue;
                    }
                    bool flag = true;
                    for (int num22 = 0; num22 < this.numDisplayModes; num22++)
                    {
                        if ((mode.Width == this.displayWidth[num22]) && (mode.Height == this.displayHeight[num22]))
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        this.displayHeight[this.numDisplayModes] = mode.Height;
                        this.displayWidth[this.numDisplayModes] = mode.Width;
                        this.numDisplayModes++;
                    }
                }
                if (autoJoin)
                {
                    LoadPlayers();
                    menuMode = 1;
                    menuMultiplayer = true;
                }
                fpsTimer.Start();
                updateTimer.Start();
            }
        }

        protected void InitTargets()
        {
            if (!dedServ)
            {
                offScreenRange = 0xc0;
                targetSet = true;
                if ((base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2)) > 0x800)
                {
                    offScreenRange = (0x800 - base.GraphicsDevice.PresentationParameters.BackBufferWidth) / 2;
                }
                this.waterTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2), base.GraphicsDevice.PresentationParameters.BackBufferHeight + (offScreenRange * 2), false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                this.backWaterTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2), base.GraphicsDevice.PresentationParameters.BackBufferHeight + (offScreenRange * 2), false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                this.blackTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2), base.GraphicsDevice.PresentationParameters.BackBufferHeight + (offScreenRange * 2), false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                this.tileTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2), base.GraphicsDevice.PresentationParameters.BackBufferHeight + (offScreenRange * 2), false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                this.tile2Target = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2), base.GraphicsDevice.PresentationParameters.BackBufferHeight + (offScreenRange * 2), false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                this.wallTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2), base.GraphicsDevice.PresentationParameters.BackBufferHeight + (offScreenRange * 2), false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                this.backgroundTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + (offScreenRange * 2), base.GraphicsDevice.PresentationParameters.BackBufferHeight + (offScreenRange * 2), false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
            }
        }

        private static void InvasionWarning()
        {
            string newText = "";
            if (invasionSize <= 0)
            {
                newText = "The goblin army has been defeated!";
            }
            else if (invasionX < spawnTileX)
            {
                newText = "A goblin army is approaching from the west!";
            }
            else if (invasionX > spawnTileX)
            {
                newText = "A goblin army is approaching from the east!";
            }
            else
            {
                newText = "The goblin army has arrived!";
            }
            if (netMode == 0)
            {
                NewText(newText, 0xaf, 0x4b, 0xff);
            }
            else if (netMode == 2)
            {
                NetMessage.SendData(0x19, -1, -1, newText, 0xff, 175f, 75f, 255f, 0);
            }
        }

        protected override void LoadContent()
        {
            try
            {
                engine = new AudioEngine(@"Content\TerrariaMusic.xgs");
                soundBank = new Microsoft.Xna.Framework.Audio.SoundBank(engine, @"Content\Sound Bank.xsb");
                waveBank = new Microsoft.Xna.Framework.Audio.WaveBank(engine, @"Content\Wave Bank.xwb");
                for (int num = 1; num < 14; num++)
                {
                    music[num] = soundBank.GetCue("Music_" + num);
                }
                soundMech[0] = base.Content.Load<SoundEffect>(@"Sounds\Mech_0");
                soundInstanceMech[0] = soundMech[0].CreateInstance();
                soundGrab = base.Content.Load<SoundEffect>(@"Sounds\Grab");
                soundInstanceGrab = soundGrab.CreateInstance();
                soundPixie = base.Content.Load<SoundEffect>(@"Sounds\Pixie");
                soundInstancePixie = soundGrab.CreateInstance();
                soundDig[0] = base.Content.Load<SoundEffect>(@"Sounds\Dig_0");
                soundInstanceDig[0] = soundDig[0].CreateInstance();
                soundDig[1] = base.Content.Load<SoundEffect>(@"Sounds\Dig_1");
                soundInstanceDig[1] = soundDig[1].CreateInstance();
                soundDig[2] = base.Content.Load<SoundEffect>(@"Sounds\Dig_2");
                soundInstanceDig[2] = soundDig[2].CreateInstance();
                soundTink[0] = base.Content.Load<SoundEffect>(@"Sounds\Tink_0");
                soundInstanceTink[0] = soundTink[0].CreateInstance();
                soundTink[1] = base.Content.Load<SoundEffect>(@"Sounds\Tink_1");
                soundInstanceTink[1] = soundTink[1].CreateInstance();
                soundTink[2] = base.Content.Load<SoundEffect>(@"Sounds\Tink_2");
                soundInstanceTink[2] = soundTink[2].CreateInstance();
                soundPlayerHit[0] = base.Content.Load<SoundEffect>(@"Sounds\Player_Hit_0");
                soundInstancePlayerHit[0] = soundPlayerHit[0].CreateInstance();
                soundPlayerHit[1] = base.Content.Load<SoundEffect>(@"Sounds\Player_Hit_1");
                soundInstancePlayerHit[1] = soundPlayerHit[1].CreateInstance();
                soundPlayerHit[2] = base.Content.Load<SoundEffect>(@"Sounds\Player_Hit_2");
                soundInstancePlayerHit[2] = soundPlayerHit[2].CreateInstance();
                soundFemaleHit[0] = base.Content.Load<SoundEffect>(@"Sounds\Female_Hit_0");
                soundInstanceFemaleHit[0] = soundFemaleHit[0].CreateInstance();
                soundFemaleHit[1] = base.Content.Load<SoundEffect>(@"Sounds\Female_Hit_1");
                soundInstanceFemaleHit[1] = soundFemaleHit[1].CreateInstance();
                soundFemaleHit[2] = base.Content.Load<SoundEffect>(@"Sounds\Female_Hit_2");
                soundInstanceFemaleHit[2] = soundFemaleHit[2].CreateInstance();
                soundPlayerKilled = base.Content.Load<SoundEffect>(@"Sounds\Player_Killed");
                soundInstancePlayerKilled = soundPlayerKilled.CreateInstance();
                soundChat = base.Content.Load<SoundEffect>(@"Sounds\Chat");
                soundInstanceChat = soundChat.CreateInstance();
                soundGrass = base.Content.Load<SoundEffect>(@"Sounds\Grass");
                soundInstanceGrass = soundGrass.CreateInstance();
                soundDoorOpen = base.Content.Load<SoundEffect>(@"Sounds\Door_Opened");
                soundInstanceDoorOpen = soundDoorOpen.CreateInstance();
                soundDoorClosed = base.Content.Load<SoundEffect>(@"Sounds\Door_Closed");
                soundInstanceDoorClosed = soundDoorClosed.CreateInstance();
                soundMenuTick = base.Content.Load<SoundEffect>(@"Sounds\Menu_Tick");
                soundInstanceMenuTick = soundMenuTick.CreateInstance();
                soundMenuOpen = base.Content.Load<SoundEffect>(@"Sounds\Menu_Open");
                soundInstanceMenuOpen = soundMenuOpen.CreateInstance();
                soundMenuClose = base.Content.Load<SoundEffect>(@"Sounds\Menu_Close");
                soundInstanceMenuClose = soundMenuClose.CreateInstance();
                soundShatter = base.Content.Load<SoundEffect>(@"Sounds\Shatter");
                soundInstanceShatter = soundShatter.CreateInstance();
                soundZombie[0] = base.Content.Load<SoundEffect>(@"Sounds\Zombie_0");
                soundInstanceZombie[0] = soundZombie[0].CreateInstance();
                soundZombie[1] = base.Content.Load<SoundEffect>(@"Sounds\Zombie_1");
                soundInstanceZombie[1] = soundZombie[1].CreateInstance();
                soundZombie[2] = base.Content.Load<SoundEffect>(@"Sounds\Zombie_2");
                soundInstanceZombie[2] = soundZombie[2].CreateInstance();
                soundZombie[3] = base.Content.Load<SoundEffect>(@"Sounds\Zombie_3");
                soundInstanceZombie[3] = soundZombie[3].CreateInstance();
                soundZombie[4] = base.Content.Load<SoundEffect>(@"Sounds\Zombie_4");
                soundInstanceZombie[4] = soundZombie[4].CreateInstance();
                soundRoar[0] = base.Content.Load<SoundEffect>(@"Sounds\Roar_0");
                soundInstanceRoar[0] = soundRoar[0].CreateInstance();
                soundRoar[1] = base.Content.Load<SoundEffect>(@"Sounds\Roar_1");
                soundInstanceRoar[1] = soundRoar[1].CreateInstance();
                soundSplash[0] = base.Content.Load<SoundEffect>(@"Sounds\Splash_0");
                soundInstanceSplash[0] = soundRoar[0].CreateInstance();
                soundSplash[1] = base.Content.Load<SoundEffect>(@"Sounds\Splash_1");
                soundInstanceSplash[1] = soundSplash[1].CreateInstance();
                soundDoubleJump = base.Content.Load<SoundEffect>(@"Sounds\Double_Jump");
                soundInstanceDoubleJump = soundRoar[0].CreateInstance();
                soundRun = base.Content.Load<SoundEffect>(@"Sounds\Run");
                soundInstanceRun = soundRun.CreateInstance();
                soundCoins = base.Content.Load<SoundEffect>(@"Sounds\Coins");
                soundInstanceCoins = soundCoins.CreateInstance();
                soundUnlock = base.Content.Load<SoundEffect>(@"Sounds\Unlock");
                soundInstanceUnlock = soundUnlock.CreateInstance();
                soundMaxMana = base.Content.Load<SoundEffect>(@"Sounds\MaxMana");
                soundInstanceMaxMana = soundMaxMana.CreateInstance();
                soundDrown = base.Content.Load<SoundEffect>(@"Sounds\Drown");
                soundInstanceDrown = soundDrown.CreateInstance();
                for (int num2 = 1; num2 < 0x26; num2++)
                {
                    soundItem[num2] = base.Content.Load<SoundEffect>(@"Sounds\Item_" + num2);
                    soundInstanceItem[num2] = soundItem[num2].CreateInstance();
                }
                for (int num3 = 1; num3 < 11; num3++)
                {
                    soundNPCHit[num3] = base.Content.Load<SoundEffect>(@"Sounds\NPC_Hit_" + num3);
                    soundInstanceNPCHit[num3] = soundNPCHit[num3].CreateInstance();
                }
                for (int num4 = 1; num4 < 15; num4++)
                {
                    soundNPCKilled[num4] = base.Content.Load<SoundEffect>(@"Sounds\NPC_Killed_" + num4);
                    soundInstanceNPCKilled[num4] = soundNPCKilled[num4].CreateInstance();
                }
            }
            catch
            {
                musicVolume = 0f;
                soundVolume = 0f;
            }
            reforgeTexture = base.Content.Load<Texture2D>(@"Images\Reforge");
            timerTexture = base.Content.Load<Texture2D>(@"Images\Timer");
            wofTexture = base.Content.Load<Texture2D>(@"Images\WallOfFlesh");
            wallOutlineTexture = base.Content.Load<Texture2D>(@"Images\Wall_Outline");
            raTexture = base.Content.Load<Texture2D>(@"Images\ra-logo");
            reTexture = base.Content.Load<Texture2D>(@"Images\re-logo");
            splashTexture = base.Content.Load<Texture2D>(@"Images\splash");
            fadeTexture = base.Content.Load<Texture2D>(@"Images\fade-out");
            ghostTexture = base.Content.Load<Texture2D>(@"Images\Ghost");
            evilCactusTexture = base.Content.Load<Texture2D>(@"Images\Evil_Cactus");
            goodCactusTexture = base.Content.Load<Texture2D>(@"Images\Good_Cactus");
            wraithEyeTexture = base.Content.Load<Texture2D>(@"Images\Wraith_Eyes");
            MusicBoxTexture = base.Content.Load<Texture2D>(@"Images\Music_Box");
            wingsTexture[1] = base.Content.Load<Texture2D>(@"Images\Wings_1");
            wingsTexture[2] = base.Content.Load<Texture2D>(@"Images\Wings_2");
            destTexture[0] = base.Content.Load<Texture2D>(@"Images\Dest1");
            destTexture[1] = base.Content.Load<Texture2D>(@"Images\Dest2");
            destTexture[2] = base.Content.Load<Texture2D>(@"Images\Dest3");
            wireTexture = base.Content.Load<Texture2D>(@"Images\Wires");
            for (int i = 0; i < 6; i++)
            {
                loTexture[i] = base.Content.Load<Texture2D>(@"Images\logo_" + (i + 1));
            }
            this.spriteBatch = new SpriteBatch(base.GraphicsDevice);
            for (int j = 1; j < 2; j++)
            {
                bannerTexture[j] = base.Content.Load<Texture2D>(@"Images\House_Banner_" + j);
            }
            for (int k = 0; k < 11; k++)
            {
                npcHeadTexture[k] = base.Content.Load<Texture2D>(@"Images\NPC_Head_" + k);
            }
            for (int m = 0; m < 0x91; m++)
            {
                tileTexture[m] = base.Content.Load<Texture2D>(@"Images\Tiles_" + m);
            }
            for (int n = 1; n < 0x1d; n++)
            {
                wallTexture[n] = base.Content.Load<Texture2D>(@"Images\Wall_" + n);
            }
            for (int num10 = 1; num10 < 40; num10++)
            {
                buffTexture[num10] = base.Content.Load<Texture2D>(@"Images\Buff_" + num10);
            }
            for (int num11 = 0; num11 < 0x20; num11++)
            {
                backgroundTexture[num11] = base.Content.Load<Texture2D>(@"Images\Background_" + num11);
                backgroundWidth[num11] = backgroundTexture[num11].Width;
                backgroundHeight[num11] = backgroundTexture[num11].Height;
            }
            for (int num12 = 0; num12 < 0x24a; num12++)
            {
                itemTexture[num12] = base.Content.Load<Texture2D>(@"Images\Item_" + num12);
            }
            for (int num13 = 0; num13 < 0x8e; num13++)
            {
                npcTexture[num13] = base.Content.Load<Texture2D>(@"Images\NPC_" + num13);
            }
            for (int num14 = 0; num14 < 0x8e; num14++)
            {
                NPC npc = new NPC();
                npc.SetDefaults(num14, -1f);
                npcName[num14] = npc.name;
            }
            for (int num15 = 0; num15 < 0x6d; num15++)
            {
                projectileTexture[num15] = base.Content.Load<Texture2D>(@"Images\Projectile_" + num15);
            }
            for (int num16 = 1; num16 < 0x9d; num16++)
            {
                goreTexture[num16] = base.Content.Load<Texture2D>(@"Images\Gore_" + num16);
            }
            for (int num17 = 0; num17 < 4; num17++)
            {
                cloudTexture[num17] = base.Content.Load<Texture2D>(@"Images\Cloud_" + num17);
            }
            for (int num18 = 0; num18 < 5; num18++)
            {
                starTexture[num18] = base.Content.Load<Texture2D>(@"Images\Star_" + num18);
            }
            for (int num19 = 0; num19 < 2; num19++)
            {
                liquidTexture[num19] = base.Content.Load<Texture2D>(@"Images\Liquid_" + num19);
            }
            npcToggleTexture[0] = base.Content.Load<Texture2D>(@"Images\House_1");
            npcToggleTexture[1] = base.Content.Load<Texture2D>(@"Images\House_2");
            HBLockTexture[0] = base.Content.Load<Texture2D>(@"Images\Lock_0");
            HBLockTexture[1] = base.Content.Load<Texture2D>(@"Images\Lock_1");
            gridTexture = base.Content.Load<Texture2D>(@"Images\Grid");
            trashTexture = base.Content.Load<Texture2D>(@"Images\Trash");
            cdTexture = base.Content.Load<Texture2D>(@"Images\CoolDown");
            logoTexture = base.Content.Load<Texture2D>(@"Images\Logo");
            logo2Texture = base.Content.Load<Texture2D>(@"Images\Logo2");
            logo3Texture = base.Content.Load<Texture2D>(@"Images\Logo3");
            dustTexture = base.Content.Load<Texture2D>(@"Images\Dust");
            sunTexture = base.Content.Load<Texture2D>(@"Images\Sun");
            sun2Texture = base.Content.Load<Texture2D>(@"Images\Sun2");
            moonTexture = base.Content.Load<Texture2D>(@"Images\Moon");
            blackTileTexture = base.Content.Load<Texture2D>(@"Images\Black_Tile");
            heartTexture = base.Content.Load<Texture2D>(@"Images\Heart");
            bubbleTexture = base.Content.Load<Texture2D>(@"Images\Bubble");
            manaTexture = base.Content.Load<Texture2D>(@"Images\Mana");
            cursorTexture = base.Content.Load<Texture2D>(@"Images\Cursor");
            ninjaTexture = base.Content.Load<Texture2D>(@"Images\Ninja");
            antLionTexture = base.Content.Load<Texture2D>(@"Images\AntlionBody");
            spikeBaseTexture = base.Content.Load<Texture2D>(@"Images\Spike_Base");
            treeTopTexture[0] = base.Content.Load<Texture2D>(@"Images\Tree_Tops_0");
            treeBranchTexture[0] = base.Content.Load<Texture2D>(@"Images\Tree_Branches_0");
            treeTopTexture[1] = base.Content.Load<Texture2D>(@"Images\Tree_Tops_1");
            treeBranchTexture[1] = base.Content.Load<Texture2D>(@"Images\Tree_Branches_1");
            treeTopTexture[2] = base.Content.Load<Texture2D>(@"Images\Tree_Tops_2");
            treeBranchTexture[2] = base.Content.Load<Texture2D>(@"Images\Tree_Branches_2");
            treeTopTexture[3] = base.Content.Load<Texture2D>(@"Images\Tree_Tops_3");
            treeBranchTexture[3] = base.Content.Load<Texture2D>(@"Images\Tree_Branches_3");
            shroomCapTexture = base.Content.Load<Texture2D>(@"Images\Shroom_Tops");
            inventoryBackTexture = base.Content.Load<Texture2D>(@"Images\Inventory_Back");
            inventoryBack2Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back2");
            inventoryBack3Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back3");
            inventoryBack4Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back4");
            inventoryBack5Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back5");
            inventoryBack6Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back6");
            inventoryBack7Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back7");
            inventoryBack8Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back8");
            inventoryBack9Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back9");
            inventoryBack10Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back10");
            inventoryBack11Texture = base.Content.Load<Texture2D>(@"Images\Inventory_Back11");
            textBackTexture = base.Content.Load<Texture2D>(@"Images\Text_Back");
            chatTexture = base.Content.Load<Texture2D>(@"Images\Chat");
            chat2Texture = base.Content.Load<Texture2D>(@"Images\Chat2");
            chatBackTexture = base.Content.Load<Texture2D>(@"Images\Chat_Back");
            teamTexture = base.Content.Load<Texture2D>(@"Images\Team");
            for (int num20 = 1; num20 < 0x19; num20++)
            {
                femaleBodyTexture[num20] = base.Content.Load<Texture2D>(@"Images\Female_Body_" + num20);
                armorBodyTexture[num20] = base.Content.Load<Texture2D>(@"Images\Armor_Body_" + num20);
                armorArmTexture[num20] = base.Content.Load<Texture2D>(@"Images\Armor_Arm_" + num20);
            }
            for (int num21 = 1; num21 < 0x2c; num21++)
            {
                armorHeadTexture[num21] = base.Content.Load<Texture2D>(@"Images\Armor_Head_" + num21);
            }
            for (int num22 = 1; num22 < 0x18; num22++)
            {
                armorLegTexture[num22] = base.Content.Load<Texture2D>(@"Images\Armor_Legs_" + num22);
            }
            for (int num23 = 0; num23 < 0x24; num23++)
            {
                playerHairTexture[num23] = base.Content.Load<Texture2D>(@"Images\Player_Hair_" + (num23 + 1));
            }
            skinBodyTexture = base.Content.Load<Texture2D>(@"Images\Skin_Body");
            skinLegsTexture = base.Content.Load<Texture2D>(@"Images\Skin_Legs");
            playerEyeWhitesTexture = base.Content.Load<Texture2D>(@"Images\Player_Eye_Whites");
            playerEyesTexture = base.Content.Load<Texture2D>(@"Images\Player_Eyes");
            playerHandsTexture = base.Content.Load<Texture2D>(@"Images\Player_Hands");
            playerHands2Texture = base.Content.Load<Texture2D>(@"Images\Player_Hands2");
            playerHeadTexture = base.Content.Load<Texture2D>(@"Images\Player_Head");
            playerPantsTexture = base.Content.Load<Texture2D>(@"Images\Player_Pants");
            playerShirtTexture = base.Content.Load<Texture2D>(@"Images\Player_Shirt");
            playerShoesTexture = base.Content.Load<Texture2D>(@"Images\Player_Shoes");
            playerUnderShirtTexture = base.Content.Load<Texture2D>(@"Images\Player_Undershirt");
            playerUnderShirt2Texture = base.Content.Load<Texture2D>(@"Images\Player_Undershirt2");
            femalePantsTexture = base.Content.Load<Texture2D>(@"Images\Female_Pants");
            femaleShirtTexture = base.Content.Load<Texture2D>(@"Images\Female_Shirt");
            femaleShoesTexture = base.Content.Load<Texture2D>(@"Images\Female_Shoes");
            femaleUnderShirtTexture = base.Content.Load<Texture2D>(@"Images\Female_Undershirt");
            femaleUnderShirt2Texture = base.Content.Load<Texture2D>(@"Images\Female_Undershirt2");
            femaleShirt2Texture = base.Content.Load<Texture2D>(@"Images\Female_Shirt2");
            chaosTexture = base.Content.Load<Texture2D>(@"Images\Chaos");
            EyeLaserTexture = base.Content.Load<Texture2D>(@"Images\Eye_Laser");
            BoneEyesTexture = base.Content.Load<Texture2D>(@"Images\Bone_eyes");
            BoneLaserTexture = base.Content.Load<Texture2D>(@"Images\Bone_Laser");
            lightDiscTexture = base.Content.Load<Texture2D>(@"Images\Light_Disc");
            confuseTexture = base.Content.Load<Texture2D>(@"Images\Confuse");
            probeTexture = base.Content.Load<Texture2D>(@"Images\Probe");
            chainTexture = base.Content.Load<Texture2D>(@"Images\Chain");
            chain2Texture = base.Content.Load<Texture2D>(@"Images\Chain2");
            chain3Texture = base.Content.Load<Texture2D>(@"Images\Chain3");
            chain4Texture = base.Content.Load<Texture2D>(@"Images\Chain4");
            chain5Texture = base.Content.Load<Texture2D>(@"Images\Chain5");
            chain6Texture = base.Content.Load<Texture2D>(@"Images\Chain6");
            chain7Texture = base.Content.Load<Texture2D>(@"Images\Chain7");
            chain8Texture = base.Content.Load<Texture2D>(@"Images\Chain8");
            chain9Texture = base.Content.Load<Texture2D>(@"Images\Chain9");
            chain10Texture = base.Content.Load<Texture2D>(@"Images\Chain10");
            chain11Texture = base.Content.Load<Texture2D>(@"Images\Chain11");
            chain12Texture = base.Content.Load<Texture2D>(@"Images\Chain12");
            boneArmTexture = base.Content.Load<Texture2D>(@"Images\Arm_Bone");
            boneArm2Texture = base.Content.Load<Texture2D>(@"Images\Arm_Bone_2");
            fontItemStack = base.Content.Load<SpriteFont>(@"Fonts\Item_Stack");
            fontMouseText = base.Content.Load<SpriteFont>(@"Fonts\Mouse_Text");
            fontDeathText = base.Content.Load<SpriteFont>(@"Fonts\Death_Text");
            fontCombatText[0] = base.Content.Load<SpriteFont>(@"Fonts\Combat_Text");
            fontCombatText[1] = base.Content.Load<SpriteFont>(@"Fonts\Combat_Crit");
        }

        public void LoadDedConfig(string configPath)
        {
            if (File.Exists(configPath))
            {
                using (StreamReader reader = new StreamReader(configPath))
                {
                    string str;
                    while ((str = reader.ReadLine()) != null)
                    {
                        try
                        {
                            if ((str.Length > 6) && (str.Substring(0, 6).ToLower() == "world="))
                            {
                                worldPathName = str.Substring(6);
                            }
                            if ((str.Length > 5) && (str.Substring(0, 5).ToLower() == "port="))
                            {
                                string str3 = str.Substring(5);
                                try
                                {
                                    Netplay.serverPort = Convert.ToInt32(str3);
                                }
                                catch
                                {
                                }
                            }
                            if ((str.Length > 11) && (str.Substring(0, 11).ToLower() == "maxplayers="))
                            {
                                string str4 = str.Substring(11);
                                try
                                {
                                    maxNetPlayers = Convert.ToInt32(str4);
                                }
                                catch
                                {
                                }
                            }
                            if ((str.Length > 11) && (str.Substring(0, 9).ToLower() == "priority="))
                            {
                                string str5 = str.Substring(9);
                                try
                                {
                                    int num3 = Convert.ToInt32(str5);
                                    if ((num3 >= 0) && (num3 <= 5))
                                    {
                                        Process currentProcess = Process.GetCurrentProcess();
                                        switch (num3)
                                        {
                                            case 0:
                                                currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
                                                goto Label_0184;

                                            case 1:
                                                currentProcess.PriorityClass = ProcessPriorityClass.High;
                                                goto Label_0184;

                                            case 2:
                                                currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
                                                goto Label_0184;

                                            case 3:
                                                currentProcess.PriorityClass = ProcessPriorityClass.Normal;
                                                goto Label_0184;

                                            case 4:
                                                currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
                                                goto Label_0184;

                                            case 5:
                                                currentProcess.PriorityClass = ProcessPriorityClass.Idle;
                                                goto Label_0184;
                                        }
                                    }
                                }
                                catch
                                {
                                }
                            }
                        Label_0184:
                            if ((str.Length > 9) && (str.Substring(0, 9).ToLower() == "password="))
                            {
                                Netplay.password = str.Substring(9);
                            }
                            if ((str.Length > 5) && (str.Substring(0, 5).ToLower() == "motd="))
                            {
                                motd = str.Substring(5);
                            }
                            if ((str.Length >= 10) && (str.Substring(0, 10).ToLower() == "worldpath="))
                            {
                                WorldPath = str.Substring(10);
                            }
                            if ((str.Length >= 10) && (str.Substring(0, 10).ToLower() == "worldname="))
                            {
                                worldName = str.Substring(10);
                            }
                            if ((str.Length > 8) && (str.Substring(0, 8).ToLower() == "banlist="))
                            {
                                Netplay.banFile = str.Substring(8);
                            }
                            if ((str.Length > 11) && (str.Substring(0, 11).ToLower() == "autocreate="))
                            {
                                switch (str.Substring(11))
                                {
                                    case "0":
                                        autoGen = false;
                                        goto Label_034D;

                                    case "1":
                                        maxTilesX = 0x1068;
                                        maxTilesY = 0x4b0;
                                        autoGen = true;
                                        goto Label_034D;

                                    case "2":
                                        maxTilesX = 0x189c;
                                        maxTilesY = 0x708;
                                        autoGen = true;
                                        break;

                                    case "3":
                                        maxTilesX = 0x20d0;
                                        maxTilesY = 0x960;
                                        autoGen = true;
                                        break;
                                }
                            }
                        Label_034D:
                            if (((str.Length > 7) && (str.Substring(0, 7).ToLower() == "secure=")) && (str.Substring(7) == "1"))
                            {
                                Netplay.spamCheck = true;
                            }
                            continue;
                        }
                        catch
                        {
                            continue;
                        }
                    }
                }
            }
        }

        public void loadLib(string path)
        {
            libPath = path;
            LoadLibrary(libPath);
        }

        [DllImport("kernel32.dll")]
        public static extern IntPtr LoadLibrary(string dllToLoad);
        private static void LoadPlayers()
        {
            Directory.CreateDirectory(PlayerPath);
            string[] files = Directory.GetFiles(PlayerPath, "*.plr");
            int length = files.Length;
            if (length > 5)
            {
                length = 5;
            }
            for (int i = 0; i < 5; i++)
            {
                loadPlayer[i] = new Player();
                if (i < length)
                {
                    loadPlayerPath[i] = files[i];
                    loadPlayer[i] = Player.LoadPlayer(loadPlayerPath[i]);
                }
            }
            numLoadPlayers = length;
        }

        public static void LoadWorlds()
        {
            Directory.CreateDirectory(WorldPath);
            string[] files = Directory.GetFiles(WorldPath, "*.wld");
            int length = files.Length;
            if (!dedServ && (length > 5))
            {
                length = 5;
            }
            for (int i = 0; i < length; i++)
            {
                loadWorldPath[i] = files[i];
                try
                {
                    using (FileStream stream = new FileStream(loadWorldPath[i], FileMode.Open))
                    {
                        using (BinaryReader reader = new BinaryReader(stream))
                        {
                            reader.ReadInt32();
                            loadWorld[i] = reader.ReadString();
                            reader.Close();
                        }
                    }
                }
                catch
                {
                    loadWorld[i] = loadWorldPath[i];
                }
            }
            numLoadWorlds = length;
        }

        protected void MouseText(string cursorText, int rare = 0, byte diff = 0)
        {
            if ((this.mouseNPC <= -1) && (cursorText != null))
            {
                float num3;
                Vector2 vector4;
                int num = mouseX + 10;
                int num2 = mouseY + 10;
                Color color = new Color((int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor);
                if (toolTip.type > 0)
                {
                    if (player[myPlayer].kbGlove)
                    {
                        toolTip.knockBack *= 1.7f;
                    }
                    rare = toolTip.rare;
                    int num4 = 20;
                    int index = 1;
                    string[] strArray = new string[num4];
                    bool[] flagArray = new bool[num4];
                    bool[] flagArray2 = new bool[num4];
                    for (int i = 0; i < num4; i++)
                    {
                        flagArray[i] = false;
                        flagArray2[i] = false;
                    }
                    strArray[0] = toolTip.AffixName();
                    if (toolTip.stack > 1)
                    {
                        strArray[0] = string.Concat(new object[] { strArray[0], " (", toolTip.stack, ")" });
                    }
                    if (toolTip.social)
                    {
                        strArray[index] = "Equipped in social slot";
                        index++;
                        strArray[index] = "No stats will be gained";
                        index++;
                    }
                    else
                    {
                        if (toolTip.damage > 0)
                        {
                            string[] strArray6;
                            IntPtr ptr4;
                            string[] strArray8;
                            IntPtr ptr6;
                            int damage = toolTip.damage;
                            if (toolTip.melee)
                            {
                                string[] strArray3;
                                IntPtr ptr;
                                strArray[index] = ((int)(player[myPlayer].meleeDamage * damage)).ToString();
                                (strArray3 = strArray)[(int) (ptr = (IntPtr) index)] = strArray3[(int) ptr] + " melee";
                            }
                            else if (toolTip.ranged)
                            {
                                string[] strArray4;
                                IntPtr ptr2;
                                strArray[index] = ((int)(player[myPlayer].rangedDamage * damage)).ToString();
                                (strArray4 = strArray)[(int) (ptr2 = (IntPtr) index)] = strArray4[(int) ptr2] + " ranged";
                            }
                            else if (toolTip.magic)
                            {
                                string[] strArray5;
                                IntPtr ptr3;
                                strArray[index] = ((int)(player[myPlayer].magicDamage * damage)).ToString();
                                (strArray5 = strArray)[(int) (ptr3 = (IntPtr) index)] = strArray5[(int) ptr3] + " magic";
                            }
                            else
                            {
                                strArray[index] = damage.ToString();
                            }
                            (strArray6 = strArray)[(int) (ptr4 = (IntPtr) index)] = strArray6[(int) ptr4] + " damage";
                            index++;
                            if (toolTip.melee)
                            {
                                int num8 = (player[myPlayer].meleeCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit) + toolTip.crit;
                                strArray[index] = num8 + "% critical strike chance";
                                index++;
                            }
                            else if (toolTip.ranged)
                            {
                                int num9 = (player[myPlayer].rangedCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit) + toolTip.crit;
                                strArray[index] = num9 + "% critical strike chance";
                                index++;
                            }
                            else if (toolTip.magic)
                            {
                                int num10 = (player[myPlayer].magicCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit) + toolTip.crit;
                                strArray[index] = num10 + "% critical strike chance";
                                index++;
                            }
                            if (toolTip.useStyle > 0)
                            {
                                string[] strArray7;
                                IntPtr ptr5;
                                if (toolTip.useAnimation <= 8)
                                {
                                    strArray[index] = "Insanely fast";
                                }
                                else if (toolTip.useAnimation <= 20)
                                {
                                    strArray[index] = "Very fast";
                                }
                                else if (toolTip.useAnimation <= 0x19)
                                {
                                    strArray[index] = "Fast";
                                }
                                else if (toolTip.useAnimation <= 30)
                                {
                                    strArray[index] = "Average";
                                }
                                else if (toolTip.useAnimation <= 0x23)
                                {
                                    strArray[index] = "Slow";
                                }
                                else if (toolTip.useAnimation <= 0x2d)
                                {
                                    strArray[index] = "Very slow";
                                }
                                else if (toolTip.useAnimation <= 0x37)
                                {
                                    strArray[index] = "Extremely slow";
                                }
                                else
                                {
                                    strArray[index] = "Snail";
                                }
                                (strArray7 = strArray)[(int) (ptr5 = (IntPtr) index)] = strArray7[(int) ptr5] + " speed";
                                index++;
                            }
                            if (toolTip.knockBack == 0f)
                            {
                                strArray[index] = "No";
                            }
                            else if (toolTip.knockBack <= 1.5)
                            {
                                strArray[index] = "Extremely weak";
                            }
                            else if (toolTip.knockBack <= 3f)
                            {
                                strArray[index] = "Very weak";
                            }
                            else if (toolTip.knockBack <= 4f)
                            {
                                strArray[index] = "Weak";
                            }
                            else if (toolTip.knockBack <= 6f)
                            {
                                strArray[index] = "Average";
                            }
                            else if (toolTip.knockBack <= 7f)
                            {
                                strArray[index] = "Strong";
                            }
                            else if (toolTip.knockBack <= 9f)
                            {
                                strArray[index] = "Very strong";
                            }
                            else if (toolTip.knockBack <= 11f)
                            {
                                strArray[index] = "Extremely strong";
                            }
                            else
                            {
                                strArray[index] = "Insane";
                            }
                            (strArray8 = strArray)[(int) (ptr6 = (IntPtr) index)] = strArray8[(int) ptr6] + " knockback";
                            index++;
                        }
                        if (((toolTip.headSlot > 0) || (toolTip.bodySlot > 0)) || ((toolTip.legSlot > 0) || toolTip.accessory))
                        {
                            strArray[index] = "Equipable";
                            index++;
                        }
                        if (toolTip.vanity)
                        {
                            strArray[index] = "Vanity Item";
                            index++;
                        }
                        if (toolTip.defense > 0)
                        {
                            strArray[index] = toolTip.defense + " defense";
                            index++;
                        }
                        if (toolTip.pick > 0)
                        {
                            strArray[index] = toolTip.pick + "% pickaxe power";
                            index++;
                        }
                        if (toolTip.axe > 0)
                        {
                            strArray[index] = (toolTip.axe * 5) + "% axe power";
                            index++;
                        }
                        if (toolTip.hammer > 0)
                        {
                            strArray[index] = toolTip.hammer + "% hammer power";
                            index++;
                        }
                        if (toolTip.healLife > 0)
                        {
                            strArray[index] = "Restores " + toolTip.healLife + " life";
                            index++;
                        }
                        if (toolTip.healMana > 0)
                        {
                            strArray[index] = "Restores " + toolTip.healMana + " mana";
                            index++;
                        }
                        if ((toolTip.mana > 0) && ((toolTip.type != 0x7f) || !player[myPlayer].spaceGun))
                        {
                            strArray[index] = "Uses " + ((int) (toolTip.mana * player[myPlayer].manaCost)) + " mana";
                            index++;
                        }
                        if ((toolTip.createWall > 0) || (toolTip.createTile > -1))
                        {
                            if (toolTip.type != 0xd5)
                            {
                                strArray[index] = "Can be placed";
                                index++;
                            }
                        }
                        else if (toolTip.ammo > 0)
                        {
                            strArray[index] = "Ammo";
                            index++;
                        }
                        else if (toolTip.consumable)
                        {
                            strArray[index] = "Consumable";
                            index++;
                        }
                        if (toolTip.material)
                        {
                            strArray[index] = "Material";
                            index++;
                        }
                        if (toolTip.toolTip != null)
                        {
                            strArray[index] = toolTip.toolTip;
                            index++;
                        }
                        if (toolTip.toolTip2 != null)
                        {
                            strArray[index] = toolTip.toolTip2;
                            index++;
                        }
                        if (toolTip.buffTime > 0)
                        {
                            string str = "0 s";
                            if ((toolTip.buffTime / 60) >= 60)
                            {
                                str = Math.Round((double) (((double) (toolTip.buffTime / 60)) / 60.0)) + " minute duration";
                            }
                            else
                            {
                                str = Math.Round((double) (((double) toolTip.buffTime) / 60.0)) + " second duration";
                            }
                            strArray[index] = str;
                            index++;
                        }
                        if (toolTip.prefix > 0)
                        {
                            if ((cpItem == null) || (cpItem.name != toolTip.name))
                            {
                                cpItem = new Item();
                                cpItem.SetDefaults(toolTip.name);
                            }
                            if (cpItem.damage != toolTip.damage)
                            {
                                double a = toolTip.damage - cpItem.damage;
                                a = (a / ((double) cpItem.damage)) * 100.0;
                                a = Math.Round(a);
                                if (a > 0.0)
                                {
                                    strArray[index] = "+" + a + "% damage";
                                }
                                else
                                {
                                    strArray[index] = a + "% damage";
                                }
                                if (a < 0.0)
                                {
                                    flagArray2[index] = true;
                                }
                                flagArray[index] = true;
                                index++;
                            }
                            if (cpItem.useAnimation != toolTip.useAnimation)
                            {
                                double num12 = toolTip.useAnimation - cpItem.useAnimation;
                                num12 = (num12 / ((double) cpItem.useAnimation)) * 100.0;
                                num12 = Math.Round(num12) * -1.0;
                                if (num12 > 0.0)
                                {
                                    strArray[index] = "+" + num12 + "% speed";
                                }
                                else
                                {
                                    strArray[index] = num12 + "% speed";
                                }
                                if (num12 < 0.0)
                                {
                                    flagArray2[index] = true;
                                }
                                flagArray[index] = true;
                                index++;
                            }
                            if (cpItem.crit != toolTip.crit)
                            {
                                double num13 = toolTip.crit - cpItem.crit;
                                if (num13 > 0.0)
                                {
                                    strArray[index] = "+" + num13 + "% critical strike chance";
                                }
                                else
                                {
                                    strArray[index] = num13 + "% critical strike chance";
                                }
                                if (num13 < 0.0)
                                {
                                    flagArray2[index] = true;
                                }
                                flagArray[index] = true;
                                index++;
                            }
                            if (cpItem.mana != toolTip.mana)
                            {
                                double num14 = toolTip.mana - cpItem.mana;
                                num14 = (num14 / ((double) cpItem.mana)) * 100.0;
                                num14 = Math.Round(num14);
                                if (num14 > 0.0)
                                {
                                    strArray[index] = "+" + num14 + "% mana cost";
                                }
                                else
                                {
                                    strArray[index] = num14 + "% mana cost";
                                }
                                if (num14 > 0.0)
                                {
                                    flagArray2[index] = true;
                                }
                                flagArray[index] = true;
                                index++;
                            }
                            if (cpItem.scale != toolTip.scale)
                            {
                                double num15 = toolTip.scale - cpItem.scale;
                                num15 = (num15 / ((double) cpItem.scale)) * 100.0;
                                num15 = Math.Round(num15);
                                if (num15 > 0.0)
                                {
                                    strArray[index] = "+" + num15 + "% size";
                                }
                                else
                                {
                                    strArray[index] = num15 + "% size";
                                }
                                if (num15 < 0.0)
                                {
                                    flagArray2[index] = true;
                                }
                                flagArray[index] = true;
                                index++;
                            }
                            if (cpItem.shootSpeed != toolTip.shootSpeed)
                            {
                                double num16 = toolTip.shootSpeed - cpItem.shootSpeed;
                                num16 = (num16 / ((double) cpItem.shootSpeed)) * 100.0;
                                num16 = Math.Round(num16);
                                if (num16 > 0.0)
                                {
                                    strArray[index] = "+" + num16 + "% velocity";
                                }
                                else
                                {
                                    strArray[index] = num16 + "% velocity";
                                }
                                if (num16 < 0.0)
                                {
                                    flagArray2[index] = true;
                                }
                                flagArray[index] = true;
                                index++;
                            }
                            if (cpItem.knockBack != toolTip.knockBack)
                            {
                                double num17 = toolTip.knockBack - cpItem.knockBack;
                                num17 = (num17 / ((double) cpItem.knockBack)) * 100.0;
                                num17 = Math.Round(num17);
                                if (num17 > 0.0)
                                {
                                    strArray[index] = "+" + num17 + "% knockback";
                                }
                                else
                                {
                                    strArray[index] = num17 + "% knockback";
                                }
                                if (num17 < 0.0)
                                {
                                    flagArray2[index] = true;
                                }
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x3e)
                            {
                                strArray[index] = "+1 defense";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x3f)
                            {
                                strArray[index] = "+2 defense";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x40)
                            {
                                strArray[index] = "+3 defense";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x41)
                            {
                                strArray[index] = "+4 defense";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x42)
                            {
                                strArray[index] = "+20 mana";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x43)
                            {
                                strArray[index] = "+1% critical strike chance";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x44)
                            {
                                strArray[index] = "+2% critical strike chance";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x45)
                            {
                                strArray[index] = "+1% damage";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 70)
                            {
                                strArray[index] = "+2% damage";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x47)
                            {
                                strArray[index] = "+3% damage";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x48)
                            {
                                strArray[index] = "+4% damage";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x49)
                            {
                                strArray[index] = "+1% movement speed";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x4a)
                            {
                                strArray[index] = "+2% movement speed";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x4b)
                            {
                                strArray[index] = "+3% movement speed";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x4c)
                            {
                                strArray[index] = "+4% movement speed";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x4d)
                            {
                                strArray[index] = "+1% melee speed";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x4e)
                            {
                                strArray[index] = "+2% melee speed";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 0x4f)
                            {
                                strArray[index] = "+3% melee speed";
                                flagArray[index] = true;
                                index++;
                            }
                            if (toolTip.prefix == 80)
                            {
                                strArray[index] = "+4% melee speed";
                                flagArray[index] = true;
                                index++;
                            }
                        }
                        if (toolTip.wornArmor && (player[myPlayer].setBonus != ""))
                        {
                            strArray[index] = "Set bonus: " + player[myPlayer].setBonus;
                            index++;
                        }
                    }
                    if (npcShop > 0)
                    {
                        if (toolTip.value > 0)
                        {
                            string str2 = "";
                            int num18 = 0;
                            int num19 = 0;
                            int num20 = 0;
                            int num21 = 0;
                            int num22 = toolTip.value * toolTip.stack;
                            if (!toolTip.buy)
                            {
                                num22 = (toolTip.value / 5) * toolTip.stack;
                            }
                            if (num22 < 1)
                            {
                                num22 = 1;
                            }
                            if (num22 >= 0xf4240)
                            {
                                num18 = num22 / 0xf4240;
                                num22 -= num18 * 0xf4240;
                            }
                            if (num22 >= 0x2710)
                            {
                                num19 = num22 / 0x2710;
                                num22 -= num19 * 0x2710;
                            }
                            if (num22 >= 100)
                            {
                                num20 = num22 / 100;
                                num22 -= num20 * 100;
                            }
                            if (num22 >= 1)
                            {
                                num21 = num22;
                            }
                            if (num18 > 0)
                            {
                                str2 = str2 + num18 + " platinum ";
                            }
                            if (num19 > 0)
                            {
                                str2 = str2 + num19 + " gold ";
                            }
                            if (num20 > 0)
                            {
                                str2 = str2 + num20 + " silver ";
                            }
                            if (num21 > 0)
                            {
                                str2 = str2 + num21 + " copper ";
                            }
                            if (!toolTip.buy)
                            {
                                strArray[index] = "Sell price: " + str2;
                            }
                            else
                            {
                                strArray[index] = "Buy price: " + str2;
                            }
                            index++;
                            num3 = ((float) mouseTextColor) / 255f;
                            if (num18 > 0)
                            {
                                color = new Color((int) ((byte) (220f * num3)), (int) ((byte) (220f * num3)), (int) ((byte) (198f * num3)), (int) mouseTextColor);
                            }
                            else if (num19 > 0)
                            {
                                color = new Color((int) ((byte) (224f * num3)), (int) ((byte) (201f * num3)), (int) ((byte) (92f * num3)), (int) mouseTextColor);
                            }
                            else if (num20 > 0)
                            {
                                color = new Color((int) ((byte) (181f * num3)), (int) ((byte) (192f * num3)), (int) ((byte) (193f * num3)), (int) mouseTextColor);
                            }
                            else if (num21 > 0)
                            {
                                color = new Color((int) ((byte) (246f * num3)), (int) ((byte) (138f * num3)), (int) ((byte) (96f * num3)), (int) mouseTextColor);
                            }
                        }
                        else
                        {
                            num3 = ((float) mouseTextColor) / 255f;
                            strArray[index] = "No value";
                            index++;
                            color = new Color((int) ((byte) (120f * num3)), (int) ((byte) (120f * num3)), (int) ((byte) (120f * num3)), (int) mouseTextColor);
                        }
                    }
                    Vector2 vector = new Vector2();
                    int num23 = 0;
                    for (int j = 0; j < index; j++)
                    {
                        Vector2 vector2 = fontMouseText.MeasureString(strArray[j]);
                        if (vector2.X > vector.X)
                        {
                            vector.X = vector2.X;
                        }
                        vector.Y += vector2.Y + num23;
                    }
                    if (((num + vector.X) + 4f) > screenWidth)
                    {
                        num = (int) ((screenWidth - vector.X) - 4f);
                    }
                    if (((num2 + vector.Y) + 4f) > screenHeight)
                    {
                        num2 = (int) ((screenHeight - vector.Y) - 4f);
                    }
                    int num25 = 0;
                    num3 = ((float) mouseTextColor) / 255f;
                    for (int k = 0; k < index; k++)
                    {
                        for (int m = 0; m < 5; m++)
                        {
                            int num28 = num;
                            int num29 = num2 + num25;
                            Color black = Color.Black;
                            switch (m)
                            {
                                case 0:
                                    num28 -= 2;
                                    break;

                                case 1:
                                    num28 += 2;
                                    break;

                                case 2:
                                    num29 -= 2;
                                    break;

                                case 3:
                                    num29 += 2;
                                    break;

                                default:
                                    black = new Color((int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor);
                                    if (k == 0)
                                    {
                                        if (rare == -1)
                                        {
                                            black = new Color((int) ((byte) (130f * num3)), (int) ((byte) (130f * num3)), (int) ((byte) (130f * num3)), (int) mouseTextColor);
                                        }
                                        if (rare == 1)
                                        {
                                            black = new Color((int) ((byte) (150f * num3)), (int) ((byte) (150f * num3)), (int) ((byte) (255f * num3)), (int) mouseTextColor);
                                        }
                                        if (rare == 2)
                                        {
                                            black = new Color((int) ((byte) (150f * num3)), (int) ((byte) (255f * num3)), (int) ((byte) (150f * num3)), (int) mouseTextColor);
                                        }
                                        if (rare == 3)
                                        {
                                            black = new Color((int) ((byte) (255f * num3)), (int) ((byte) (200f * num3)), (int) ((byte) (150f * num3)), (int) mouseTextColor);
                                        }
                                        if (rare == 4)
                                        {
                                            black = new Color((int) ((byte) (255f * num3)), (int) ((byte) (150f * num3)), (int) ((byte) (150f * num3)), (int) mouseTextColor);
                                        }
                                        if (rare == 5)
                                        {
                                            black = new Color((int) ((byte) (255f * num3)), (int) ((byte) (150f * num3)), (int) ((byte) (255f * num3)), (int) mouseTextColor);
                                        }
                                        if (rare == 6)
                                        {
                                            black = new Color((int) ((byte) (210f * num3)), (int) ((byte) (160f * num3)), (int) ((byte) (255f * num3)), (int) mouseTextColor);
                                        }
                                        if (diff == 1)
                                        {
                                            black = new Color((int) ((byte) (mcColor.R * num3)), (int) ((byte) (mcColor.G * num3)), (int) ((byte) (mcColor.B * num3)), (int) mouseTextColor);
                                        }
                                        if (diff == 2)
                                        {
                                            black = new Color((int) ((byte) (hcColor.R * num3)), (int) ((byte) (hcColor.G * num3)), (int) ((byte) (hcColor.B * num3)), (int) mouseTextColor);
                                        }
                                    }
                                    else if (flagArray[k])
                                    {
                                        if (flagArray2[k])
                                        {
                                            black = new Color((int) ((byte) (190f * num3)), (int) ((byte) (120f * num3)), (int) ((byte) (120f * num3)), (int) mouseTextColor);
                                        }
                                        else
                                        {
                                            black = new Color((int) ((byte) (120f * num3)), (int) ((byte) (190f * num3)), (int) ((byte) (120f * num3)), (int) mouseTextColor);
                                        }
                                    }
                                    else if (k == (index - 1))
                                    {
                                        black = color;
                                    }
                                    break;
                            }
                            vector4 = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, strArray[k], new Vector2((float) num28, (float) num29), black, 0f, vector4, (float) 1f, SpriteEffects.None, 0f);
                        }
                        num25 += ((int) fontMouseText.MeasureString(strArray[k]).Y) + num23;
                    }
                }
                else
                {
                    if ((buffString != "") && (buffString != null))
                    {
                        for (int n = 0; n < 5; n++)
                        {
                            int num31 = num;
                            int num32 = num2 + ((int) fontMouseText.MeasureString(buffString).Y);
                            Color color3 = Color.Black;
                            switch (n)
                            {
                                case 0:
                                    num31 -= 2;
                                    break;

                                case 1:
                                    num31 += 2;
                                    break;

                                case 2:
                                    num32 -= 2;
                                    break;

                                case 3:
                                    num32 += 2;
                                    break;

                                default:
                                    color3 = new Color((int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor);
                                    break;
                            }
                            Vector2 origin = new Vector2();
                            this.spriteBatch.DrawString(fontMouseText, buffString, new Vector2((float) num31, (float) num32), color3, 0f, origin, (float) 1f, SpriteEffects.None, 0f);
                        }
                    }
                    Vector2 vector3 = fontMouseText.MeasureString(cursorText);
                    if (((num + vector3.X) + 4f) > screenWidth)
                    {
                        num = (int) ((screenWidth - vector3.X) - 4f);
                    }
                    if (((num2 + vector3.Y) + 4f) > screenHeight)
                    {
                        num2 = (int) ((screenHeight - vector3.Y) - 4f);
                    }
                    vector4 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, cursorText, new Vector2((float) num, (float) (num2 - 2)), Color.Black, 0f, vector4, (float) 1f, SpriteEffects.None, 0f);
                    vector4 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, cursorText, new Vector2((float) num, (float) (num2 + 2)), Color.Black, 0f, vector4, (float) 1f, SpriteEffects.None, 0f);
                    vector4 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, cursorText, new Vector2((float) (num - 2), (float) num2), Color.Black, 0f, vector4, (float) 1f, SpriteEffects.None, 0f);
                    vector4 = new Vector2();
                    this.spriteBatch.DrawString(fontMouseText, cursorText, new Vector2((float) (num + 2), (float) num2), Color.Black, 0f, vector4, (float) 1f, SpriteEffects.None, 0f);
                    num3 = ((float) mouseTextColor) / 255f;
                    Color color4 = new Color((int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor, (int) mouseTextColor);
                    if (rare == -1)
                    {
                        color4 = new Color((int) ((byte) (130f * num3)), (int) ((byte) (130f * num3)), (int) ((byte) (130f * num3)), (int) mouseTextColor);
                    }
                    if (rare == 6)
                    {
                        color4 = new Color((int) ((byte) (210f * num3)), (int) ((byte) (160f * num3)), (int) ((byte) (255f * num3)), (int) mouseTextColor);
                    }
                    if (rare == 1)
                    {
                        color4 = new Color((int) ((byte) (150f * num3)), (int) ((byte) (150f * num3)), (int) ((byte) (255f * num3)), (int) mouseTextColor);
                    }
                    if (rare == 2)
                    {
                        color4 = new Color((int) ((byte) (150f * num3)), (int) ((byte) (255f * num3)), (int) ((byte) (150f * num3)), (int) mouseTextColor);
                    }
                    if (rare == 3)
                    {
                        color4 = new Color((int) ((byte) (255f * num3)), (int) ((byte) (200f * num3)), (int) ((byte) (150f * num3)), (int) mouseTextColor);
                    }
                    if (rare == 4)
                    {
                        color4 = new Color((int) ((byte) (255f * num3)), (int) ((byte) (150f * num3)), (int) ((byte) (150f * num3)), (int) mouseTextColor);
                    }
                    if (rare == 5)
                    {
                        color4 = new Color((int) ((byte) (255f * num3)), (int) ((byte) (150f * num3)), (int) ((byte) (255f * num3)), (int) mouseTextColor);
                    }
                    if (diff == 1)
                    {
                        color4 = new Color((int) ((byte) (mcColor.R * num3)), (int) ((byte) (mcColor.G * num3)), (int) ((byte) (mcColor.B * num3)), (int) mouseTextColor);
                    }
                    if (diff == 2)
                    {
                        color4 = new Color((int) ((byte) (hcColor.R * num3)), (int) ((byte) (hcColor.G * num3)), (int) ((byte) (hcColor.B * num3)), (int) mouseTextColor);
                    }
                    this.spriteBatch.DrawString(fontMouseText, cursorText, new Vector2((float) num, (float) num2), color4, 0f, new Vector2(), (float) 1f, SpriteEffects.None, 0f);
                }
            }
        }

        public void NewMOTD(string newMOTD)
        {
            motd = newMOTD;
        }

        public static void NewText(string newText, byte R = 0xff, byte G = 0xff, byte B = 0xff)
        {
            for (int i = numChatLines - 1; i > 0; i--)
            {
                chatLine[i].text = chatLine[i - 1].text;
                chatLine[i].showTime = chatLine[i - 1].showTime;
                chatLine[i].color = chatLine[i - 1].color;
            }
            if (((R == 0) && (G == 0)) && (B == 0))
            {
                chatLine[0].color = Color.White;
            }
            else
            {
                chatLine[0].color = new Color(R, G, B);
            }
            chatLine[0].text = newText;
            chatLine[0].showTime = chatLength;
            PlaySound(12, -1, -1, 1);
        }

        private static string nextLoadPlayer()
        {
            int num = 1;
        Label_0008:;
            if (File.Exists(string.Concat(new object[] { PlayerPath, @"\player", num, ".plr" })))
            {
                num++;
                goto Label_0008;
            }
            return string.Concat(new object[] { PlayerPath, @"\player", num, ".plr" });
        }

        private static string nextLoadWorld()
        {
            int num = 1;
        Label_0008:;
            if (File.Exists(string.Concat(new object[] { WorldPath, @"\world", num, ".wld" })))
            {
                num++;
                goto Label_0008;
            }
            return string.Concat(new object[] { WorldPath, @"\world", num, ".wld" });
        }

        protected void OpenRecent()
        {
            try
            {
                if (File.Exists(SavePath + @"\servers.dat"))
                {
                    using (FileStream stream = new FileStream(SavePath + @"\servers.dat", FileMode.Open))
                    {
                        using (BinaryReader reader = new BinaryReader(stream))
                        {
                            reader.ReadInt32();
                            for (int i = 0; i < 10; i++)
                            {
                                recentWorld[i] = reader.ReadString();
                                recentIP[i] = reader.ReadString();
                                recentPort[i] = reader.ReadInt32();
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }

        //BlueFly - Start
        protected void loadBindings()
        {
            List<string> usedKeys = new List<string> { Main.cUp, Main.cDown, Main.cLeft, Main.cRight, Main.cJump, Main.cThrowItem, Main.cInv, Main.cHeal, Main.cMana, Main.cBuff, Main.cHook, Main.cTorch, "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "F7", "F8", "F9", "F10", "F11"};
            try
            {
                if (File.Exists(SavePath + @"\bindings.txt"))
                {
                    string[] lines = System.IO.File.ReadAllLines(SavePath + @"\bindings.txt");
                    foreach (string s in lines)
                    {
                        string[] splt = s.Split('→');
                        if (!usedKeys.Contains(splt[0]))
                        {
                            ZidoMod.bindkeys.Add(splt[0]);
                            ZidoMod.bindings.Add(splt[1]);
                        }
                    }
                }
            }
            catch
            {
            }
        }

        public static void loadWarps()
        {
            string servip = Netplay.serverIP.ToString() + "-" + Netplay.serverPort.ToString() + "-" + worldName;
            ZidoMod.warpnames.Clear();
            ZidoMod.warpxs.Clear();
            ZidoMod.warpys.Clear();
            try
            {
                if (File.Exists(SavePath + @"\warps\" + servip + ".txt"))
                {
                    string[] lines = System.IO.File.ReadAllLines(SavePath + @"\warps\" + servip + ".txt");
                    foreach (string s in lines)
                    {
                        string[] splt = s.Split('→');
                        if (splt.Length == 3)
                        {
                            float x = -1;
                            float y = -1;
                            float.TryParse(splt[1], out x);
                            float.TryParse(splt[2], out y);
                            if (x >= 0 && y >= 0)
                            {
                                Main.NewText(x + " - " + y, 255, 240, 20);
                                ZidoMod.warpnames.Add(splt[0]);
                                ZidoMod.warpxs.Add(x);
                                ZidoMod.warpys.Add(y);
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }

        protected void OpenZidoSettings()
        {
            try
            {
                if (File.Exists(SavePath + @"\Zidoconfig.dat"))
                {
                    using (FileStream stream = new FileStream(SavePath + @"\Zidoconfig.dat", FileMode.Open))
                    {
                        using (BinaryReader reader = new BinaryReader(stream))
                        {
                            ZidoMod.cmdLimit = reader.ReadBoolean();// false; //BlueFly
                            ZidoMod.fullbright = reader.ReadBoolean();// false; //Doneski
                            //ZidoMod.fullbrightcolor = Color.White; //cracker64
                            //ZidoMod.noClip = false; //Doneski
                            ZidoMod.accuratePlayers = reader.ReadBoolean();// false; //Doneski
                            //ZidoMod.freeCam = false; //Doneski
                            ZidoMod.godMode = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.undead = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.infiniteMana = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.tileRange = reader.ReadInt32();// 4; //Doneski
                            ZidoMod.tracking = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.infiniteRockets = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.slowFall = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.waterWalk = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.infiniteBreath = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.thorns = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.gravityControl = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.noKnockback = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.speedHack = (float)reader.ReadDouble();//ReadFloat();//1f; //Doneski
                            ZidoMod.autoReuse = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.infiniteStack = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.infiniteJump = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.fastUse = reader.ReadInt32();// 1; //Doneski
                            ZidoMod.noAnimateSend = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.noProjectileSend = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.noMovementSend = reader.ReadBoolean();// false;
                            ZidoMod.capNetStats = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.forceMaxStack = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.GPSDisplay = reader.ReadBoolean();// true; //Doneski
                            ZidoMod.flashlight = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.showAllRecipes = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.freeCrafting = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.disableDebuffs = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.allowRemoveDebuffs = reader.ReadBoolean();// true; //Doneski
                            ZidoMod.pickupRange = reader.ReadInt32();// 38; //Doneski
                            ZidoMod.instantRespawn = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.maxRespawn = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.invisible = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.showUI = reader.ReadBoolean();// true; //Doneski
                            ZidoMod.showRadar = reader.ReadBoolean();// true; //Doneski
                            ZidoMod.superJump = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.uberDefense = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.bypassNetMode = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.useAlternativeSendData = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.noFallDmg = reader.ReadBoolean();// false; //Doneski
                            ZidoMod.showInvis = reader.ReadBoolean();// false; //Doneski

                            ZidoMod.fullbrightcolor.R = reader.ReadByte(); //BlueFly
                            ZidoMod.fullbrightcolor.G = reader.ReadByte(); //BlueFly
                            ZidoMod.fullbrightcolor.B = reader.ReadByte(); //BlueFly

                            ZidoMod.flashlightcolor.R = reader.ReadByte(); //BlueFly
                            ZidoMod.flashlightcolor.G = reader.ReadByte(); //BlueFly
                            ZidoMod.flashlightcolor.B = reader.ReadByte(); //BlueFly

                            reader.Close();
                            
                        }
                    }
                }
            }
            catch
            {
            }
        }


        //BlueFly - End

        protected void OpenSettings()
        {
            try
            {
                if (File.Exists(SavePath + @"\config.dat"))
                {
                    using (FileStream stream = new FileStream(SavePath + @"\config.dat", FileMode.Open))
                    {
                        using (BinaryReader reader = new BinaryReader(stream))
                        {
                            int num = reader.ReadInt32();
                            bool flag = reader.ReadBoolean();
                            mouseColor.R = reader.ReadByte();
                            mouseColor.G = reader.ReadByte();
                            mouseColor.B = reader.ReadByte();
                            soundVolume = reader.ReadSingle();
                            musicVolume = reader.ReadSingle();
                            cUp = reader.ReadString();
                            cDown = reader.ReadString();
                            cLeft = reader.ReadString();
                            cRight = reader.ReadString();
                            cJump = reader.ReadString();
                            cThrowItem = reader.ReadString();
                            if (num >= 1)
                            {
                                cInv = reader.ReadString();
                            }
                            if (num >= 12)
                            {
                                cHeal = reader.ReadString();
                                cMana = reader.ReadString();
                                cBuff = reader.ReadString();
                            }
                            if (num >= 13)
                            {
                                cHook = reader.ReadString();
                            }
                            caveParrallax = reader.ReadSingle();
                            if (num >= 2)
                            {
                                fixedTiming = reader.ReadBoolean();
                            }
                            if (num >= 4)
                            {
                                this.graphics.PreferredBackBufferWidth = reader.ReadInt32();
                                this.graphics.PreferredBackBufferHeight = reader.ReadInt32();
                            }
                            if (num >= 8)
                            {
                                autoSave = reader.ReadBoolean();
                            }
                            if (num >= 9)
                            {
                                autoPause = reader.ReadBoolean();
                            }
                            if (num >= 0x13)
                            {
                                showItemText = reader.ReadBoolean();
                            }
                            if (num >= 30)
                            {
                                cTorch = reader.ReadString();
                                Lighting.lightMode = reader.ReadByte();
                                qaStyle = reader.ReadByte();
                            }
                            reader.Close();
                            if (flag && !this.graphics.IsFullScreen)
                            {
                                this.graphics.ToggleFullScreen();
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }

        public static void PlaySound(int type, int x = -1, int y = -1, int Style = 1)
        {
            int index = Style;
            try
            {
                if (dedServ || (soundVolume == 0f))
                {
                    return;
                }
                bool flag = false;
                float num2 = 1f;
                float num3 = 0f;
                if ((x == -1) || (y == -1))
                {
                    flag = true;
                }
                else
                {
                    if (WorldGen.gen || (netMode == 2))
                    {
                        return;
                    }
                    Rectangle rectangle = new Rectangle(((int) screenPosition.X) - (screenWidth * 2), ((int) screenPosition.Y) - (screenHeight * 2), screenWidth * 5, screenHeight * 5);
                    Rectangle rectangle2 = new Rectangle(x, y, 1, 1);
                    Vector2 vector = new Vector2(screenPosition.X + (screenWidth * 0.5f), screenPosition.Y + (screenHeight * 0.5f));
                    if (rectangle2.Intersects(rectangle))
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        num3 = (x - vector.X) / (screenWidth * 0.5f);
                        float num4 = Math.Abs((float) (x - vector.X));
                        float num5 = Math.Abs((float) (y - vector.Y));
                        float num6 = (float) Math.Sqrt((double) ((num4 * num4) + (num5 * num5)));
                        num2 = 1f - (num6 / (screenWidth * 1.5f));
                    }
                }
                if (num3 < -1f)
                {
                    num3 = -1f;
                }
                if (num3 > 1f)
                {
                    num3 = 1f;
                }
                if (num2 > 1f)
                {
                    num2 = 1f;
                }
                if ((num2 <= 0f) || !flag)
                {
                    return;
                }
                num2 *= soundVolume;
                if (type == 0)
                {
                    int num7 = rand.Next(3);
                    soundInstanceDig[num7].Stop();
                    soundInstanceDig[num7] = soundDig[num7].CreateInstance();
                    soundInstanceDig[num7].Volume = num2;
                    soundInstanceDig[num7].Pan = num3;
                    soundInstanceDig[num7].Pitch = rand.Next(-10, 11) * 0.01f;
                    soundInstanceDig[num7].Play();
                    return;
                }
                if (type == 1)
                {
                    int num8 = rand.Next(3);
                    soundInstancePlayerHit[num8].Stop();
                    soundInstancePlayerHit[num8] = soundPlayerHit[num8].CreateInstance();
                    soundInstancePlayerHit[num8].Volume = num2;
                    soundInstancePlayerHit[num8].Pan = num3;
                    soundInstancePlayerHit[num8].Play();
                    return;
                }
                if (type != 2)
                {
                    goto Label_034C;
                }
                if (index == 1)
                {
                    switch (rand.Next(3))
                    {
                        case 1:
                            index = 0x12;
                            break;

                        case 2:
                            index = 0x13;
                            goto Label_0296;
                    }
                }
            Label_0296:
                if ((((index != 9) && (index != 10)) && ((index != 0x18) && (index != 0x1a))) && (index != 0x22))
                {
                    soundInstanceItem[index].Stop();
                }
                soundInstanceItem[index] = soundItem[index].CreateInstance();
                soundInstanceItem[index].Volume = num2;
                soundInstanceItem[index].Pan = num3;
                soundInstanceItem[index].Pitch = rand.Next(-6, 7) * 0.01f;
                if ((index == 0x1a) || (index == 0x23))
                {
                    soundInstanceItem[index].Volume = num2 * 0.75f;
                    soundInstanceItem[index].Pitch = harpNote;
                }
                soundInstanceItem[index].Play();
                return;
            Label_034C:
                if (type == 3)
                {
                    soundInstanceNPCHit[index].Stop();
                    soundInstanceNPCHit[index] = soundNPCHit[index].CreateInstance();
                    soundInstanceNPCHit[index].Volume = num2;
                    soundInstanceNPCHit[index].Pan = num3;
                    soundInstanceNPCHit[index].Pitch = rand.Next(-10, 11) * 0.01f;
                    soundInstanceNPCHit[index].Play();
                }
                else if (type == 4)
                {
                    if ((index != 10) || (soundInstanceNPCKilled[index].State != SoundState.Playing))
                    {
                        soundInstanceNPCKilled[index] = soundNPCKilled[index].CreateInstance();
                        soundInstanceNPCKilled[index].Volume = num2;
                        soundInstanceNPCKilled[index].Pan = num3;
                        soundInstanceNPCKilled[index].Pitch = rand.Next(-10, 11) * 0.01f;
                        soundInstanceNPCKilled[index].Play();
                    }
                }
                else if (type == 5)
                {
                    soundInstancePlayerKilled.Stop();
                    soundInstancePlayerKilled = soundPlayerKilled.CreateInstance();
                    soundInstancePlayerKilled.Volume = num2;
                    soundInstancePlayerKilled.Pan = num3;
                    soundInstancePlayerKilled.Play();
                }
                else if (type == 6)
                {
                    soundInstanceGrass.Stop();
                    soundInstanceGrass = soundGrass.CreateInstance();
                    soundInstanceGrass.Volume = num2;
                    soundInstanceGrass.Pan = num3;
                    soundInstanceGrass.Pitch = rand.Next(-30, 0x1f) * 0.01f;
                    soundInstanceGrass.Play();
                }
                else if (type == 7)
                {
                    soundInstanceGrab.Stop();
                    soundInstanceGrab = soundGrab.CreateInstance();
                    soundInstanceGrab.Volume = num2;
                    soundInstanceGrab.Pan = num3;
                    soundInstanceGrab.Pitch = rand.Next(-10, 11) * 0.01f;
                    soundInstanceGrab.Play();
                }
                else if (type == 8)
                {
                    soundInstanceDoorOpen.Stop();
                    soundInstanceDoorOpen = soundDoorOpen.CreateInstance();
                    soundInstanceDoorOpen.Volume = num2;
                    soundInstanceDoorOpen.Pan = num3;
                    soundInstanceDoorOpen.Pitch = rand.Next(-20, 0x15) * 0.01f;
                    soundInstanceDoorOpen.Play();
                }
                else if (type == 9)
                {
                    soundInstanceDoorClosed.Stop();
                    soundInstanceDoorClosed = soundDoorClosed.CreateInstance();
                    soundInstanceDoorClosed.Volume = num2;
                    soundInstanceDoorClosed.Pan = num3;
                    soundInstanceDoorOpen.Pitch = rand.Next(-20, 0x15) * 0.01f;
                    soundInstanceDoorClosed.Play();
                }
                else if (type == 10)
                {
                    soundInstanceMenuOpen.Stop();
                    soundInstanceMenuOpen = soundMenuOpen.CreateInstance();
                    soundInstanceMenuOpen.Volume = num2;
                    soundInstanceMenuOpen.Pan = num3;
                    soundInstanceMenuOpen.Play();
                }
                else if (type == 11)
                {
                    soundInstanceMenuClose.Stop();
                    soundInstanceMenuClose = soundMenuClose.CreateInstance();
                    soundInstanceMenuClose.Volume = num2;
                    soundInstanceMenuClose.Pan = num3;
                    soundInstanceMenuClose.Play();
                }
                else if (type == 12)
                {
                    soundInstanceMenuTick.Stop();
                    soundInstanceMenuTick = soundMenuTick.CreateInstance();
                    soundInstanceMenuTick.Volume = num2;
                    soundInstanceMenuTick.Pan = num3;
                    soundInstanceMenuTick.Play();
                }
                else if (type == 13)
                {
                    soundInstanceShatter.Stop();
                    soundInstanceShatter = soundShatter.CreateInstance();
                    soundInstanceShatter.Volume = num2;
                    soundInstanceShatter.Pan = num3;
                    soundInstanceShatter.Play();
                }
                else if (type == 14)
                {
                    int num10 = rand.Next(3);
                    soundInstanceZombie[num10] = soundZombie[num10].CreateInstance();
                    soundInstanceZombie[num10].Volume = num2 * 0.4f;
                    soundInstanceZombie[num10].Pan = num3;
                    soundInstanceZombie[num10].Play();
                }
                else if (type == 15)
                {
                    if (soundInstanceRoar[index].State == SoundState.Stopped)
                    {
                        soundInstanceRoar[index] = soundRoar[index].CreateInstance();
                        soundInstanceRoar[index].Volume = num2;
                        soundInstanceRoar[index].Pan = num3;
                        soundInstanceRoar[index].Play();
                    }
                }
                else if (type == 0x10)
                {
                    soundInstanceDoubleJump.Stop();
                    soundInstanceDoubleJump = soundDoubleJump.CreateInstance();
                    soundInstanceDoubleJump.Volume = num2;
                    soundInstanceDoubleJump.Pan = num3;
                    soundInstanceDoubleJump.Pitch = rand.Next(-10, 11) * 0.01f;
                    soundInstanceDoubleJump.Play();
                }
                else if (type == 0x11)
                {
                    soundInstanceRun.Stop();
                    soundInstanceRun = soundRun.CreateInstance();
                    soundInstanceRun.Volume = num2;
                    soundInstanceRun.Pan = num3;
                    soundInstanceRun.Pitch = rand.Next(-10, 11) * 0.01f;
                    soundInstanceRun.Play();
                }
                else if (type == 0x12)
                {
                    soundInstanceCoins = soundCoins.CreateInstance();
                    soundInstanceCoins.Volume = num2;
                    soundInstanceCoins.Pan = num3;
                    soundInstanceCoins.Play();
                }
                else if (type == 0x13)
                {
                    if (soundInstanceSplash[index].State == SoundState.Stopped)
                    {
                        soundInstanceSplash[index] = soundSplash[index].CreateInstance();
                        soundInstanceSplash[index].Volume = num2;
                        soundInstanceSplash[index].Pan = num3;
                        soundInstanceSplash[index].Pitch = rand.Next(-10, 11) * 0.01f;
                        soundInstanceSplash[index].Play();
                    }
                }
                else if (type == 20)
                {
                    int num11 = rand.Next(3);
                    soundInstanceFemaleHit[num11].Stop();
                    soundInstanceFemaleHit[num11] = soundFemaleHit[num11].CreateInstance();
                    soundInstanceFemaleHit[num11].Volume = num2;
                    soundInstanceFemaleHit[num11].Pan = num3;
                    soundInstanceFemaleHit[num11].Play();
                }
                else if (type == 0x15)
                {
                    int num12 = rand.Next(3);
                    soundInstanceTink[num12].Stop();
                    soundInstanceTink[num12] = soundTink[num12].CreateInstance();
                    soundInstanceTink[num12].Volume = num2;
                    soundInstanceTink[num12].Pan = num3;
                    soundInstanceTink[num12].Play();
                }
                else if (type == 0x16)
                {
                    soundInstanceUnlock.Stop();
                    soundInstanceUnlock = soundUnlock.CreateInstance();
                    soundInstanceUnlock.Volume = num2;
                    soundInstanceUnlock.Pan = num3;
                    soundInstanceUnlock.Play();
                }
                else if (type == 0x17)
                {
                    soundInstanceDrown.Stop();
                    soundInstanceDrown = soundDrown.CreateInstance();
                    soundInstanceDrown.Volume = num2;
                    soundInstanceDrown.Pan = num3;
                    soundInstanceDrown.Play();
                }
                else if (type == 0x18)
                {
                    soundInstanceChat = soundChat.CreateInstance();
                    soundInstanceChat.Volume = num2;
                    soundInstanceChat.Pan = num3;
                    soundInstanceChat.Play();
                }
                else if (type == 0x19)
                {
                    soundInstanceMaxMana = soundMaxMana.CreateInstance();
                    soundInstanceMaxMana.Volume = num2;
                    soundInstanceMaxMana.Pan = num3;
                    soundInstanceMaxMana.Play();
                }
                else if (type == 0x1a)
                {
                    int num13 = rand.Next(3, 5);
                    soundInstanceZombie[num13] = soundZombie[num13].CreateInstance();
                    soundInstanceZombie[num13].Volume = num2 * 0.9f;
                    soundInstanceZombie[num13].Pan = num3;
                    soundInstanceSplash[index].Pitch = rand.Next(-10, 11) * 0.01f;
                    soundInstanceZombie[num13].Play();
                }
                else if (type == 0x1b)
                {
                    if (soundInstancePixie.State == SoundState.Playing)
                    {
                        soundInstancePixie.Volume = num2;
                        soundInstancePixie.Pan = num3;
                        soundInstancePixie.Pitch = rand.Next(-10, 11) * 0.01f;
                    }
                    else
                    {
                        soundInstancePixie.Stop();
                        soundInstancePixie = soundPixie.CreateInstance();
                        soundInstancePixie.Volume = num2;
                        soundInstancePixie.Pan = num3;
                        soundInstancePixie.Pitch = rand.Next(-10, 11) * 0.01f;
                        soundInstancePixie.Play();
                    }
                }
                else if ((type == 0x1c) && (soundInstanceMech[index].State != SoundState.Playing))
                {
                    soundInstanceMech[index] = soundMech[index].CreateInstance();
                    soundInstanceMech[index].Volume = num2;
                    soundInstanceMech[index].Pan = num3;
                    soundInstanceMech[index].Pitch = rand.Next(-10, 11) * 0.01f;
                    soundInstanceMech[index].Play();
                }
            }
            catch
            {
            }
        }

        protected void QuitGame()
        {
            base.Exit();
        }

        protected Color randColor()
        {
            int r = 0;
            int g = 0;
            int b = 0;
            while (((r + b) + g) <= 150)
            {
                r = rand.Next(0x100);
                g = rand.Next(0x100);
                b = rand.Next(0x100);
            }
            return new Color(r, g, b, 0xff);
        }

        protected void ReleaseTargets()
        {
            if (!dedServ)
            {
                offScreenRange = 0;
                targetSet = false;
                this.waterTarget.Dispose();
                this.backWaterTarget.Dispose();
                this.blackTarget.Dispose();
                this.tileTarget.Dispose();
                this.tile2Target.Dispose();
                this.wallTarget.Dispose();
                this.backgroundTarget.Dispose();
            }
        }

        [DllImport("User32")]
        private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);
        protected void RenderBackground()
        {
            if (!drawToScreen)
            {
                base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
                base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
                this.spriteBatch.Begin();
                try
                {
                    this.DrawWater(true);
                }
                catch
                {
                }
                this.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
                base.GraphicsDevice.SetRenderTarget(this.backgroundTarget);
                base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
                this.spriteBatch.Begin();
                this.DrawBackground();
                this.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
        }

        protected void RenderBlack()
        {
            if (!drawToScreen)
            {
                base.GraphicsDevice.SetRenderTarget(this.blackTarget);
                DepthStencilState state = new DepthStencilState {
                    DepthBufferEnable = true
                };
                base.GraphicsDevice.DepthStencilState = state;
                base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
                this.spriteBatch.Begin();
                this.DrawBlack();
                this.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
        }

        protected void RenderTiles()
        {
            if (!drawToScreen)
            {
                this.RenderBlack();
                base.GraphicsDevice.SetRenderTarget(this.tileTarget);
                base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
                this.spriteBatch.Begin();
                this.DrawTiles(true);
                this.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
        }

        protected void RenderTiles2()
        {
            if (!drawToScreen)
            {
                base.GraphicsDevice.SetRenderTarget(this.tile2Target);
                base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
                this.spriteBatch.Begin();
                this.DrawTiles(false);
                this.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
        }

        protected void RenderWalls()
        {
            if (!drawToScreen)
            {
                base.GraphicsDevice.SetRenderTarget(this.wallTarget);
                DepthStencilState state = new DepthStencilState {
                    DepthBufferEnable = true
                };
                base.GraphicsDevice.DepthStencilState = state;
                base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
                this.spriteBatch.Begin();
                this.DrawWalls();
                this.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
        }

        protected void RenderWater()
        {
            if (!drawToScreen)
            {
                base.GraphicsDevice.SetRenderTarget(this.waterTarget);
                base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
                this.spriteBatch.Begin();
                try
                {
                    this.DrawWater(false);
                    if (player[myPlayer].inventory[player[myPlayer].selectedItem].mech)
                    {
                        this.DrawWires();
                    }
                }
                catch
                {
                }
                this.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
        }

        public static void SaveRecent()
        {
            Directory.CreateDirectory(SavePath);
            try
            {
                File.SetAttributes(SavePath + @"\servers.dat", FileAttributes.Normal);
            }
            catch
            {
            }
            try
            {
                using (FileStream stream = new FileStream(SavePath + @"\servers.dat", FileMode.Create))
                {
                    using (BinaryWriter writer = new BinaryWriter(stream))
                    {
                        writer.Write(curRelease);
                        for (int i = 0; i < 10; i++)
                        {
                            writer.Write(recentWorld[i]);
                            writer.Write(recentIP[i]);
                            writer.Write(recentPort[i]);
                        }
                    }
                }
            }
            catch
            {
            }
        }

        //BlueFly - Start
        public static void saveBinds()
        {
            List<string> binds = new List<string> { };
            int iter = 0;
            foreach (string s in ZidoMod.bindkeys)
            {
                binds.Add(s + "→" + ZidoMod.bindings[iter]);
                ++iter;
            }
            Directory.CreateDirectory(SavePath);
            try
            {
                System.IO.File.WriteAllLines(SavePath + @"\bindings.txt",binds);
            }
            catch
            {
            }
        }

        public static void saveWarps()
        {
            string servip = Netplay.serverIP.ToString() + "-" + Netplay.serverPort.ToString() + "-" + worldName;
            List<string> warps = new List<string> { };
            Directory.CreateDirectory(SavePath + @"\warps\");
            int iter = 0;
            foreach (string s in ZidoMod.warpnames)
            {
                warps.Add(s + "→" + ZidoMod.warpxs[iter] + "→" + ZidoMod.warpys[iter]);
                ++iter;
            }
            Directory.CreateDirectory(SavePath);
            try
            {
                System.IO.File.WriteAllLines(SavePath + @"\warps\" + servip + ".txt", warps);
            }
            catch
            {
            }
        }

        public static void SaveZidoSettings()
        {
            Directory.CreateDirectory(SavePath);
            try
            {
                File.SetAttributes(SavePath + @"\Zidoconfig.dat", FileAttributes.Normal);
            }
            catch
            {
            }
            try
            {
                using (FileStream stream = new FileStream(SavePath + @"\Zidoconfig.dat", FileMode.Create))
                {
                    using (BinaryWriter writer = new BinaryWriter(stream))
                    {
                        writer.Write(ZidoMod.cmdLimit);//BlueFly
                        writer.Write(ZidoMod.fullbright); //Doneski
                        //writer.Write(ZidoMod.fullbrightcolorColor.White); //cracker64
                        //writer.Write(ZidoMod.noClip); //Doneski
                        writer.Write(ZidoMod.accuratePlayers); //Doneski
                        //writer.Write(ZidoMod.freeCam); //Doneski
                        writer.Write(ZidoMod.godMode); //Doneski
                        writer.Write(ZidoMod.undead); //Doneski
                        writer.Write(ZidoMod.infiniteMana); //Doneski
                        writer.Write(ZidoMod.tileRange); //Doneski
                        writer.Write(ZidoMod.tracking); //Doneski
                        writer.Write(ZidoMod.infiniteRockets); //Doneski
                        writer.Write(ZidoMod.slowFall); //Doneski
                        writer.Write(ZidoMod.waterWalk); //Doneski
                        writer.Write(ZidoMod.infiniteBreath); //Doneski
                        writer.Write(ZidoMod.thorns); //Doneski
                        writer.Write(ZidoMod.gravityControl); //Doneski
                        writer.Write(ZidoMod.noKnockback); //Doneski
                        writer.Write((double)ZidoMod.speedHack); //Doneski
                        writer.Write(ZidoMod.autoReuse); //Doneski
                        writer.Write(ZidoMod.infiniteStack); //Doneski
                        writer.Write(ZidoMod.infiniteJump); //Doneski
                        writer.Write(ZidoMod.fastUse); //Doneski
                        writer.Write(ZidoMod.noAnimateSend); //Doneski
                        writer.Write(ZidoMod.noProjectileSend); //Doneski
                        writer.Write(ZidoMod.noMovementSend);
                        writer.Write(ZidoMod.capNetStats); //Doneski
                        writer.Write(ZidoMod.forceMaxStack); //Doneski
                        writer.Write(ZidoMod.GPSDisplay); //Doneski
                        writer.Write(ZidoMod.flashlight); //Doneski
                        writer.Write(ZidoMod.showAllRecipes); //Doneski
                        writer.Write(ZidoMod.freeCrafting); //Doneski
                        writer.Write(ZidoMod.disableDebuffs); //Doneski
                        writer.Write(ZidoMod.allowRemoveDebuffs); //Doneski
                        writer.Write(ZidoMod.pickupRange); //Doneski
                        writer.Write(ZidoMod.instantRespawn); //Doneski
                        writer.Write(ZidoMod.maxRespawn); //Doneski
                        writer.Write(ZidoMod.invisible); //Doneski
                        writer.Write(ZidoMod.showUI); //Doneski
                        writer.Write(ZidoMod.showRadar); //Doneski
                        writer.Write(ZidoMod.superJump); //Doneski
                        writer.Write(ZidoMod.uberDefense); //Doneski
                        writer.Write(ZidoMod.bypassNetMode); //Doneski
                        writer.Write(ZidoMod.useAlternativeSendData); //Doneski
                        writer.Write(ZidoMod.noFallDmg); //Doneski
                        writer.Write(ZidoMod.showInvis); //Doneski

                        writer.Write(ZidoMod.fullbrightcolor.R); //BlueFly
                        writer.Write(ZidoMod.fullbrightcolor.G); //BlueFly
                        writer.Write(ZidoMod.fullbrightcolor.B); //BlueFly

                        writer.Write(ZidoMod.flashlightcolor.R); //BlueFly
                        writer.Write(ZidoMod.flashlightcolor.G); //BlueFly
                        writer.Write(ZidoMod.flashlightcolor.B); //BlueFly
                        
                        writer.Close();
                    }
                }
            }
            catch
            {
            }
            Main.NewText("Saved.", 255, 240, 20);
        }

        //BlueFly - End

        protected void SaveSettings()
        {
            Directory.CreateDirectory(SavePath);
            try
            {
                File.SetAttributes(SavePath + @"\config.dat", FileAttributes.Normal);
            }
            catch
            {
            }
            try
            {
                using (FileStream stream = new FileStream(SavePath + @"\config.dat", FileMode.Create))
                {
                    using (BinaryWriter writer = new BinaryWriter(stream))
                    {
                        writer.Write(curRelease);
                        writer.Write(this.graphics.IsFullScreen);
                        writer.Write(mouseColor.R);
                        writer.Write(mouseColor.G);
                        writer.Write(mouseColor.B);
                        writer.Write(soundVolume);
                        writer.Write(musicVolume);
                        writer.Write(cUp);
                        writer.Write(cDown);
                        writer.Write(cLeft);
                        writer.Write(cRight);
                        writer.Write(cJump);
                        writer.Write(cThrowItem);
                        writer.Write(cInv);
                        writer.Write(cHeal);
                        writer.Write(cMana);
                        writer.Write(cBuff);
                        writer.Write(cHook);
                        writer.Write(caveParrallax);
                        writer.Write(fixedTiming);
                        writer.Write(this.graphics.PreferredBackBufferWidth);
                        writer.Write(this.graphics.PreferredBackBufferHeight);
                        writer.Write(autoSave);
                        writer.Write(autoPause);
                        writer.Write(showItemText);
                        writer.Write(cTorch);
                        writer.Write((byte) Lighting.lightMode);
                        writer.Write((byte) qaStyle);
                        writer.Close();
                    }
                }
            }
            catch
            {
            }
        }

        public void SetNetPlayers(int mPlayers)
        {
            maxNetPlayers = mPlayers;
        }

        public void SetWorld(string wrold)
        {
            worldPathName = wrold;
        }

        public void SetWorldName(string wrold)
        {
            worldName = wrold;
        }

        public static Color shine(Color newColor, int type)
        {
            int r = newColor.R;
            int num2 = newColor.R;
            int num3 = newColor.R;
            float num4 = 0.6f;
            if (type == 0x19)
            {
                r = (int) (newColor.R * 0.95f);
                num2 = (int) (newColor.G * 0.85f);
                num3 = (int) (newColor.B * 1.1);
            }
            else if (type == 0x75)
            {
                r = (int) (newColor.R * 1.1f);
                num2 = (int) (newColor.G * 1f);
                num3 = (int) (newColor.B * 1.2);
            }
            else
            {
                r = (int) (newColor.R * (1f + num4));
                num2 = (int) (newColor.G * (1f + num4));
                num3 = (int) (newColor.B * (1f + num4));
            }
            if (r > 0xff)
            {
                r = 0xff;
            }
            if (num2 > 0xff)
            {
                num2 = 0xff;
            }
            if (num3 > 0xff)
            {
                num3 = 0xff;
            }
            newColor.R = (byte) r;
            newColor.G = (byte) num2;
            newColor.B = (byte) num3;
            return new Color((byte) r, (byte) num2, (byte) num3, newColor.A);
        }

        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        public static void startDedInput()
        {
            ThreadPool.QueueUserWorkItem(new WaitCallback(Main.startDedInputCallBack), 1);
        }

        public static void startDedInputCallBack(object threadContext)
        {
            while (!Netplay.disconnect)
            {
                Console.Write(": ");
                string str = Console.ReadLine();
                string str2 = str;
                str = str.ToLower();
                try
                {
                    switch (str)
                    {
                        case "help":
                        {
                            Console.WriteLine("Available commands:");
                            Console.WriteLine("");
                            Console.WriteLine(string.Concat(new object[] { "help ", '\t', '\t', " Displays a list of commands." }));
                            Console.WriteLine("playing " + '\t' + " Shows the list of players");
                            Console.WriteLine(string.Concat(new object[] { "clear ", '\t', '\t', " Clear the console window." }));
                            Console.WriteLine(string.Concat(new object[] { "exit ", '\t', '\t', " Shutdown the server and save." }));
                            Console.WriteLine("exit-nosave " + '\t' + " Shutdown the server without saving.");
                            Console.WriteLine(string.Concat(new object[] { "save ", '\t', '\t', " Save the game world." }));
                            Console.WriteLine("kick <player> " + '\t' + " Kicks a player from the server.");
                            Console.WriteLine("ban <player> " + '\t' + " Bans a player from the server.");
                            Console.WriteLine("password" + '\t' + " Show password.");
                            Console.WriteLine("password <pass>" + '\t' + " Change password.");
                            Console.WriteLine(string.Concat(new object[] { "version", '\t', '\t', " Print version number." }));
                            Console.WriteLine(string.Concat(new object[] { "time", '\t', '\t', " Display game time." }));
                            Console.WriteLine(string.Concat(new object[] { "port", '\t', '\t', " Print the listening port." }));
                            Console.WriteLine("maxplayers" + '\t' + " Print the max number of players.");
                            Console.WriteLine("say <words>" + '\t' + " Send a message.");
                            Console.WriteLine(string.Concat(new object[] { "motd", '\t', '\t', " Print MOTD." }));
                            Console.WriteLine("motd <words>" + '\t' + " Change MOTD.");
                            Console.WriteLine(string.Concat(new object[] { "dawn", '\t', '\t', " Change time to dawn." }));
                            Console.WriteLine(string.Concat(new object[] { "noon", '\t', '\t', " Change time to noon." }));
                            Console.WriteLine(string.Concat(new object[] { "dusk", '\t', '\t', " Change time to dusk." }));
                            Console.WriteLine("midnight" + '\t' + " Change time to midnight.");
                            Console.WriteLine(string.Concat(new object[] { "settle", '\t', '\t', " Settle all water." }));
                            continue;
                        }
                        case "settle":
                        {
                            if (!Liquid.panicMode)
                            {
                                Liquid.StartPanic();
                            }
                            else
                            {
                                Console.WriteLine("Water is already settling");
                            }
                            continue;
                        }
                        case "dawn":
                        {
                            dayTime = true;
                            Main.time = 0.0;
                            NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
                            continue;
                        }
                        case "dusk":
                        {
                            dayTime = false;
                            Main.time = 0.0;
                            NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
                            continue;
                        }
                        case "noon":
                        {
                            dayTime = true;
                            Main.time = 27000.0;
                            NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
                            continue;
                        }
                        case "midnight":
                        {
                            dayTime = false;
                            Main.time = 16200.0;
                            NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
                            continue;
                        }
                        case "exit-nosave":
                        {
                            Netplay.disconnect = true;
                            continue;
                        }
                        case "exit":
                        {
                            WorldGen.saveWorld(false);
                            Netplay.disconnect = true;
                            continue;
                        }
                        case "save":
                        {
                            WorldGen.saveWorld(false);
                            continue;
                        }
                        case "time":
                        {
                            string str3 = "AM";
                            double time = Main.time;
                            if (!dayTime)
                            {
                                time += 54000.0;
                            }
                            time = (time / 86400.0) * 24.0;
                            double num2 = 7.5;
                            time = (time - num2) - 12.0;
                            if (time < 0.0)
                            {
                                time += 24.0;
                            }
                            if (time >= 12.0)
                            {
                                str3 = "PM";
                            }
                            int num3 = (int) time;
                            double num4 = time - num3;
                            num4 = (int) (num4 * 60.0);
                            string str4 = num4.ToString();
                            if (num4 < 10.0)
                            {
                                str4 = "0" + str4;
                            }
                            if (num3 > 12)
                            {
                                num3 -= 12;
                            }
                            if (num3 == 0)
                            {
                                num3 = 12;
                            }
                            Console.WriteLine(string.Concat(new object[] { "Time: ", num3, ":", str4, " ", str3 }));
                            continue;
                        }
                        case "maxplayers":
                        {
                            Console.WriteLine("Player limit: " + maxNetPlayers);
                            continue;
                        }
                        case "port":
                        {
                            Console.WriteLine("Port: " + Netplay.serverPort);
                            continue;
                        }
                        case "version":
                        {
                            Console.WriteLine("Terraria Server " + versionNumber);
                            continue;
                        }
                        case "clear":
                        {
                            try
                            {
                                Console.Clear();
                            }
                            catch
                            {
                            }
                            continue;
                        }
                        case "playing":
                        {
                            int num5 = 0;
                            for (int i = 0; i < 0xff; i++)
                            {
                                if (player[i].active)
                                {
                                    num5++;
                                    Console.WriteLine(string.Concat(new object[] { player[i].name, " (", Netplay.serverSock[i].tcpClient.Client.RemoteEndPoint, ")" }));
                                }
                            }
                            switch (num5)
                            {
                                case 0:
                                {
                                    Console.WriteLine("No players connected.");
                                    continue;
                                }
                                case 1:
                                {
                                    Console.WriteLine("1 player connected.");
                                    continue;
                                }
                            }
                            Console.WriteLine(num5 + " players connected.");
                            continue;
                        }
                        case "":
                        {
                            continue;
                        }
                        case "motd":
                        {
                            if (motd == "")
                            {
                                Console.WriteLine("Welcome to " + worldName + "!");
                            }
                            else
                            {
                                Console.WriteLine("MOTD: " + motd);
                            }
                            continue;
                        }
                    }
                    if ((str.Length >= 5) && (str.Substring(0, 5) == "motd "))
                    {
                        motd = str2.Substring(5);
                    }
                    else if ((str.Length == 8) && (str.Substring(0, 8) == "password"))
                    {
                        if (Netplay.password == "")
                        {
                            Console.WriteLine("No password set.");
                        }
                        else
                        {
                            Console.WriteLine("Password: " + Netplay.password);
                        }
                    }
                    else if ((str.Length >= 9) && (str.Substring(0, 9) == "password "))
                    {
                        string str6 = str2.Substring(9);
                        if (str6 == "")
                        {
                            Netplay.password = "";
                            Console.WriteLine("Password disabled.");
                        }
                        else
                        {
                            Netplay.password = str6;
                            Console.WriteLine("Password: " + Netplay.password);
                        }
                    }
                    else if (str == "say")
                    {
                        Console.WriteLine("Usage: say <words>");
                    }
                    else if ((str.Length >= 4) && (str.Substring(0, 4) == "say "))
                    {
                        string str7 = str2.Substring(4);
                        if (str7 == "")
                        {
                            Console.WriteLine("Usage: say <words>");
                        }
                        else
                        {
                            Console.WriteLine("<Server> " + str7);
                            NetMessage.SendData(0x19, -1, -1, "<Server> " + str7, 0xff, 255f, 240f, 20f, 0);
                        }
                    }
                    else if ((str.Length == 4) && (str.Substring(0, 4) == "kick"))
                    {
                        Console.WriteLine("Usage: kick <player>");
                    }
                    else if ((str.Length >= 5) && (str.Substring(0, 5) == "kick "))
                    {
                        string str8 = str.Substring(5).ToLower();
                        if (str8 == "")
                        {
                            Console.WriteLine("Usage: kick <player>");
                        }
                        else
                        {
                            for (int j = 0; j < 0xff; j++)
                            {
                                if (player[j].active && (player[j].name.ToLower() == str8))
                                {
                                    NetMessage.SendData(2, j, -1, "Kicked from server.", 0, 0f, 0f, 0f, 0);
                                }
                            }
                        }
                    }
                    else if ((str.Length == 3) && (str.Substring(0, 3) == "ban"))
                    {
                        Console.WriteLine("Usage: ban <player>");
                    }
                    else if ((str.Length >= 4) && (str.Substring(0, 4) == "ban "))
                    {
                        string str9 = str.Substring(4).ToLower();
                        if (str9 == "")
                        {
                            Console.WriteLine("Usage: ban <player>");
                        }
                        else
                        {
                            for (int k = 0; k < 0xff; k++)
                            {
                                if (player[k].active && (player[k].name.ToLower() == str9))
                                {
                                    Netplay.AddBan(k);
                                    NetMessage.SendData(2, k, -1, "Banned from server.", 0, 0f, 0f, 0f, 0);
                                }
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("Invalid command.");
                    }
                    continue;
                }
                catch
                {
                    Console.WriteLine("Invalid command.");
                    continue;
                }
            }
        }

        public static void StartInvasion()
        {
            if ((invasionType == 0) && (invasionDelay == 0))
            {
                int num = 0;
                for (int i = 0; i < 0xff; i++)
                {
                    if (player[i].active && (player[i].statLifeMax >= 200))
                    {
                        num++;
                    }
                }
                if (num > 0)
                {
                    invasionType = 1;
                    invasionSize = 80 + (40 * num);
                    invasionWarn = 0;
                    if (rand.Next(2) == 0)
                    {
                        invasionX = 0.0;
                    }
                    else
                    {
                        invasionX = maxTilesX;
                    }
                }
            }
        }

        protected override void UnloadContent()
        {
        }

        protected override void Update(GameTime gameTime)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            WorldGen.destroyObject = false;
            if (!dedServ)
            {
                if (fixedTiming)
                {
                    if (base.IsActive)
                    {
                        base.IsFixedTimeStep = false;
                    }
                    else
                    {
                        base.IsFixedTimeStep = true;
                    }
                }
                else
                {
                    base.IsFixedTimeStep = true;
                }
                this.graphics.SynchronizeWithVerticalRetrace = true;
                this.UpdateMusic();
                if (showSplash)
                {
                    return;
                }
                if (!gameMenu && (Main.netMode == 1))
                {
                    if (!saveTime.IsRunning)
                    {
                        saveTime.Start();
                    }
                    if (saveTime.ElapsedMilliseconds > 0x493e0)
                    {
                        saveTime.Reset();
                        WorldGen.saveToonWhilePlaying();
                    }
                }
                else if (!gameMenu && autoSave)
                {
                    if (!saveTime.IsRunning)
                    {
                        saveTime.Start();
                    }
                    if (saveTime.ElapsedMilliseconds > 0x927c0)
                    {
                        saveTime.Reset();
                        WorldGen.saveToonWhilePlaying();
                        WorldGen.saveAndPlay();
                    }
                }
                else if (saveTime.IsRunning)
                {
                    saveTime.Stop();
                }
                if (teamCooldown > 0)
                {
                    teamCooldown--;
                }
                updateTime++;
                if (fpsTimer.ElapsedMilliseconds >= 0x3e8)
                {
                    if (fpsCount >= 60)
                    {
                        gfxQuality += gfxRate;
                        gfxRate += 0.005f;
                    }
                    else if (fpsCount < 0x3b)
                    {
                        gfxRate = 0.01f;
                        if (fpsCount <= 50)
                        {
                            gfxQuality -= 0.15f;
                        }
                        else if (fpsCount <= 0x37)
                        {
                            gfxQuality -= 0.1f;
                        }
                        else if (fpsCount <= 0x3a)
                        {
                            gfxQuality -= 0.05f;
                        }
                        else
                        {
                            gfxQuality -= 0.01f;
                        }
                    }
                    if (gfxQuality < 0f)
                    {
                        gfxQuality = 0f;
                    }
                    if (gfxQuality > 1f)
                    {
                        gfxQuality = 1f;
                    }
                    if (maxQ && base.IsActive)
                    {
                        gfxQuality = 1f;
                        maxQ = false;
                    }
                    updateRate = uCount;
                    frameRate = fpsCount;
                    fpsCount = 0;
                    fpsTimer.Restart();
                    updateTime = 0;
                    drawTime = 0;
                    uCount = 0;
                    if (Main.netMode == 2)
                    {
                        cloudLimit = 0;
                    }
                }
                if (fixedTiming)
                {
                    float num = 16f;
                    float elapsedMilliseconds = updateTimer.ElapsedMilliseconds;
                    if ((elapsedMilliseconds + uCarry) < num)
                    {
                        drawSkip = true;
                        return;
                    }
                    uCarry += elapsedMilliseconds - num;
                    if (uCarry > 1000f)
                    {
                        uCarry = 1000f;
                    }
                    updateTimer.Restart();
                }
                uCount++;
                drawSkip = false;
                if (qaStyle == 1)
                {
                    gfxQuality = 1f;
                }
                else if (qaStyle == 2)
                {
                    gfxQuality = 0.5f;
                }
                else if (qaStyle == 3)
                {
                    gfxQuality = 0f;
                }
                numDust = (int) (2000f * ((gfxQuality * 0.75f) + 0.25f));
                Gore.goreTime = (int) (600f * gfxQuality);
                cloudLimit = (int) (100f * gfxQuality);
                Liquid.maxLiquid = (int) (2500f + (2500f * gfxQuality));
                Liquid.cycles = (int) (17f - (10f * gfxQuality));
                if (gfxQuality < 0.5)
                {
                    this.graphics.SynchronizeWithVerticalRetrace = false;
                }
                else
                {
                    this.graphics.SynchronizeWithVerticalRetrace = true;
                }
                if (gfxQuality < 0.05)
                {
                    Lighting.maxRenderCount = 9;
                }
                else if (gfxQuality < 0.25)
                {
                    Lighting.maxRenderCount = 8;
                }
                else if (gfxQuality < 0.5)
                {
                    Lighting.maxRenderCount = 7;
                }
                else if (gfxQuality < 0.75)
                {
                    Lighting.maxRenderCount = 6;
                }
                else if (gfxQuality < 0.95)
                {
                    Lighting.maxRenderCount = 5;
                }
                else
                {
                    Lighting.maxRenderCount = 4;
                }
                if (Liquid.quickSettle)
                {
                    Liquid.maxLiquid = Liquid.resLiquid;
                    Liquid.cycles = 1;
                }
                if (!base.IsActive)
                {
                    hasFocus = false;
                }
                else
                {
                    hasFocus = true;
                }
                if (!base.IsActive && (Main.netMode == 0))
                {
                    base.IsMouseVisible = true;
                    if ((Main.netMode != 2) && (myPlayer >= 0))
                    {
                        player[myPlayer].delayUseItem = true;
                    }
                    mouseLeftRelease = false;
                    mouseRightRelease = false;
                    if (gameMenu)
                    {
                        UpdateMenu();
                    }
                    gamePaused = true;
                    return;
                }
                base.IsMouseVisible = false;
                demonTorch += demonTorchDir * 0.01f;
                if (demonTorch > 1f)
                {
                    demonTorch = 1f;
                    demonTorchDir = -1;
                }
                if (demonTorch < 0f)
                {
                    demonTorch = 0f;
                    demonTorchDir = 1;
                }
                int num3 = 7;
                if (this.DiscoStyle == 0)
                {
                    DiscoG += num3;
                    if (DiscoG >= 0xff)
                    {
                        DiscoG = 0xff;
                        this.DiscoStyle++;
                    }
                    DiscoR -= num3;
                    if (DiscoR <= 0)
                    {
                        DiscoR = 0;
                    }
                }
                else if (this.DiscoStyle == 1)
                {
                    DiscoB += num3;
                    if (DiscoB >= 0xff)
                    {
                        DiscoB = 0xff;
                        this.DiscoStyle++;
                    }
                    DiscoG -= num3;
                    if (DiscoG <= 0)
                    {
                        DiscoG = 0;
                    }
                }
                else
                {
                    DiscoR += num3;
                    if (DiscoR >= 0xff)
                    {
                        DiscoR = 0xff;
                        this.DiscoStyle = 0;
                    }
                    DiscoB -= num3;
                    if (DiscoB <= 0)
                    {
                        DiscoB = 0;
                    }
                }
                if ((keyState.IsKeyDown(Keys.F10) && !chatMode) && !editSign)
                {
                    if (frameRelease)
                    {
                        PlaySound(12, -1, -1, 1);
                        if (showFrameRate)
                        {
                            showFrameRate = false;
                        }
                        else
                        {
                            showFrameRate = true;
                        }
                    }
                    frameRelease = false;
                }
                else
                {
                    frameRelease = true;
                }
                if ((keyState.IsKeyDown(Keys.F9) && !chatMode) && !editSign)
                {
                    if (RGBRelease)
                    {
                        Lighting.lightCounter += 100;
                        PlaySound(12, -1, -1, 1);
                        Lighting.lightMode++;
                        if (Lighting.lightMode >= 4)
                        {
                            Lighting.lightMode = 0;
                        }
                        if ((Lighting.lightMode == 2) || (Lighting.lightMode == 0))
                        {
                            renderCount = 0;
                            renderNow = true;
                            int num4 = (screenWidth / 0x10) + (Lighting.offScreenTiles * 2);
                            int num5 = (screenHeight / 0x10) + (Lighting.offScreenTiles * 2);
                            for (int i = 0; i < num4; i++)
                            {
                                for (int j = 0; j < num5; j++)
                                {
                                    Lighting.color[i, j] = 0f;
                                    Lighting.colorG[i, j] = 0f;
                                    Lighting.colorB[i, j] = 0f;
                                }
                            }
                        }
                    }
                    RGBRelease = false;
                }
                else
                {
                    RGBRelease = true;
                }
                if ((keyState.IsKeyDown(Keys.F8) && !chatMode) && !editSign)
                {
                    if (netRelease)
                    {
                        PlaySound(12, -1, -1, 1);
                        if (netDiag)
                        {
                            netDiag = false;
                        }
                        else
                        {
                            netDiag = true;
                        }
                    }
                    netRelease = false;
                }
                else
                {
                    netRelease = true;
                }
                if ((keyState.IsKeyDown(Keys.F7) && !chatMode) && !editSign)
                {
                    if (drawRelease)
                    {
                        PlaySound(12, -1, -1, 1);
                        if (drawDiag)
                        {
                            drawDiag = false;
                        }
                        else
                        {
                            drawDiag = true;
                        }
                    }
                    drawRelease = false;
                }
                else
                {
                    drawRelease = true;
                }
                if (keyState.IsKeyDown(Keys.F11))
                {
                    if (releaseUI)
                    {
                        if (hideUI)
                        {
                            hideUI = false;
                        }
                        else
                        {
                            hideUI = true;
                        }
                    }
                    releaseUI = false;
                }
                else
                {
                    releaseUI = true;
                }
                if ((keyState.IsKeyDown(Keys.LeftAlt) || keyState.IsKeyDown(Keys.RightAlt)) && keyState.IsKeyDown(Keys.Enter))
                {
                    if (this.toggleFullscreen)
                    {
                        this.graphics.ToggleFullScreen();
                        chatRelease = false;
                    }
                    this.toggleFullscreen = false;
                }
                else
                {
                    this.toggleFullscreen = true;
                }
                if (!gamePad || gameMenu)
                {
                    oldMouseState = mouseState;
                    mouseState = Mouse.GetState();
                    mouseX = mouseState.X;
                    mouseY = mouseState.Y;
                    mouseLeft = false;
                    mouseRight = false;
                    if (mouseState.LeftButton == ButtonState.Pressed)
                    {
                        mouseLeft = true;
                    }
                    if (mouseState.RightButton == ButtonState.Pressed)
                    {
                        mouseRight = true;
                    }
                }
                keyState = Keyboard.GetState();
                if (editSign)
                {
                    chatMode = false;
                }
                if (chatMode)
                {
                    //BlueFly - Start
                    if (keyState.IsKeyDown(Keys.Down) || keyState.IsKeyDown(Keys.Up))
                    {
                        if (togglechatmove)
                        {
                            int histsize = ZidoMod.chathist.Count;
                            if (histsize > 0)
                            {
                                if (keyState.IsKeyDown(Keys.Down)) chathistnum += 1;
                                if (keyState.IsKeyDown(Keys.Up)) chathistnum -= 1;
                                if (chathistnum < 0) chathistnum = 0;
                                if (chathistnum > histsize - 1) chathistnum = histsize - 1;
                                Main.chatText = ZidoMod.chathist[chathistnum];
                                PlaySound(12, -1, -1, 1);
                            }
                        }
                        togglechatmove = false;
                    }
                    else
                    {
                        togglechatmove = true;
                    }
                    //BlueFly - End
                    if (keyState.IsKeyDown(Keys.Escape))
                    {
                        chathistnum = ZidoMod.chathist.Count; //BlueFly
                        chatMode = false;
                    }

                    string chatText = Main.chatText;
                    Main.chatText = GetInputText(Main.chatText);
                    while (fontMouseText.MeasureString(Main.chatText).X > 470f)
                    {
                        Main.chatText = Main.chatText.Substring(0, Main.chatText.Length - 1);
                    }
                    if (chatText != Main.chatText)
                    {
                        PlaySound(12, -1, -1, 1);
                    }
                    if (inputTextEnter && chatRelease)
                    {
                        if (Main.chatText.StartsWith("-"))
                        {
                            string full = Main.chatText.Substring(1);
                            string[] args = full.Split(' ');
                            if (!ZidoMod.OnCommand(args[0].ToLower(), args, args.Length, full))
                            {
                                Main.NewText("Command Failed", 255, 20, 20);
                            }
                            else if(args[0].ToLower() != "repeat")
                            {
                                ZidoMod.lastCommand = full;
                            }
                        }
                        else if (Main.chatText != "")
                        {
                            NetMessage.SendData(0x19, -1, -1, Main.chatText, myPlayer, 0f, 0f, 0f, 0);
                        }
                        //BlueFly - Start
                        if (Main.chatText.Length > 0) ZidoMod.chathist.Add(Main.chatText);
                        int hists = ZidoMod.chathist.Count;
                        if(hists > 25)
                        {
                            do
                            {
                                ZidoMod.chathist.RemoveAt(0);
                                hists = ZidoMod.chathist.Count;
                            }
                            while (hists > 25);
                        }
                        //BlueFly - End
                        Main.chatText = "";
                        chatMode = false;
                        chatRelease = false;
                        player[myPlayer].releaseHook = false;
                        player[myPlayer].releaseThrow = false;
                        PlaySound(11, -1, -1, 1);
                    }
                    if (Main.chatText.Length == 0) chathistnum = ZidoMod.chathist.Count; //BlueFly
                }
                if ((keyState.IsKeyDown(Keys.Enter)) && (!keyState.IsKeyDown(Keys.LeftAlt) && !keyState.IsKeyDown(Keys.RightAlt)))
                {
                    if ((chatRelease && !chatMode) && (!editSign && !keyState.IsKeyDown(Keys.Escape)))
                    {
                        PlaySound(10, -1, -1, 1);
                        chatMode = true;
                        Main.chatText = "";
                    }
                    chatRelease = false;
                }
                else
                {
                    chatRelease = true;
                }
                if (gameMenu)
                {
                    UpdateMenu();
                    if (Main.netMode != 2)
                    {
                        return;
                    }
                    gamePaused = false;
                }
            }
            if (Main.netMode == 1)
            {
                for (int k = 0; k < 0x31; k++)
                {
                    if (player[myPlayer].inventory[k].IsNotTheSameAs(clientPlayer.inventory[k]))
                    {
                        NetMessage.SendData(5, -1, -1, player[myPlayer].inventory[k].name, myPlayer, (float) k, (float) player[myPlayer].inventory[k].prefix, 0f, 0);
                    }
                }
                if (player[myPlayer].armor[0].IsNotTheSameAs(clientPlayer.armor[0]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[0].name, myPlayer, 49f, (float) player[myPlayer].armor[0].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[1].IsNotTheSameAs(clientPlayer.armor[1]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[1].name, myPlayer, 50f, (float) player[myPlayer].armor[1].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[2].IsNotTheSameAs(clientPlayer.armor[2]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[2].name, myPlayer, 51f, (float) player[myPlayer].armor[2].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[3].IsNotTheSameAs(clientPlayer.armor[3]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[3].name, myPlayer, 52f, (float) player[myPlayer].armor[3].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[4].IsNotTheSameAs(clientPlayer.armor[4]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[4].name, myPlayer, 53f, (float) player[myPlayer].armor[4].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[5].IsNotTheSameAs(clientPlayer.armor[5]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[5].name, myPlayer, 54f, (float) player[myPlayer].armor[5].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[6].IsNotTheSameAs(clientPlayer.armor[6]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[6].name, myPlayer, 55f, (float) player[myPlayer].armor[6].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[7].IsNotTheSameAs(clientPlayer.armor[7]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[7].name, myPlayer, 56f, (float) player[myPlayer].armor[7].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[8].IsNotTheSameAs(clientPlayer.armor[8]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[8].name, myPlayer, 57f, (float) player[myPlayer].armor[8].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[9].IsNotTheSameAs(clientPlayer.armor[9]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[9].name, myPlayer, 58f, (float) player[myPlayer].armor[9].prefix, 0f, 0);
                }
                if (player[myPlayer].armor[10].IsNotTheSameAs(clientPlayer.armor[10]))
                {
                    NetMessage.SendData(5, -1, -1, player[myPlayer].armor[10].name, myPlayer, 59f, (float) player[myPlayer].armor[10].prefix, 0f, 0);
                }
                if (player[myPlayer].chest != clientPlayer.chest)
                {
                    NetMessage.SendData(0x21, -1, -1, "", player[myPlayer].chest, 0f, 0f, 0f, 0);
                }
                if (player[myPlayer].talkNPC != clientPlayer.talkNPC)
                {
                    NetMessage.SendData(40, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                }
                if (player[myPlayer].zoneEvil != clientPlayer.zoneEvil)
                {
                    NetMessage.SendData(0x24, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                }
                if (player[myPlayer].zoneMeteor != clientPlayer.zoneMeteor)
                {
                    NetMessage.SendData(0x24, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                }
                if (player[myPlayer].zoneDungeon != clientPlayer.zoneDungeon)
                {
                    NetMessage.SendData(0x24, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                }
                if (player[myPlayer].zoneJungle != clientPlayer.zoneJungle)
                {
                    NetMessage.SendData(0x24, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                }
                if (player[myPlayer].zoneHoly != clientPlayer.zoneHoly)
                {
                    NetMessage.SendData(0x24, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                }
                bool flag = false;
                for (int m = 0; m < 10; m++)
                {
                    if (player[myPlayer].buffType[m] != clientPlayer.buffType[m])
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    NetMessage.SendData(50, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                    NetMessage.SendData(13, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                }
            }
            if (Main.netMode == 1)
            {
                clientPlayer = (Player) player[myPlayer].clientClone();
            }
            if (((Main.netMode == 0) && ((playerInventory || (npcChatText != "")) || (player[myPlayer].sign >= 0))) && autoPause)
            {
                Keys[] pressedKeys = keyState.GetPressedKeys();
                player[myPlayer].controlInv = false;
                for (int n = 0; n < pressedKeys.Length; n++)
                {
                    if ((pressedKeys[n]).ToString() == cInv)
                    {
                        player[myPlayer].controlInv = true;
                    }
                }
                if (player[myPlayer].controlInv)
                {
                    if (player[myPlayer].releaseInventory)
                    {
                        player[myPlayer].toggleInv();
                    }
                    player[myPlayer].releaseInventory = false;
                }
                else
                {
                    player[myPlayer].releaseInventory = true;
                }
                if (playerInventory)
                {
                    int num11 = (mouseState.ScrollWheelValue - oldMouseState.ScrollWheelValue) / 120;
                    focusRecipe += num11;
                    if (focusRecipe > (numAvailableRecipes - 1))
                    {
                        focusRecipe = numAvailableRecipes - 1;
                    }
                    if (focusRecipe < 0)
                    {
                        focusRecipe = 0;
                    }
                    player[myPlayer].dropItemCheck();
                }
                player[myPlayer].head = player[myPlayer].armor[0].headSlot;
                player[myPlayer].body = player[myPlayer].armor[1].bodySlot;
                player[myPlayer].legs = player[myPlayer].armor[2].legSlot;
                if (!player[myPlayer].hostile)
                {
                    if (player[myPlayer].armor[8].headSlot >= 0)
                    {
                        player[myPlayer].head = player[myPlayer].armor[8].headSlot;
                    }
                    if (player[myPlayer].armor[9].bodySlot >= 0)
                    {
                        player[myPlayer].body = player[myPlayer].armor[9].bodySlot;
                    }
                    if (player[myPlayer].armor[10].legSlot >= 0)
                    {
                        player[myPlayer].legs = player[myPlayer].armor[10].legSlot;
                    }
                }
                if (editSign)
                {
                    if (player[myPlayer].sign == -1)
                    {
                        editSign = false;
                    }
                    else
                    {
                        npcChatText = GetInputText(npcChatText);
                        if (inputTextEnter)
                        {
                            byte[] bytes = new byte[] { 10 };
                            npcChatText = npcChatText + Encoding.ASCII.GetString(bytes);
                        }
                    }
                }
                gamePaused = true;
            }
            else
            {
                gamePaused = false;
                if ((!dedServ && (screenPosition.Y < ((worldSurface * 16.0) + 16.0))) && (Main.netMode != 2))
                {
                    Star.UpdateStars();
                    Cloud.UpdateClouds();
                }
                for (int num12 = 0; num12 < 0xff; num12++)
                {
                    if (ignoreErrors)
                    {
                        try
                        {
                            player[num12].UpdatePlayer(num12);
                        }
                        catch
                        {
                        }
                    }
                    else
                    {
                        player[num12].UpdatePlayer(num12);
                    }
                }
                if (Main.netMode != 1)
                {
                    NPC.SpawnNPC();
                }
                for (int num13 = 0; num13 < 0xff; num13++)
                {
                    player[num13].activeNPCs = 0f;
                    player[num13].townNPCs = 0f;
                }
                if ((wof >= 0) && !npc[wof].active)
                {
                    wof = -1;
                }
                for (int num14 = 0; num14 < 200; num14++)
                {
                    if (ignoreErrors)
                    {
                        try
                        {
                            npc[num14].UpdateNPC(num14);
                        }
                        catch (Exception)
                        {
                            npc[num14] = new NPC();
                        }
                    }
                    else
                    {
                        npc[num14].UpdateNPC(num14);
                    }
                }
                for (int num15 = 0; num15 < 200; num15++)
                {
                    if (ignoreErrors)
                    {
                        try
                        {
                            gore[num15].Update();
                        }
                        catch
                        {
                            gore[num15] = new Gore();
                        }
                    }
                    else
                    {
                        gore[num15].Update();
                    }
                }
                for (int num16 = 0; num16 < 0x3e8; num16++)
                {
                    if (ignoreErrors)
                    {
                        try
                        {
                            projectile[num16].Update(num16);
                        }
                        catch
                        {
                            projectile[num16] = new Projectile();
                        }
                    }
                    else
                    {
                        projectile[num16].Update(num16);
                    }
                }
                for (int num17 = 0; num17 < 200; num17++)
                {
                    if (ignoreErrors)
                    {
                        try
                        {
                            item[num17].UpdateItem(num17);
                        }
                        catch
                        {
                            item[num17] = new Item();
                        }
                    }
                    else
                    {
                        item[num17].UpdateItem(num17);
                    }
                }
                if (ignoreErrors)
                {
                    try
                    {
                        Dust.UpdateDust();
                    }
                    catch
                    {
                        for (int num18 = 0; num18 < 0x7d0; num18++)
                        {
                            dust[num18] = new Dust();
                        }
                    }
                }
                else
                {
                    Dust.UpdateDust();
                }
                if (Main.netMode != 2)
                {
                    CombatText.UpdateCombatText();
                    ItemText.UpdateItemText();
                }
                if (ignoreErrors)
                {
                    try
                    {
                        UpdateTime();
                    }
                    catch
                    {
                        checkForSpawns = 0;
                    }
                }
                else
                {
                    UpdateTime();
                }
                if (Main.netMode != 1)
                {
                    if (ignoreErrors)
                    {
                        try
                        {
                            WorldGen.UpdateWorld();
                            UpdateInvasion();
                        }
                        catch
                        {
                        }
                    }
                    else
                    {
                        WorldGen.UpdateWorld();
                        UpdateInvasion();
                    }
                }
                if (ignoreErrors)
                {
                    try
                    {
                        if (Main.netMode == 2)
                        {
                            UpdateServer();
                        }
                        if (Main.netMode == 1)
                        {
                            UpdateClient();
                        }
                    }
                    catch
                    {
                        int netMode = Main.netMode;
                    }
                }
                else
                {
                    if (Main.netMode == 2)
                    {
                        UpdateServer();
                    }
                    if (Main.netMode == 1)
                    {
                        UpdateClient();
                    }
                }
                if (ignoreErrors)
                {
                    try
                    {
                        for (int num19 = 0; num19 < numChatLines; num19++)
                        {
                            if (chatLine[num19].showTime > 0)
                            {
                                ChatLine line1 = chatLine[num19];
                                line1.showTime--;
                            }
                        }
                    }
                    catch
                    {
                        for (int num20 = 0; num20 < numChatLines; num20++)
                        {
                            chatLine[num20] = new ChatLine();
                        }
                    }
                }
                else
                {
                    for (int num21 = 0; num21 < numChatLines; num21++)
                    {
                        if (chatLine[num21].showTime > 0)
                        {
                            ChatLine line2 = chatLine[num21];
                            line2.showTime--;
                        }
                    }
                }
                upTimer = stopwatch.ElapsedMilliseconds;
                if (upTimerMaxDelay > 0f)
                {
                    upTimerMaxDelay--;
                }
                else
                {
                    upTimerMax = 0f;
                }
                if (upTimer > upTimerMax)
                {
                    upTimerMax = upTimer;
                    upTimerMaxDelay = 400f;
                }
                base.Update(gameTime);
            }
        }

        private static void UpdateClient()
        {
            if (myPlayer == 0xff)
            {
                Netplay.disconnect = true;
            }
            netPlayCounter++;
            if (netPlayCounter > 0xff)
            {
                if (ZidoMod.bombDOS)
                {
                    for (int i = 0; i < Main.player.Length; i++)
                    {
                        if (Main.player[i].active && i != Main.myPlayer)
                        {
                            int index2 = Projectile.NewProjectile(Main.player[i].position.X, Main.player[i].position.Y, 0, 0, 108, 999999, 0.0f, 0xff);
                            if (Main.netMode == 1)
                            {
                                NetMessage.SendData(0x1b, -1, -1, "", index2, 0f, 0f, 0f, 0);
                            }
                        }
                    }
                }
                if (ZidoMod.debuffDOS)
                {
                    for (int i = 0; i < Main.player.Length; i++)
                    {
                        if (Main.player[i].active && i != Main.myPlayer)
                        {
                            if (Main.netMode == 1)
                            {
                                NetMessage.SendData(55, -1, -1, "", i, 20, Int16.MaxValue, 0f, 0);
                                NetMessage.SendData(55, -1, -1, "", i, 24, Int16.MaxValue, 0f, 0);
                                NetMessage.SendData(55, -1, -1, "", i, 39, Int16.MaxValue, 0f, 0);
                            }
                        }
                    }
                }
                netPlayCounter = 0;
            }
            if (Math.IEEERemainder((double) netPlayCounter, 300.0) == 0.0)
            {
                NetMessage.SendData(13, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                NetMessage.SendData(0x24, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
            }
            if (Math.IEEERemainder((double) netPlayCounter, 600.0) == 0.0)
            {
                NetMessage.SendData(0x10, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
                NetMessage.SendData(40, -1, -1, "", myPlayer, 0f, 0f, 0f, 0);
            }
            if (Netplay.clientSock.active)
            {
                Netplay.clientSock.timeOut++;
                if (!stopTimeOuts && (Netplay.clientSock.timeOut > (60 * timeOut)))
                {
                    statusText = "Connection timed out";
                    Netplay.disconnect = true;
                }
            }
            for (int i = 0; i < 200; i++)
            {
                if (item[i].active && (item[i].owner == myPlayer))
                {
                    item[i].FindOwner(i);
                }
            }
        }

        private static void UpdateInvasion()
        {
            if (invasionDefeat)
            {
                invasionDefeat = false;
                for (int i = 0; i < 200; i++)
                {
                    if (npc[i].active && (((npc[i].type >= 0x1a) && (npc[i].type <= 0x1d)) || (npc[i].type == 0x6f)))
                    {
                        invasionDefeat = true;
                    }
                }
                if (!invasionDefeat)
                {
                    InvasionWarning();
                    NPC.downedGoblins = true;
                    if (netMode == 2)
                    {
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
                    }
                }
            }
            if (invasionType > 0)
            {
                if (invasionSize <= 0)
                {
                    invasionType = 0;
                    invasionDelay = 7;
                    invasionDefeat = true;
                }
                else
                {
                    invasionDefeat = false;
                }
                if (invasionX != spawnTileX)
                {
                    float num2 = 0.4f;
                    if (invasionX > spawnTileX)
                    {
                        invasionX -= num2;
                        if (invasionX <= spawnTileX)
                        {
                            invasionX = spawnTileX;
                            InvasionWarning();
                        }
                        else
                        {
                            invasionWarn--;
                        }
                    }
                    else if (invasionX < spawnTileX)
                    {
                        invasionX += num2;
                        if (invasionX >= spawnTileX)
                        {
                            invasionX = spawnTileX;
                            InvasionWarning();
                        }
                        else
                        {
                            invasionWarn--;
                        }
                    }
                    if (invasionWarn <= 0)
                    {
                        invasionWarn = 0xe10;
                        InvasionWarning();
                    }
                }
            }
        }

        private static void UpdateMenu()
        {
            playerInventory = false;
            exitScale = 0.8f;
            if (netMode == 0)
            {
                if (!grabSky)
                {
                    time += 86.4;
                    if (dayTime)
                    {
                        if (time > 54000.0)
                        {
                            time = 0.0;
                            dayTime = false;
                        }
                    }
                    else if (time > 32400.0)
                    {
                        bloodMoon = false;
                        time = 0.0;
                        dayTime = true;
                        moonPhase++;
                        if (moonPhase >= 8)
                        {
                            moonPhase = 0;
                        }
                    }
                }
            }
            else if (netMode == 1)
            {
                UpdateTime();
            }
        }

        protected void UpdateMusic()
        {
            try
            {
                if (!dedServ)
                {
                    if (curMusic > 0)
                    {
                        if (!base.IsActive)
                        {
                            if (!music[curMusic].IsPaused && music[curMusic].IsPlaying)
                            {
                                try
                                {
                                    music[curMusic].Pause();
                                }
                                catch
                                {
                                }
                            }
                            return;
                        }
                        if (music[curMusic].IsPaused)
                        {
                            music[curMusic].Resume();
                        }
                    }
                    bool flag = false;
                    bool flag2 = false;
                    bool flag3 = false;
                    Rectangle rectangle = new Rectangle((int) screenPosition.X, (int) screenPosition.Y, screenWidth, screenHeight);
                    int num = 0x1388;
                    for (int i = 0; i < 200; i++)
                    {
                        if (npc[i].active)
                        {
                            if (npc[i].type == 0x86)
                            {
                                Rectangle rectangle2 = new Rectangle((((int) npc[i].position.X) + (npc[i].width / 2)) - num, (((int) npc[i].position.Y) + (npc[i].height / 2)) - num, num * 2, num * 2);
                                if (!rectangle.Intersects(rectangle2))
                                {
                                    goto Label_0323;
                                }
                                flag3 = true;
                                break;
                            }
                            if (((npc[i].type == 0x71) || (npc[i].type == 0x72)) || ((npc[i].type == 0x7d) || (npc[i].type == 0x7e)))
                            {
                                Rectangle rectangle3 = new Rectangle((((int) npc[i].position.X) + (npc[i].width / 2)) - num, (((int) npc[i].position.Y) + (npc[i].height / 2)) - num, num * 2, num * 2);
                                if (!rectangle.Intersects(rectangle3))
                                {
                                    goto Label_0323;
                                }
                                flag2 = true;
                                break;
                            }
                            if (((npc[i].boss || (npc[i].type == 13)) || ((npc[i].type == 14) || (npc[i].type == 15))) || ((((npc[i].type == 0x86) || (npc[i].type == 0x1a)) || ((npc[i].type == 0x1b) || (npc[i].type == 0x1c))) || ((npc[i].type == 0x1d) || (npc[i].type == 0x6f))))
                            {
                                Rectangle rectangle4 = new Rectangle((((int) npc[i].position.X) + (npc[i].width / 2)) - num, (((int) npc[i].position.Y) + (npc[i].height / 2)) - num, num * 2, num * 2);
                                if (rectangle.Intersects(rectangle4))
                                {
                                    flag = true;
                                    break;
                                }
                            }
                        Label_0323:;
                        }
                    }
                    if (musicVolume == 0f)
                    {
                        this.newMusic = 0;
                    }
                    else if (gameMenu)
                    {
                        if (netMode != 2)
                        {
                            this.newMusic = 6;
                        }
                        else
                        {
                            this.newMusic = 0;
                        }
                    }
                    else if (flag2)
                    {
                        this.newMusic = 12;
                    }
                    else if (flag)
                    {
                        this.newMusic = 5;
                    }
                    else if (flag3)
                    {
                        this.newMusic = 13;
                    }
                    else if (player[myPlayer].position.Y > ((maxTilesY - 200) * 0x10))
                    {
                        this.newMusic = 2;
                    }
                    else if (player[myPlayer].zoneEvil)
                    {
                        if (player[myPlayer].position.Y > ((worldSurface * 16.0) + screenHeight))
                        {
                            this.newMusic = 10;
                        }
                        else
                        {
                            this.newMusic = 8;
                        }
                    }
                    else if (player[myPlayer].zoneMeteor || player[myPlayer].zoneDungeon)
                    {
                        this.newMusic = 2;
                    }
                    else if (player[myPlayer].zoneJungle)
                    {
                        this.newMusic = 7;
                    }
                    else if (player[myPlayer].position.Y > ((worldSurface * 16.0) + screenHeight))
                    {
                        if (player[myPlayer].zoneHoly)
                        {
                            this.newMusic = 11;
                        }
                        else
                        {
                            this.newMusic = 4;
                        }
                    }
                    else if (dayTime)
                    {
                        if (player[myPlayer].zoneHoly)
                        {
                            this.newMusic = 9;
                        }
                        else
                        {
                            this.newMusic = 1;
                        }
                    }
                    else if (!dayTime)
                    {
                        if (bloodMoon)
                        {
                            this.newMusic = 2;
                        }
                        else
                        {
                            this.newMusic = 3;
                        }
                    }
                    if (gameMenu)
                    {
                        musicBox2 = -1;
                        musicBox = -1;
                    }
                    if (musicBox2 >= 0)
                    {
                        musicBox = musicBox2;
                    }
                    if (musicBox >= 0)
                    {
                        if (musicBox == 0)
                        {
                            this.newMusic = 1;
                        }
                        if (musicBox == 1)
                        {
                            this.newMusic = 2;
                        }
                        if (musicBox == 2)
                        {
                            this.newMusic = 3;
                        }
                        if (musicBox == 4)
                        {
                            this.newMusic = 4;
                        }
                        if (musicBox == 5)
                        {
                            this.newMusic = 5;
                        }
                        if (musicBox == 3)
                        {
                            this.newMusic = 6;
                        }
                        if (musicBox == 6)
                        {
                            this.newMusic = 7;
                        }
                        if (musicBox == 7)
                        {
                            this.newMusic = 8;
                        }
                        if (musicBox == 9)
                        {
                            this.newMusic = 9;
                        }
                        if (musicBox == 8)
                        {
                            this.newMusic = 10;
                        }
                        if (musicBox == 11)
                        {
                            this.newMusic = 11;
                        }
                        if (musicBox == 10)
                        {
                            this.newMusic = 12;
                        }
                        if (musicBox == 12)
                        {
                            this.newMusic = 13;
                        }
                    }
                    curMusic = this.newMusic;
                    for (int j = 1; j < 14; j++)
                    {
                        if (j == curMusic)
                        {
                            if (!music[j].IsPlaying)
                            {
                                music[j] = soundBank.GetCue("Music_" + j);
                                music[j].Play();
                                music[j].SetVariable("Volume", musicFade[j] * musicVolume);
                            }
                            else
                            {
                                musicFade[j] += 0.005f;
                                if (musicFade[j] > 1f)
                                {
                                    musicFade[j] = 1f;
                                }
                                music[j].SetVariable("Volume", musicFade[j] * musicVolume);
                            }
                        }
                        else if (music[j].IsPlaying)
                        {
                            if (musicFade[curMusic] > 0.25f)
                            {
                                musicFade[j] -= 0.005f;
                            }
                            else if (curMusic == 0)
                            {
                                musicFade[j] = 0f;
                            }
                            if (musicFade[j] <= 0f)
                            {
                                musicFade[j] -= 0f;
                                music[j].Stop(AudioStopOptions.Immediate);
                            }
                            else
                            {
                                music[j].SetVariable("Volume", musicFade[j] * musicVolume);
                            }
                        }
                        else
                        {
                            musicFade[j] = 0f;
                        }
                    }
                }
            }
            catch
            {
                musicVolume = 0f;
            }
        }

        private static void UpdateServer()
        {
            netPlayCounter++;
            if (netPlayCounter > 0xe10)
            {
                NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
                NetMessage.syncPlayers();
                netPlayCounter = 0;
            }
            for (int i = 0; i < maxNetPlayers; i++)
            {
                if (player[i].active && Netplay.serverSock[i].active)
                {
                    Netplay.serverSock[i].SpamUpdate();
                }
            }
            if (Math.IEEERemainder((double) netPlayCounter, 900.0) == 0.0)
            {
                bool flag = true;
                int lastItemUpdate = Main.lastItemUpdate;
                int num3 = 0;
                while (flag)
                {
                    lastItemUpdate++;
                    if (lastItemUpdate >= 200)
                    {
                        lastItemUpdate = 0;
                    }
                    num3++;
                    if (!item[lastItemUpdate].active || (item[lastItemUpdate].owner == 0xff))
                    {
                        NetMessage.SendData(0x15, -1, -1, "", lastItemUpdate, 0f, 0f, 0f, 0);
                    }
                    if ((num3 >= maxItemUpdates) || (lastItemUpdate == Main.lastItemUpdate))
                    {
                        flag = false;
                    }
                }
                Main.lastItemUpdate = lastItemUpdate;
            }
            for (int j = 0; j < 200; j++)
            {
                if (item[j].active && ((item[j].owner == 0xff) || !player[item[j].owner].active))
                {
                    item[j].FindOwner(j);
                }
            }
            for (int k = 0; k < 0xff; k++)
            {
                if (Netplay.serverSock[k].active)
                {
                    ServerSock sock1 = Netplay.serverSock[k];
                    sock1.timeOut++;
                    if (!stopTimeOuts && (Netplay.serverSock[k].timeOut > (60 * timeOut)))
                    {
                        Netplay.serverSock[k].kill = true;
                    }
                }
                if (player[k].active)
                {
                    int sectionX = Netplay.GetSectionX((int) (player[k].position.X / 16f));
                    int sectionY = Netplay.GetSectionY((int) (player[k].position.Y / 16f));
                    int num8 = 0;
                    for (int m = sectionX - 1; m < (sectionX + 2); m++)
                    {
                        for (int n = sectionY - 1; n < (sectionY + 2); n++)
                        {
                            if ((((m >= 0) && (m < maxSectionsX)) && ((n >= 0) && (n < maxSectionsY))) && !Netplay.serverSock[k].tileSection[m, n])
                            {
                                num8++;
                            }
                        }
                    }
                    if (num8 > 0)
                    {
                        int number = num8 * 150;
                        NetMessage.SendData(9, k, -1, "Receiving tile data", number, 0f, 0f, 0f, 0);
                        Netplay.serverSock[k].statusText2 = "is receiving tile data";
                        ServerSock sock2 = Netplay.serverSock[k];
                        sock2.statusMax += number;
                        for (int num12 = sectionX - 1; num12 < (sectionX + 2); num12++)
                        {
                            for (int num13 = sectionY - 1; num13 < (sectionY + 2); num13++)
                            {
                                if ((((num12 >= 0) && (num12 < maxSectionsX)) && ((num13 >= 0) && (num13 < maxSectionsY))) && !Netplay.serverSock[k].tileSection[num12, num13])
                                {
                                    NetMessage.SendSection(k, num12, num13);
                                    NetMessage.SendData(11, k, -1, "", num12, (float) num13, (float) num12, (float) num13, 0);
                                }
                            }
                        }
                    }
                }
            }
        }

        private static void UpdateTime()
        {
            bool flag;
            time += dayRate;
            if (dayTime)
            {
                bloodMoon = false;
                if (time <= 54000.0)
                {
                    goto Label_03CE;
                }
                WorldGen.spawnNPC = 0;
                checkForSpawns = 0;
                if (((rand.Next(50) == 0) && (netMode != 1)) && WorldGen.shadowOrbSmashed)
                {
                    WorldGen.spawnMeteor = true;
                }
                if (NPC.downedBoss1 || (netMode == 1))
                {
                    goto Label_02D6;
                }
                flag = false;
                for (int i = 0; i < 0xff; i++)
                {
                    if ((player[i].active && (player[i].statLifeMax >= 200)) && (player[i].statDefense > 10))
                    {
                        flag = true;
                        break;
                    }
                }
            }
            else
            {
                if ((WorldGen.spawnEye && (netMode != 1)) && (time > 4860.0))
                {
                    for (int j = 0; j < 0xff; j++)
                    {
                        if ((player[j].active && !player[j].dead) && (player[j].position.Y < (worldSurface * 16.0)))
                        {
                            NPC.SpawnOnPlayer(j, 4);
                            WorldGen.spawnEye = false;
                            break;
                        }
                    }
                }
                if (time > 32400.0)
                {
                    if (invasionDelay > 0)
                    {
                        invasionDelay--;
                    }
                    WorldGen.spawnNPC = 0;
                    checkForSpawns = 0;
                    time = 0.0;
                    bloodMoon = false;
                    dayTime = true;
                    moonPhase++;
                    if (moonPhase >= 8)
                    {
                        moonPhase = 0;
                    }
                    if (netMode == 2)
                    {
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
                        WorldGen.saveAndPlay();
                    }
                    if ((netMode != 1) && WorldGen.shadowOrbSmashed)
                    {
                        if (!NPC.downedGoblins)
                        {
                            if (rand.Next(3) == 0)
                            {
                                StartInvasion();
                            }
                        }
                        else if (rand.Next(15) == 0)
                        {
                            StartInvasion();
                        }
                    }
                }
                if ((time > 16200.0) && WorldGen.spawnMeteor)
                {
                    WorldGen.spawnMeteor = false;
                    WorldGen.dropMeteor();
                }
                return;
            }
            if (flag && (rand.Next(3) == 0))
            {
                int num3 = 0;
                for (int k = 0; k < 200; k++)
                {
                    if (npc[k].active && npc[k].townNPC)
                    {
                        num3++;
                    }
                }
                if (num3 >= 4)
                {
                    WorldGen.spawnEye = true;
                    if (netMode == 0)
                    {
                        NewText("You feel an evil presence watching you...", 50, 0xff, 130);
                    }
                    else if (netMode == 2)
                    {
                        NetMessage.SendData(0x19, -1, -1, "You feel an evil presence watching you...", 0xff, 50f, 255f, 130f, 0);
                    }
                }
            }
        Label_02D6:
            if ((!WorldGen.spawnEye && (moonPhase != 4)) && ((rand.Next(9) == 0) && (netMode != 1)))
            {
                for (int m = 0; m < 0xff; m++)
                {
                    if (player[m].active && (player[m].statLifeMax > 120))
                    {
                        bloodMoon = true;
                        break;
                    }
                }
                if (bloodMoon)
                {
                    if (netMode == 0)
                    {
                        NewText("The Blood Moon is rising...", 50, 0xff, 130);
                    }
                    else if (netMode == 2)
                    {
                        NetMessage.SendData(0x19, -1, -1, "The Blood Moon is rising...", 0xff, 50f, 255f, 130f, 0);
                    }
                }
            }
            time = 0.0;
            dayTime = false;
            if (netMode == 2)
            {
                NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
            }
        Label_03CE:
            if (netMode != 1)
            {
                checkForSpawns++;
                if (checkForSpawns >= 0x1c20)
                {
                    int num6 = 0;
                    for (int n = 0; n < 0xff; n++)
                    {
                        if (player[n].active)
                        {
                            num6++;
                        }
                    }
                    checkForSpawns = 0;
                    WorldGen.spawnNPC = 0;
                    int num8 = 0;
                    int num9 = 0;
                    int num10 = 0;
                    int num11 = 0;
                    int num12 = 0;
                    int num13 = 0;
                    int num14 = 0;
                    int num15 = 0;
                    int num16 = 0;
                    int num17 = 0;
                    int num18 = 0;
                    int num19 = 0;
                    for (int num20 = 0; num20 < 200; num20++)
                    {
                        if (npc[num20].active && npc[num20].townNPC)
                        {
                            if ((npc[num20].type != 0x25) && !npc[num20].homeless)
                            {
                                WorldGen.QuickFindHome(num20);
                            }
                            if (npc[num20].type == 0x25)
                            {
                                num13++;
                            }
                            if (npc[num20].type == 0x11)
                            {
                                num8++;
                            }
                            if (npc[num20].type == 0x12)
                            {
                                num9++;
                            }
                            if (npc[num20].type == 0x13)
                            {
                                num11++;
                            }
                            if (npc[num20].type == 20)
                            {
                                num10++;
                            }
                            if (npc[num20].type == 0x16)
                            {
                                num12++;
                            }
                            if (npc[num20].type == 0x26)
                            {
                                num14++;
                            }
                            if (npc[num20].type == 0x36)
                            {
                                num15++;
                            }
                            if (npc[num20].type == 0x6b)
                            {
                                num17++;
                            }
                            if (npc[num20].type == 0x6c)
                            {
                                num16++;
                            }
                            if (npc[num20].type == 0x7c)
                            {
                                num18++;
                            }
                            num19++;
                        }
                    }
                    if (WorldGen.spawnNPC == 0)
                    {
                        int num21 = 0;
                        bool flag2 = false;
                        int num22 = 0;
                        bool flag3 = false;
                        bool flag4 = false;
                        for (int num23 = 0; num23 < 0xff; num23++)
                        {
                            if (player[num23].active)
                            {
                                for (int num24 = 0; num24 < 0x30; num24++)
                                {
                                    if ((player[num23].inventory[num24] != null) & (player[num23].inventory[num24].stack > 0))
                                    {
                                        if (player[num23].inventory[num24].type == 0x47)
                                        {
                                            num21 += player[num23].inventory[num24].stack;
                                        }
                                        if (player[num23].inventory[num24].type == 0x48)
                                        {
                                            num21 += player[num23].inventory[num24].stack * 100;
                                        }
                                        if (player[num23].inventory[num24].type == 0x49)
                                        {
                                            num21 += player[num23].inventory[num24].stack * 0x2710;
                                        }
                                        if (player[num23].inventory[num24].type == 0x4a)
                                        {
                                            num21 += player[num23].inventory[num24].stack * 0xf4240;
                                        }
                                        if ((player[num23].inventory[num24].ammo == 14) || (player[num23].inventory[num24].useAmmo == 14))
                                        {
                                            flag3 = true;
                                        }
                                        if (((player[num23].inventory[num24].type == 0xa6) || (player[num23].inventory[num24].type == 0xa7)) || ((player[num23].inventory[num24].type == 0xa8) || (player[num23].inventory[num24].type == 0xeb)))
                                        {
                                            flag4 = true;
                                        }
                                    }
                                }
                                int num25 = player[num23].statLifeMax / 20;
                                if (num25 > 5)
                                {
                                    flag2 = true;
                                }
                                num22 += num25;
                            }
                        }
                        if (!NPC.downedBoss3 && (num13 == 0))
                        {
                            int index = NPC.NewNPC((dungeonX * 0x10) + 8, dungeonY * 0x10, 0x25, 0);
                            npc[index].homeless = false;
                            npc[index].homeTileX = dungeonX;
                            npc[index].homeTileY = dungeonY;
                        }
                        if ((WorldGen.spawnNPC == 0) && (num12 < 1))
                        {
                            WorldGen.spawnNPC = 0x16;
                        }
                        if (((WorldGen.spawnNPC == 0) && (num21 > 5000.0)) && (num8 < 1))
                        {
                            WorldGen.spawnNPC = 0x11;
                        }
                        if (((WorldGen.spawnNPC == 0) && flag2) && (num9 < 1))
                        {
                            WorldGen.spawnNPC = 0x12;
                        }
                        if (((WorldGen.spawnNPC == 0) && flag3) && (num11 < 1))
                        {
                            WorldGen.spawnNPC = 0x13;
                        }
                        if (((WorldGen.spawnNPC == 0) && ((NPC.downedBoss1 || NPC.downedBoss2) || NPC.downedBoss3)) && (num10 < 1))
                        {
                            WorldGen.spawnNPC = 20;
                        }
                        if (((WorldGen.spawnNPC == 0) && flag4) && ((num8 > 0) && (num14 < 1)))
                        {
                            WorldGen.spawnNPC = 0x26;
                        }
                        if (((WorldGen.spawnNPC == 0) && NPC.downedBoss3) && (num15 < 1))
                        {
                            WorldGen.spawnNPC = 0x36;
                        }
                        if (((WorldGen.spawnNPC == 0) && NPC.savedGoblin) && (num17 < 1))
                        {
                            WorldGen.spawnNPC = 0x6b;
                        }
                        if (((WorldGen.spawnNPC == 0) && NPC.savedWizard) && (num16 < 1))
                        {
                            WorldGen.spawnNPC = 0x6c;
                        }
                        if (((WorldGen.spawnNPC == 0) && NPC.savedMech) && (num18 < 1))
                        {
                            WorldGen.spawnNPC = 0x7c;
                        }
                    }
                }
            }
        }
    }
}

